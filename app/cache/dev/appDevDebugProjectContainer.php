<?php

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InactiveScopeException;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * appDevDebugProjectContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    /**
     * Constructor.
     */
    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 5; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services =
        $this->scopedServices =
        $this->scopeStacks = array();
        $this->scopes = array('request' => 'container');
        $this->scopeChildren = array('request' => array());
        $this->methodMap = array(
            'annotation_reader' => 'getAnnotationReaderService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.filter.cssrewrite' => 'getAssetic_Filter_CssrewriteService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_flusher' => 'getCacheFlusherService',
            'cache_flusher.event_dispatcher' => 'getCacheFlusher_EventDispatcherService',
            'cache_warmer' => 'getCacheWarmerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'doctrine_cache.providers.elcodi_categories' => 'getDoctrineCache_Providers_ElcodiCategoriesService',
            'doctrine_cache.providers.elcodi_comments' => 'getDoctrineCache_Providers_ElcodiCommentsService',
            'doctrine_cache.providers.elcodi_menus' => 'getDoctrineCache_Providers_ElcodiMenusService',
            'doctrine_cache.providers.elcodi_translations' => 'getDoctrineCache_Providers_ElcodiTranslationsService',
            'elcodi.admin.menu_builder.page' => 'getElcodi_Admin_MenuBuilder_PageService',
            'elcodi.admin_user_provider_entity_instance' => 'getElcodi_AdminUserProviderEntityInstanceService',
            'elcodi.applicator.automatic_coupon' => 'getElcodi_Applicator_AutomaticCouponService',
            'elcodi.calculator.exchange_rate' => 'getElcodi_Calculator_ExchangeRateService',
            'elcodi.cart_coupon_applicator.absolute' => 'getElcodi_CartCouponApplicator_AbsoluteService',
            'elcodi.cart_coupon_applicator.mxn_group' => 'getElcodi_CartCouponApplicator_MxnGroupService',
            'elcodi.cart_coupon_applicator.mxn_specific' => 'getElcodi_CartCouponApplicator_MxnSpecificService',
            'elcodi.cart_coupon_applicator.percent' => 'getElcodi_CartCouponApplicator_PercentService',
            'elcodi.cart_coupon_applicator_collector' => 'getElcodi_CartCouponApplicatorCollectorService',
            'elcodi.cart_coupon_applicator_function_collector' => 'getElcodi_CartCouponApplicatorFunctionCollectorService',
            'elcodi.cart_saver' => 'getElcodi_CartSaverService',
            'elcodi.command.elcodi_install' => 'getElcodi_Command_ElcodiInstallService',
            'elcodi.command.location_drop' => 'getElcodi_Command_LocationDropService',
            'elcodi.command.location_load' => 'getElcodi_Command_LocationLoadService',
            'elcodi.command.location_populate' => 'getElcodi_Command_LocationPopulateService',
            'elcodi.command.metrics_load' => 'getElcodi_Command_MetricsLoadService',
            'elcodi.command.plugin_disable' => 'getElcodi_Command_PluginDisableService',
            'elcodi.command.plugin_enable' => 'getElcodi_Command_PluginEnableService',
            'elcodi.command.plugins_list' => 'getElcodi_Command_PluginsListService',
            'elcodi.command.plugins_load' => 'getElcodi_Command_PluginsLoadService',
            'elcodi.command.populate_currency_rates' => 'getElcodi_Command_PopulateCurrencyRatesService',
            'elcodi.command.sitemap_dump' => 'getElcodi_Command_SitemapDumpService',
            'elcodi.command.sitemap_profile' => 'getElcodi_Command_SitemapProfileService',
            'elcodi.command.translations_warmup' => 'getElcodi_Command_TranslationsWarmupService',
            'elcodi.comment_cache' => 'getElcodi_CommentCacheService',
            'elcodi.container_parameters' => 'getElcodi_ContainerParametersService',
            'elcodi.controller.comment' => 'getElcodi_Controller_CommentService',
            'elcodi.controller.image_resize' => 'getElcodi_Controller_ImageResizeService',
            'elcodi.controller.image_upload' => 'getElcodi_Controller_ImageUploadService',
            'elcodi.controller.location_api' => 'getElcodi_Controller_LocationApiService',
            'elcodi.controller.metric_input' => 'getElcodi_Controller_MetricInputService',
            'elcodi.controller.page' => 'getElcodi_Controller_PageService',
            'elcodi.converter.currency' => 'getElcodi_Converter_CurrencyService',
            'elcodi.currency_exchange_rate_adapter.dummy' => 'getElcodi_CurrencyExchangeRateAdapter_DummyService',
            'elcodi.currency_exchange_rate_adapter.yahoo_finances' => 'getElcodi_CurrencyExchangeRateAdapter_YahooFinancesService',
            'elcodi.customer_provider_entity_instance' => 'getElcodi_CustomerProviderEntityInstanceService',
            'elcodi.director.address' => 'getElcodi_Director_AddressService',
            'elcodi.director.admin_user' => 'getElcodi_Director_AdminUserService',
            'elcodi.director.attribute' => 'getElcodi_Director_AttributeService',
            'elcodi.director.attribute_value' => 'getElcodi_Director_AttributeValueService',
            'elcodi.director.banner' => 'getElcodi_Director_BannerService',
            'elcodi.director.banner_zone' => 'getElcodi_Director_BannerZoneService',
            'elcodi.director.carrier' => 'getElcodi_Director_CarrierService',
            'elcodi.director.cart' => 'getElcodi_Director_CartService',
            'elcodi.director.cart_coupon' => 'getElcodi_Director_CartCouponService',
            'elcodi.director.cart_line' => 'getElcodi_Director_CartLineService',
            'elcodi.director.category' => 'getElcodi_Director_CategoryService',
            'elcodi.director.comment' => 'getElcodi_Director_CommentService',
            'elcodi.director.comment_vote' => 'getElcodi_Director_CommentVoteService',
            'elcodi.director.coupon' => 'getElcodi_Director_CouponService',
            'elcodi.director.currency' => 'getElcodi_Director_CurrencyService',
            'elcodi.director.currency_exchange_rate' => 'getElcodi_Director_CurrencyExchangeRateService',
            'elcodi.director.customer' => 'getElcodi_Director_CustomerService',
            'elcodi.director.entity_translation' => 'getElcodi_Director_EntityTranslationService',
            'elcodi.director.image' => 'getElcodi_Director_ImageService',
            'elcodi.director.language' => 'getElcodi_Director_LanguageService',
            'elcodi.director.location' => 'getElcodi_Director_LocationService',
            'elcodi.director.manufacturer' => 'getElcodi_Director_ManufacturerService',
            'elcodi.director.menu' => 'getElcodi_Director_MenuService',
            'elcodi.director.menu_node' => 'getElcodi_Director_MenuNodeService',
            'elcodi.director.newsletter_subscription' => 'getElcodi_Director_NewsletterSubscriptionService',
            'elcodi.director.order' => 'getElcodi_Director_OrderService',
            'elcodi.director.order_coupon' => 'getElcodi_Director_OrderCouponService',
            'elcodi.director.order_line' => 'getElcodi_Director_OrderLineService',
            'elcodi.director.page' => 'getElcodi_Director_PageService',
            'elcodi.director.product' => 'getElcodi_Director_ProductService',
            'elcodi.director.product_variant' => 'getElcodi_Director_ProductVariantService',
            'elcodi.director.purchasable_pack' => 'getElcodi_Director_PurchasablePackService',
            'elcodi.director.rule' => 'getElcodi_Director_RuleService',
            'elcodi.director.shipping_range' => 'getElcodi_Director_ShippingRangeService',
            'elcodi.director.state_transition_machine_state_line' => 'getElcodi_Director_StateTransitionMachineStateLineService',
            'elcodi.director.store' => 'getElcodi_Director_StoreService',
            'elcodi.director.tax' => 'getElcodi_Director_TaxService',
            'elcodi.director.zone' => 'getElcodi_Director_ZoneService',
            'elcodi.enabled_payment_plugins' => 'getElcodi_EnabledPaymentPluginsService',
            'elcodi.enabled_plugins' => 'getElcodi_EnabledPluginsService',
            'elcodi.enabled_shipping_plugins' => 'getElcodi_EnabledShippingPluginsService',
            'elcodi.entity_translator' => 'getElcodi_EntityTranslatorService',
            'elcodi.entity_translator_builder' => 'getElcodi_EntityTranslatorBuilderService',
            'elcodi.entity_translator_changes' => 'getElcodi_EntityTranslatorChangesService',
            'elcodi.event_dispatcher.address' => 'getElcodi_EventDispatcher_AddressService',
            'elcodi.event_dispatcher.cart' => 'getElcodi_EventDispatcher_CartService',
            'elcodi.event_dispatcher.cart_coupon' => 'getElcodi_EventDispatcher_CartCouponService',
            'elcodi.event_dispatcher.cart_line' => 'getElcodi_EventDispatcher_CartLineService',
            'elcodi.event_dispatcher.comment' => 'getElcodi_EventDispatcher_CommentService',
            'elcodi.event_dispatcher.coupon' => 'getElcodi_EventDispatcher_CouponService',
            'elcodi.event_dispatcher.entity_translator' => 'getElcodi_EventDispatcher_EntityTranslatorService',
            'elcodi.event_dispatcher.hook_system' => 'getElcodi_EventDispatcher_HookSystemService',
            'elcodi.event_dispatcher.machine' => 'getElcodi_EventDispatcher_MachineService',
            'elcodi.event_dispatcher.media' => 'getElcodi_EventDispatcher_MediaService',
            'elcodi.event_dispatcher.newsletter' => 'getElcodi_EventDispatcher_NewsletterService',
            'elcodi.event_dispatcher.order' => 'getElcodi_EventDispatcher_OrderService',
            'elcodi.event_dispatcher.order_coupon' => 'getElcodi_EventDispatcher_OrderCouponService',
            'elcodi.event_dispatcher.order_line' => 'getElcodi_EventDispatcher_OrderLineService',
            'elcodi.event_dispatcher.password' => 'getElcodi_EventDispatcher_PasswordService',
            'elcodi.event_dispatcher.payment' => 'getElcodi_EventDispatcher_PaymentService',
            'elcodi.event_dispatcher.shipping' => 'getElcodi_EventDispatcher_ShippingService',
            'elcodi.event_dispatcher.sitemap' => 'getElcodi_EventDispatcher_SitemapService',
            'elcodi.event_dispatcher.user' => 'getElcodi_EventDispatcher_UserService',
            'elcodi.event_listener.address_clone' => 'getElcodi_EventListener_AddressCloneService',
            'elcodi.event_listener.admin_user_password' => 'getElcodi_EventListener_AdminUserPasswordService',
            'elcodi.event_listener.comment_cache_invalidation' => 'getElcodi_EventListener_CommentCacheInvalidationService',
            'elcodi.event_listener.covert_cart_coupons_to_order_coupons' => 'getElcodi_EventListener_CovertCartCouponsToOrderCouponsService',
            'elcodi.event_listener.create_and_save_cart_coupon' => 'getElcodi_EventListener_CreateAndSaveCartCouponService',
            'elcodi.event_listener.create_order_coupon_by_coupon' => 'getElcodi_EventListener_CreateOrderCouponByCouponService',
            'elcodi.event_listener.customer_password' => 'getElcodi_EventListener_CustomerPasswordService',
            'elcodi.event_listener.entity_translator_entity' => 'getElcodi_EventListener_EntityTranslatorEntityService',
            'elcodi.event_listener.entity_translator_form' => 'getElcodi_EventListener_EntityTranslatorFormService',
            'elcodi.event_listener.fix_category_integrity' => 'getElcodi_EventListener_FixCategoryIntegrityService',
            'elcodi.event_listener.load_cart_coupon_amount' => 'getElcodi_EventListener_LoadCartCouponAmountService',
            'elcodi.event_listener.load_cart_prices' => 'getElcodi_EventListener_LoadCartPricesService',
            'elcodi.event_listener.load_cart_shipping_amount' => 'getElcodi_EventListener_LoadCartShippingAmountService',
            'elcodi.event_listener.load_order_shipping_method' => 'getElcodi_EventListener_LoadOrderShippingMethodService',
            'elcodi.event_listener.make_coupon_used' => 'getElcodi_EventListener_MakeCouponUsedService',
            'elcodi.event_listener.newsletter' => 'getElcodi_EventListener_NewsletterService',
            'elcodi.event_listener.order_creation' => 'getElcodi_EventListener_OrderCreationService',
            'elcodi.event_listener.referrer_session' => 'getElcodi_EventListener_ReferrerSessionService',
            'elcodi.event_listener.remove_cart_coupon' => 'getElcodi_EventListener_RemoveCartCouponService',
            'elcodi.event_listener.root_category' => 'getElcodi_EventListener_RootCategoryService',
            'elcodi.event_listener.save_cart' => 'getElcodi_EventListener_SaveCartService',
            'elcodi.event_listener.save_cart_to_session' => 'getElcodi_EventListener_SaveCartToSessionService',
            'elcodi.event_listener.try_automatic_coupons_application' => 'getElcodi_EventListener_TryAutomaticCouponsApplicationService',
            'elcodi.event_listener.update_cart_after_coupon_change' => 'getElcodi_EventListener_UpdateCartAfterCouponChangeService',
            'elcodi.event_listener.update_cart_with_user' => 'getElcodi_EventListener_UpdateCartWithUserService',
            'elcodi.event_listener.update_last_login' => 'getElcodi_EventListener_UpdateLastLoginService',
            'elcodi.event_listener.update_stock_by_cart_line' => 'getElcodi_EventListener_UpdateStockByCartLineService',
            'elcodi.event_listener.validate_cart_amount' => 'getElcodi_EventListener_ValidateCartAmountService',
            'elcodi.event_listener.validate_cart_coupon' => 'getElcodi_EventListener_ValidateCartCouponService',
            'elcodi.event_listener.validate_cart_integrity' => 'getElcodi_EventListener_ValidateCartIntegrityService',
            'elcodi.event_listener.validate_coupon' => 'getElcodi_EventListener_ValidateCouponService',
            'elcodi.event_listener.validate_coupon_duplication' => 'getElcodi_EventListener_ValidateCouponDuplicationService',
            'elcodi.event_listener.validate_coupon_minimum_price' => 'getElcodi_EventListener_ValidateCouponMinimumPriceService',
            'elcodi.event_listener.validate_coupon_rules' => 'getElcodi_EventListener_ValidateCouponRulesService',
            'elcodi.event_listener.validate_coupons_from_cart' => 'getElcodi_EventListener_ValidateCouponsFromCartService',
            'elcodi.event_listener.validate_empty_shipping_amount' => 'getElcodi_EventListener_ValidateEmptyShippingAmountService',
            'elcodi.event_listener.validate_stackable_coupon' => 'getElcodi_EventListener_ValidateStackableCouponService',
            'elcodi.expression_language' => 'getElcodi_ExpressionLanguageService',
            'elcodi.expression_language.money_provider' => 'getElcodi_ExpressionLanguage_MoneyProviderService',
            'elcodi.expression_language_container_provider' => 'getElcodi_ExpressionLanguageContainerProviderService',
            'elcodi.expression_language_context_collector' => 'getElcodi_ExpressionLanguageContextCollectorService',
            'elcodi.expression_language_rule_provider' => 'getElcodi_ExpressionLanguageRuleProviderService',
            'elcodi.extractor' => 'getElcodi_ExtractorService',
            'elcodi.factory.address' => 'getElcodi_Factory_AddressService',
            'elcodi.factory.address_view' => 'getElcodi_Factory_AddressViewService',
            'elcodi.factory.admin_user' => 'getElcodi_Factory_AdminUserService',
            'elcodi.factory.attribute' => 'getElcodi_Factory_AttributeService',
            'elcodi.factory.attribute_value' => 'getElcodi_Factory_AttributeValueService',
            'elcodi.factory.banner' => 'getElcodi_Factory_BannerService',
            'elcodi.factory.banner_zone' => 'getElcodi_Factory_BannerZoneService',
            'elcodi.factory.cart' => 'getElcodi_Factory_CartService',
            'elcodi.factory.cart_coupon' => 'getElcodi_Factory_CartCouponService',
            'elcodi.factory.cart_line' => 'getElcodi_Factory_CartLineService',
            'elcodi.factory.category' => 'getElcodi_Factory_CategoryService',
            'elcodi.factory.comment' => 'getElcodi_Factory_CommentService',
            'elcodi.factory.comment_vote' => 'getElcodi_Factory_CommentVoteService',
            'elcodi.factory.coupon' => 'getElcodi_Factory_CouponService',
            'elcodi.factory.currency' => 'getElcodi_Factory_CurrencyService',
            'elcodi.factory.currency_exchange_rate' => 'getElcodi_Factory_CurrencyExchangeRateService',
            'elcodi.factory.customer' => 'getElcodi_Factory_CustomerService',
            'elcodi.factory.datetime' => 'getElcodi_Factory_DatetimeService',
            'elcodi.factory.entity_translation' => 'getElcodi_Factory_EntityTranslationService',
            'elcodi.factory.entity_translator' => 'getElcodi_Factory_EntityTranslatorService',
            'elcodi.factory.image' => 'getElcodi_Factory_ImageService',
            'elcodi.factory.language' => 'getElcodi_Factory_LanguageService',
            'elcodi.factory.location' => 'getElcodi_Factory_LocationService',
            'elcodi.factory.location_data' => 'getElcodi_Factory_LocationDataService',
            'elcodi.factory.manufacturer' => 'getElcodi_Factory_ManufacturerService',
            'elcodi.factory.menu' => 'getElcodi_Factory_MenuService',
            'elcodi.factory.menu_node' => 'getElcodi_Factory_MenuNodeService',
            'elcodi.factory.metric_entry' => 'getElcodi_Factory_MetricEntryService',
            'elcodi.factory.newsletter_subscription' => 'getElcodi_Factory_NewsletterSubscriptionService',
            'elcodi.factory.order' => 'getElcodi_Factory_OrderService',
            'elcodi.factory.order_coupon' => 'getElcodi_Factory_OrderCouponService',
            'elcodi.factory.order_line' => 'getElcodi_Factory_OrderLineService',
            'elcodi.factory.page' => 'getElcodi_Factory_PageService',
            'elcodi.factory.product' => 'getElcodi_Factory_ProductService',
            'elcodi.factory.product_variant' => 'getElcodi_Factory_ProductVariantService',
            'elcodi.factory.purchasable_pack' => 'getElcodi_Factory_PurchasablePackService',
            'elcodi.factory.rule' => 'getElcodi_Factory_RuleService',
            'elcodi.factory.sitemap_element' => 'getElcodi_Factory_SitemapElementService',
            'elcodi.factory.state_transition_machine' => 'getElcodi_Factory_StateTransitionMachineService',
            'elcodi.factory.state_transition_machine_state_line' => 'getElcodi_Factory_StateTransitionMachineStateLineService',
            'elcodi.factory.store' => 'getElcodi_Factory_StoreService',
            'elcodi.factory.tax' => 'getElcodi_Factory_TaxService',
            'elcodi.factory.zone' => 'getElcodi_Factory_ZoneService',
            'elcodi.finder.zone' => 'getElcodi_Finder_ZoneService',
            'elcodi.form_type.plugin' => 'getElcodi_FormType_PluginService',
            'elcodi.formatter.address' => 'getElcodi_Formatter_AddressService',
            'elcodi.generator.random_string' => 'getElcodi_Generator_RandomStringService',
            'elcodi.generator.sha1' => 'getElcodi_Generator_Sha1Service',
            'elcodi.generator.uniqid' => 'getElcodi_Generator_UniqidService',
            'elcodi.guzzle_client' => 'getElcodi_GuzzleClientService',
            'elcodi.image_resolver.abstract_product' => 'getElcodi_ImageResolver_AbstractProductService',
            'elcodi.image_resolver.product' => 'getElcodi_ImageResolver_ProductService',
            'elcodi.image_resolver.product_variant' => 'getElcodi_ImageResolver_ProductVariantService',
            'elcodi.image_resolver.purchasable' => 'getElcodi_ImageResolver_PurchasableService',
            'elcodi.image_resolver.purchasable_pack' => 'getElcodi_ImageResolver_PurchasablePackService',
            'elcodi.json_encoder' => 'getElcodi_JsonEncoderService',
            'elcodi.languages' => 'getElcodi_LanguagesService',
            'elcodi.languages_iso' => 'getElcodi_LanguagesIsoService',
            'elcodi.languages_iso_array' => 'getElcodi_LanguagesIsoArrayService',
            'elcodi.languages_with_master_promoted' => 'getElcodi_LanguagesWithMasterPromotedService',
            'elcodi.loader.cart_coupon_prices' => 'getElcodi_Loader_CartCouponPricesService',
            'elcodi.loader.cart_prices' => 'getElcodi_Loader_CartPricesService',
            'elcodi.loader.cart_shipping_amount' => 'getElcodi_Loader_CartShippingAmountService',
            'elcodi.loader.order_shipping_method' => 'getElcodi_Loader_OrderShippingMethodService',
            'elcodi.loader.plugin' => 'getElcodi_Loader_PluginService',
            'elcodi.loader.plugin_routes' => 'getElcodi_Loader_PluginRoutesService',
            'elcodi.locale' => 'getElcodi_LocaleService',
            'elcodi.location_api_urls' => 'getElcodi_LocationApiUrlsService',
            'elcodi.location_builder' => 'getElcodi_LocationBuilderService',
            'elcodi.location_loader' => 'getElcodi_LocationLoaderService',
            'elcodi.location_loader_adapter.github' => 'getElcodi_LocationLoaderAdapter_GithubService',
            'elcodi.location_populator' => 'getElcodi_LocationPopulatorService',
            'elcodi.location_populator_adapter.geonames' => 'getElcodi_LocationPopulatorAdapter_GeonamesService',
            'elcodi.location_provider_adapter.api' => 'getElcodi_LocationProviderAdapter_ApiService',
            'elcodi.location_provider_adapter.service' => 'getElcodi_LocationProviderAdapter_ServiceService',
            'elcodi.manager.address' => 'getElcodi_Manager_AddressService',
            'elcodi.manager.admin_user' => 'getElcodi_Manager_AdminUserService',
            'elcodi.manager.banner' => 'getElcodi_Manager_BannerService',
            'elcodi.manager.cart' => 'getElcodi_Manager_CartService',
            'elcodi.manager.cart_coupon' => 'getElcodi_Manager_CartCouponService',
            'elcodi.manager.comment' => 'getElcodi_Manager_CommentService',
            'elcodi.manager.comment_vote' => 'getElcodi_Manager_CommentVoteService',
            'elcodi.manager.coupon' => 'getElcodi_Manager_CouponService',
            'elcodi.manager.currency' => 'getElcodi_Manager_CurrencyService',
            'elcodi.manager.currency_session' => 'getElcodi_Manager_CurrencySessionService',
            'elcodi.manager.customer' => 'getElcodi_Manager_CustomerService',
            'elcodi.manager.language' => 'getElcodi_Manager_LanguageService',
            'elcodi.manager.locale' => 'getElcodi_Manager_LocaleService',
            'elcodi.manager.media_file' => 'getElcodi_Manager_MediaFileService',
            'elcodi.manager.media_image' => 'getElcodi_Manager_MediaImageService',
            'elcodi.manager.menu' => 'getElcodi_Manager_MenuService',
            'elcodi.manager.newsletter' => 'getElcodi_Manager_NewsletterService',
            'elcodi.manager.password' => 'getElcodi_Manager_PasswordService',
            'elcodi.manager.plugin' => 'getElcodi_Manager_PluginService',
            'elcodi.manager.promoted_language' => 'getElcodi_Manager_PromotedLanguageService',
            'elcodi.manager.rule' => 'getElcodi_Manager_RuleService',
            'elcodi.mapping_provider' => 'getElcodi_MappingProviderService',
            'elcodi.matcher.zone' => 'getElcodi_Matcher_ZoneService',
            'elcodi.media_resize_adapter.gd' => 'getElcodi_MediaResizeAdapter_GdService',
            'elcodi.media_resize_adapter.imagemagick' => 'getElcodi_MediaResizeAdapter_ImagemagickService',
            'elcodi.menu_builder' => 'getElcodi_MenuBuilderService',
            'elcodi.menu_filter.menu_disabled' => 'getElcodi_MenuFilter_MenuDisabledService',
            'elcodi.menu_filter.menu_expanded' => 'getElcodi_MenuFilter_MenuExpandedService',
            'elcodi.menu_filterer' => 'getElcodi_MenuFiltererService',
            'elcodi.menu_modifier' => 'getElcodi_MenuModifierService',
            'elcodi.metric_loader' => 'getElcodi_MetricLoaderService',
            'elcodi.metric_manager' => 'getElcodi_MetricManagerService',
            'elcodi.money_printer' => 'getElcodi_MoneyPrinterService',
            'elcodi.name_resolver.product' => 'getElcodi_NameResolver_ProductService',
            'elcodi.name_resolver.product_variant' => 'getElcodi_NameResolver_ProductVariantService',
            'elcodi.name_resolver.purchasable' => 'getElcodi_NameResolver_PurchasableService',
            'elcodi.name_resolver.purchasable_pack' => 'getElcodi_NameResolver_PurchasablePackService',
            'elcodi.object_manager.address' => 'getElcodi_ObjectManager_AddressService',
            'elcodi.object_manager.admin_user' => 'getElcodi_ObjectManager_AdminUserService',
            'elcodi.object_manager.attribute' => 'getElcodi_ObjectManager_AttributeService',
            'elcodi.object_manager.attribute_value' => 'getElcodi_ObjectManager_AttributeValueService',
            'elcodi.object_manager.banner' => 'getElcodi_ObjectManager_BannerService',
            'elcodi.object_manager.banner_zone' => 'getElcodi_ObjectManager_BannerZoneService',
            'elcodi.object_manager.carrier' => 'getElcodi_ObjectManager_CarrierService',
            'elcodi.object_manager.cart' => 'getElcodi_ObjectManager_CartService',
            'elcodi.object_manager.cart_coupon' => 'getElcodi_ObjectManager_CartCouponService',
            'elcodi.object_manager.cart_line' => 'getElcodi_ObjectManager_CartLineService',
            'elcodi.object_manager.category' => 'getElcodi_ObjectManager_CategoryService',
            'elcodi.object_manager.comment' => 'getElcodi_ObjectManager_CommentService',
            'elcodi.object_manager.comment_vote' => 'getElcodi_ObjectManager_CommentVoteService',
            'elcodi.object_manager.coupon' => 'getElcodi_ObjectManager_CouponService',
            'elcodi.object_manager.currency' => 'getElcodi_ObjectManager_CurrencyService',
            'elcodi.object_manager.currency_exchange_rate' => 'getElcodi_ObjectManager_CurrencyExchangeRateService',
            'elcodi.object_manager.customer' => 'getElcodi_ObjectManager_CustomerService',
            'elcodi.object_manager.entity_translation' => 'getElcodi_ObjectManager_EntityTranslationService',
            'elcodi.object_manager.entry' => 'getElcodi_ObjectManager_EntryService',
            'elcodi.object_manager.image' => 'getElcodi_ObjectManager_ImageService',
            'elcodi.object_manager.language' => 'getElcodi_ObjectManager_LanguageService',
            'elcodi.object_manager.location' => 'getElcodi_ObjectManager_LocationService',
            'elcodi.object_manager.manufacturer' => 'getElcodi_ObjectManager_ManufacturerService',
            'elcodi.object_manager.menu' => 'getElcodi_ObjectManager_MenuService',
            'elcodi.object_manager.menu_node' => 'getElcodi_ObjectManager_MenuNodeService',
            'elcodi.object_manager.newsletter_subscription' => 'getElcodi_ObjectManager_NewsletterSubscriptionService',
            'elcodi.object_manager.order' => 'getElcodi_ObjectManager_OrderService',
            'elcodi.object_manager.order_coupon' => 'getElcodi_ObjectManager_OrderCouponService',
            'elcodi.object_manager.order_line' => 'getElcodi_ObjectManager_OrderLineService',
            'elcodi.object_manager.page' => 'getElcodi_ObjectManager_PageService',
            'elcodi.object_manager.plugin' => 'getElcodi_ObjectManager_PluginService',
            'elcodi.object_manager.product' => 'getElcodi_ObjectManager_ProductService',
            'elcodi.object_manager.product_variant' => 'getElcodi_ObjectManager_ProductVariantService',
            'elcodi.object_manager.purchasable' => 'getElcodi_ObjectManager_PurchasableService',
            'elcodi.object_manager.purchasable_pack' => 'getElcodi_ObjectManager_PurchasablePackService',
            'elcodi.object_manager.rule' => 'getElcodi_ObjectManager_RuleService',
            'elcodi.object_manager.shipping_range' => 'getElcodi_ObjectManager_ShippingRangeService',
            'elcodi.object_manager.state_transition_machine_state_line' => 'getElcodi_ObjectManager_StateTransitionMachineStateLineService',
            'elcodi.object_manager.store' => 'getElcodi_ObjectManager_StoreService',
            'elcodi.object_manager.tax' => 'getElcodi_ObjectManager_TaxService',
            'elcodi.object_manager.zone' => 'getElcodi_ObjectManager_ZoneService',
            'elcodi.order.payment_states_machine' => 'getElcodi_Order_PaymentStatesMachineService',
            'elcodi.order.shipping_states_machine' => 'getElcodi_Order_ShippingStatesMachineService',
            'elcodi.order_payment_states_machine_builder' => 'getElcodi_OrderPaymentStatesMachineBuilderService',
            'elcodi.order_payment_states_machine_manager' => 'getElcodi_OrderPaymentStatesMachineManagerService',
            'elcodi.order_shipping_states_machine_builder' => 'getElcodi_OrderShippingStatesMachineBuilderService',
            'elcodi.order_shipping_states_machine_manager' => 'getElcodi_OrderShippingStatesMachineManagerService',
            'elcodi.page_renderer_chain' => 'getElcodi_PageRendererChainService',
            'elcodi.payment_plugins' => 'getElcodi_PaymentPluginsService',
            'elcodi.php_encoder' => 'getElcodi_PhpEncoderService',
            'elcodi.plugins' => 'getElcodi_PluginsService',
            'elcodi.populator.currency_exchange_rate' => 'getElcodi_Populator_CurrencyExchangeRateService',
            'elcodi.provider.admin_user_provider' => 'getElcodi_Provider_AdminUserProviderService',
            'elcodi.provider.category_tree' => 'getElcodi_Provider_CategoryTreeService',
            'elcodi.provider.customer_provider' => 'getElcodi_Provider_CustomerProviderService',
            'elcodi.provider.locale' => 'getElcodi_Provider_LocaleService',
            'elcodi.provider.manager' => 'getElcodi_Provider_ManagerService',
            'elcodi.provider.repository' => 'getElcodi_Provider_RepositoryService',
            'elcodi.redis_metrics_bucket' => 'getElcodi_RedisMetricsBucketService',
            'elcodi.referrer_provider' => 'getElcodi_ReferrerProviderService',
            'elcodi.related_purchasables_provider.same_category' => 'getElcodi_RelatedPurchasablesProvider_SameCategoryService',
            'elcodi.repository.address' => 'getElcodi_Repository_AddressService',
            'elcodi.repository.admin_user' => 'getElcodi_Repository_AdminUserService',
            'elcodi.repository.attribute' => 'getElcodi_Repository_AttributeService',
            'elcodi.repository.attribute_value' => 'getElcodi_Repository_AttributeValueService',
            'elcodi.repository.banner' => 'getElcodi_Repository_BannerService',
            'elcodi.repository.banner_zone' => 'getElcodi_Repository_BannerZoneService',
            'elcodi.repository.carrier' => 'getElcodi_Repository_CarrierService',
            'elcodi.repository.cart' => 'getElcodi_Repository_CartService',
            'elcodi.repository.cart_coupon' => 'getElcodi_Repository_CartCouponService',
            'elcodi.repository.cart_line' => 'getElcodi_Repository_CartLineService',
            'elcodi.repository.category' => 'getElcodi_Repository_CategoryService',
            'elcodi.repository.comment' => 'getElcodi_Repository_CommentService',
            'elcodi.repository.comment_vote' => 'getElcodi_Repository_CommentVoteService',
            'elcodi.repository.coupon' => 'getElcodi_Repository_CouponService',
            'elcodi.repository.currency' => 'getElcodi_Repository_CurrencyService',
            'elcodi.repository.currency_exchange_rate' => 'getElcodi_Repository_CurrencyExchangeRateService',
            'elcodi.repository.customer' => 'getElcodi_Repository_CustomerService',
            'elcodi.repository.entity_translation' => 'getElcodi_Repository_EntityTranslationService',
            'elcodi.repository.image' => 'getElcodi_Repository_ImageService',
            'elcodi.repository.language' => 'getElcodi_Repository_LanguageService',
            'elcodi.repository.location' => 'getElcodi_Repository_LocationService',
            'elcodi.repository.manufacturer' => 'getElcodi_Repository_ManufacturerService',
            'elcodi.repository.menu' => 'getElcodi_Repository_MenuService',
            'elcodi.repository.menu_node' => 'getElcodi_Repository_MenuNodeService',
            'elcodi.repository.metric_entry' => 'getElcodi_Repository_MetricEntryService',
            'elcodi.repository.newsletter_subscription' => 'getElcodi_Repository_NewsletterSubscriptionService',
            'elcodi.repository.order' => 'getElcodi_Repository_OrderService',
            'elcodi.repository.order_coupon' => 'getElcodi_Repository_OrderCouponService',
            'elcodi.repository.order_line' => 'getElcodi_Repository_OrderLineService',
            'elcodi.repository.page' => 'getElcodi_Repository_PageService',
            'elcodi.repository.plugin' => 'getElcodi_Repository_PluginService',
            'elcodi.repository.product' => 'getElcodi_Repository_ProductService',
            'elcodi.repository.product_variant' => 'getElcodi_Repository_ProductVariantService',
            'elcodi.repository.purchasable' => 'getElcodi_Repository_PurchasableService',
            'elcodi.repository.purchasable_pack' => 'getElcodi_Repository_PurchasablePackService',
            'elcodi.repository.rule' => 'getElcodi_Repository_RuleService',
            'elcodi.repository.shipping_range' => 'getElcodi_Repository_ShippingRangeService',
            'elcodi.repository.state_transition_machine_state_line' => 'getElcodi_Repository_StateTransitionMachineStateLineService',
            'elcodi.repository.store' => 'getElcodi_Repository_StoreService',
            'elcodi.repository.tax' => 'getElcodi_Repository_TaxService',
            'elcodi.repository.zone' => 'getElcodi_Repository_ZoneService',
            'elcodi.resolver.image' => 'getElcodi_Resolver_ImageService',
            'elcodi.resolver.product_options' => 'getElcodi_Resolver_ProductOptionsService',
            'elcodi.resolver.shipping' => 'getElcodi_Resolver_ShippingService',
            'elcodi.service.category_integrity_fixer' => 'getElcodi_Service_CategoryIntegrityFixerService',
            'elcodi.services.cached_entity_translation_provider' => 'getElcodi_Services_CachedEntityTranslationProviderService',
            'elcodi.services.entity_translation_provider' => 'getElcodi_Services_EntityTranslationProviderService',
            'elcodi.session_manager.cart' => 'getElcodi_SessionManager_CartService',
            'elcodi.shipping_plugins' => 'getElcodi_ShippingPluginsService',
            'elcodi.sitemap_builder.main' => 'getElcodi_SitemapBuilder_MainService',
            'elcodi.sitemap_dumper.filesystem' => 'getElcodi_SitemapDumper_FilesystemService',
            'elcodi.sitemap_dumper.main' => 'getElcodi_SitemapDumper_MainService',
            'elcodi.sitemap_profile.main' => 'getElcodi_SitemapProfile_MainService',
            'elcodi.sitemap_renderer.xml' => 'getElcodi_SitemapRenderer_XmlService',
            'elcodi.sitemap_transformer.static' => 'getElcodi_SitemapTransformer_StaticService',
            'elcodi.stock_updater.product' => 'getElcodi_StockUpdater_ProductService',
            'elcodi.stock_updater.product_variant' => 'getElcodi_StockUpdater_ProductVariantService',
            'elcodi.stock_updater.purchasable' => 'getElcodi_StockUpdater_PurchasableService',
            'elcodi.stock_updater.purchasable_pack' => 'getElcodi_StockUpdater_PurchasablePackService',
            'elcodi.stock_validator.product' => 'getElcodi_StockValidator_ProductService',
            'elcodi.stock_validator.product_variant' => 'getElcodi_StockValidator_ProductVariantService',
            'elcodi.stock_validator.purchasable' => 'getElcodi_StockValidator_PurchasableService',
            'elcodi.stock_validator.purchasable_pack' => 'getElcodi_StockValidator_PurchasablePackService',
            'elcodi.store' => 'getElcodi_StoreService',
            'elcodi.store_address' => 'getElcodi_StoreAddressService',
            'elcodi.store_default_currency' => 'getElcodi_StoreDefaultCurrencyService',
            'elcodi.store_default_currency_iso' => 'getElcodi_StoreDefaultCurrencyIsoService',
            'elcodi.store_default_language' => 'getElcodi_StoreDefaultLanguageService',
            'elcodi.store_default_language_iso' => 'getElcodi_StoreDefaultLanguageIsoService',
            'elcodi.store_routing_strategy' => 'getElcodi_StoreRoutingStrategyService',
            'elcodi.store_template' => 'getElcodi_StoreTemplateService',
            'elcodi.store_template_bundle' => 'getElcodi_StoreTemplateBundleService',
            'elcodi.store_template_hash' => 'getElcodi_StoreTemplateHashService',
            'elcodi.store_tracker' => 'getElcodi_StoreTrackerService',
            'elcodi.store_uses_stock' => 'getElcodi_StoreUsesStockService',
            'elcodi.transformer.cart_coupon_to_order_coupon' => 'getElcodi_Transformer_CartCouponToOrderCouponService',
            'elcodi.transformer.cart_line_order_line' => 'getElcodi_Transformer_CartLineOrderLineService',
            'elcodi.transformer.cart_order' => 'getElcodi_Transformer_CartOrderService',
            'elcodi.transformer.coupon_to_order_coupon' => 'getElcodi_Transformer_CouponToOrderCouponService',
            'elcodi.transformer.location_to_location_data' => 'getElcodi_Transformer_LocationToLocationDataService',
            'elcodi.transformer.media_file_identifier' => 'getElcodi_Transformer_MediaFileIdentifierService',
            'elcodi.transformer.media_image_etag' => 'getElcodi_Transformer_MediaImageEtagService',
            'elcodi.transformer.page_response' => 'getElcodi_Transformer_PageResponseService',
            'elcodi.truncator.order_coupon' => 'getElcodi_Truncator_OrderCouponService',
            'elcodi.updater.cart_line_stock' => 'getElcodi_Updater_CartLineStockService',
            'elcodi.uploader.image' => 'getElcodi_Uploader_ImageService',
            'elcodi.validator.cart_amount' => 'getElcodi_Validator_CartAmountService',
            'elcodi.validator.cart_coupon' => 'getElcodi_Validator_CartCouponService',
            'elcodi.validator.cart_coupon_minimum_price' => 'getElcodi_Validator_CartCouponMinimumPriceService',
            'elcodi.validator.cart_coupon_rule' => 'getElcodi_Validator_CartCouponRuleService',
            'elcodi.validator.cart_integrity' => 'getElcodi_Validator_CartIntegrityService',
            'elcodi.validator.cart_shipping_method' => 'getElcodi_Validator_CartShippingMethodService',
            'elcodi.validator.city_exists' => 'getElcodi_Validator_CityExistsService',
            'elcodi.validator.duplicated_coupon' => 'getElcodi_Validator_DuplicatedCouponService',
            'elcodi.validator.stackable_coupon' => 'getElcodi_Validator_StackableCouponService',
            'elcodi.wrapper.admin_user' => 'getElcodi_Wrapper_AdminUserService',
            'elcodi.wrapper.cart' => 'getElcodi_Wrapper_CartService',
            'elcodi.wrapper.cart_session' => 'getElcodi_Wrapper_CartSessionService',
            'elcodi.wrapper.currency' => 'getElcodi_Wrapper_CurrencyService',
            'elcodi.wrapper.customer' => 'getElcodi_Wrapper_CustomerService',
            'elcodi.wrapper.default_currency' => 'getElcodi_Wrapper_DefaultCurrencyService',
            'elcodi.wrapper.empty_money' => 'getElcodi_Wrapper_EmptyMoneyService',
            'elcodi.wrapper.payment_methods' => 'getElcodi_Wrapper_PaymentMethodsService',
            'elcodi.wrapper.shipping_methods' => 'getElcodi_Wrapper_ShippingMethodsService',
            'elcodi.wrapper.store' => 'getElcodi_Wrapper_StoreService',
            'elcodi_admin.category_sorter' => 'getElcodiAdmin_CategorySorterService',
            'elcodi_admin.event_listener.category_position' => 'getElcodiAdmin_EventListener_CategoryPositionService',
            'elcodi_admin.form.location_selector_builder' => 'getElcodiAdmin_Form_LocationSelectorBuilderService',
            'elcodi_admin.form_event_listener.permanent_page' => 'getElcodiAdmin_FormEventListener_PermanentPageService',
            'elcodi_admin.form_type.address' => 'getElcodiAdmin_FormType_AddressService',
            'elcodi_admin.form_type.admin_user' => 'getElcodiAdmin_FormType_AdminUserService',
            'elcodi_admin.form_type.attribute' => 'getElcodiAdmin_FormType_AttributeService',
            'elcodi_admin.form_type.banner' => 'getElcodiAdmin_FormType_BannerService',
            'elcodi_admin.form_type.banner_zone' => 'getElcodiAdmin_FormType_BannerZoneService',
            'elcodi_admin.form_type.blog_post' => 'getElcodiAdmin_FormType_BlogPostService',
            'elcodi_admin.form_type.category' => 'getElcodiAdmin_FormType_CategoryService',
            'elcodi_admin.form_type.coupon' => 'getElcodiAdmin_FormType_CouponService',
            'elcodi_admin.form_type.currency' => 'getElcodiAdmin_FormType_CurrencyService',
            'elcodi_admin.form_type.customer' => 'getElcodiAdmin_FormType_CustomerService',
            'elcodi_admin.form_type.email' => 'getElcodiAdmin_FormType_EmailService',
            'elcodi_admin.form_type.image' => 'getElcodiAdmin_FormType_ImageService',
            'elcodi_admin.form_type.language' => 'getElcodiAdmin_FormType_LanguageService',
            'elcodi_admin.form_type.login' => 'getElcodiAdmin_FormType_LoginService',
            'elcodi_admin.form_type.manufacturer' => 'getElcodiAdmin_FormType_ManufacturerService',
            'elcodi_admin.form_type.money' => 'getElcodiAdmin_FormType_MoneyService',
            'elcodi_admin.form_type.newsletter_subscription' => 'getElcodiAdmin_FormType_NewsletterSubscriptionService',
            'elcodi_admin.form_type.page' => 'getElcodiAdmin_FormType_PageService',
            'elcodi_admin.form_type.password_recover' => 'getElcodiAdmin_FormType_PasswordRecoverService',
            'elcodi_admin.form_type.password_remember' => 'getElcodiAdmin_FormType_PasswordRememberService',
            'elcodi_admin.form_type.product' => 'getElcodiAdmin_FormType_ProductService',
            'elcodi_admin.form_type.product_variant' => 'getElcodiAdmin_FormType_ProductVariantService',
            'elcodi_admin.form_type.profile' => 'getElcodiAdmin_FormType_ProfileService',
            'elcodi_admin.form_type.purchasable_pack' => 'getElcodiAdmin_FormType_PurchasablePackService',
            'elcodi_admin.form_type.register' => 'getElcodiAdmin_FormType_RegisterService',
            'elcodi_admin.form_type.store_address' => 'getElcodiAdmin_FormType_StoreAddressService',
            'elcodi_admin.form_type.store_corporate' => 'getElcodiAdmin_FormType_StoreCorporateService',
            'elcodi_admin.menu_builder.cart' => 'getElcodiAdmin_MenuBuilder_CartService',
            'elcodi_admin.menu_builder.core' => 'getElcodiAdmin_MenuBuilder_CoreService',
            'elcodi_admin.menu_builder.coupon' => 'getElcodiAdmin_MenuBuilder_CouponService',
            'elcodi_admin.menu_builder.currency' => 'getElcodiAdmin_MenuBuilder_CurrencyService',
            'elcodi_admin.menu_builder.language' => 'getElcodiAdmin_MenuBuilder_LanguageService',
            'elcodi_admin.menu_builder.orders_not_shipped' => 'getElcodiAdmin_MenuBuilder_OrdersNotShippedService',
            'elcodi_admin.menu_builder.payment' => 'getElcodiAdmin_MenuBuilder_PaymentService',
            'elcodi_admin.menu_builder.plugin_entries' => 'getElcodiAdmin_MenuBuilder_PluginEntriesService',
            'elcodi_admin.menu_builder.plugin_list' => 'getElcodiAdmin_MenuBuilder_PluginListService',
            'elcodi_admin.menu_builder.product' => 'getElcodiAdmin_MenuBuilder_ProductService',
            'elcodi_admin.menu_builder.shipping' => 'getElcodiAdmin_MenuBuilder_ShippingService',
            'elcodi_admin.menu_builder.store' => 'getElcodiAdmin_MenuBuilder_StoreService',
            'elcodi_admin.menu_builder.template' => 'getElcodiAdmin_MenuBuilder_TemplateService',
            'elcodi_admin.menu_builder.user' => 'getElcodiAdmin_MenuBuilder_UserService',
            'elcodi_admin.metric_intervals_resolver' => 'getElcodiAdmin_MetricIntervalsResolverService',
            'elcodi_admin.security.one_time_login_authenticator' => 'getElcodiAdmin_Security_OneTimeLoginAuthenticatorService',
            'elcodi_admin.twig_extension.metric_intervals' => 'getElcodiAdmin_TwigExtension_MetricIntervalsService',
            'elcodi_admin.validator.minimum_money' => 'getElcodiAdmin_Validator_MinimumMoneyService',
            'elcodi_bridge.payment_suite.event_listener.cart_paid' => 'getElcodiBridge_PaymentSuite_EventListener_CartPaidService',
            'elcodi_bridge.payment_suite.event_listener.order_to_paid' => 'getElcodiBridge_PaymentSuite_EventListener_OrderToPaidService',
            'elcodi_common.event_listener.firewall_store_area' => 'getElcodiCommon_EventListener_FirewallStoreAreaService',
            'elcodi_common.renderer.template_renderer' => 'getElcodiCommon_Renderer_TemplateRendererService',
            'elcodi_elcodi_store.event_listener.add_order_completed_metric' => 'getElcodiElcodiStore_EventListener_AddOrderCompletedMetricService',
            'elcodi_elcodi_store.event_listener.autologin_on_register' => 'getElcodiElcodiStore_EventListener_AutologinOnRegisterService',
            'elcodi_elcodi_store.event_listener.password_remember_credentials' => 'getElcodiElcodiStore_EventListener_PasswordRememberCredentialsService',
            'elcodi_elcodi_store.event_listener.send_customer_registration_email' => 'getElcodiElcodiStore_EventListener_SendCustomerRegistrationEmailService',
            'elcodi_elcodi_store.event_listener.send_order_confirmation_email' => 'getElcodiElcodiStore_EventListener_SendOrderConfirmationEmailService',
            'elcodi_elcodi_store.event_listener.send_order_shipped_email' => 'getElcodiElcodiStore_EventListener_SendOrderShippedEmailService',
            'elcodi_elcodi_store.event_listener.send_password_recover_email' => 'getElcodiElcodiStore_EventListener_SendPasswordRecoverEmailService',
            'elcodi_elcodi_store.event_listener.send_password_remember_email' => 'getElcodiElcodiStore_EventListener_SendPasswordRememberEmailService',
            'elcodi_elcodi_store.form_type.login' => 'getElcodiElcodiStore_FormType_LoginService',
            'elcodi_elcodi_store.form_type.password_recover' => 'getElcodiElcodiStore_FormType_PasswordRecoverService',
            'elcodi_elcodi_store.form_type.password_remember' => 'getElcodiElcodiStore_FormType_PasswordRememberService',
            'elcodi_elcodi_store.form_type.profile' => 'getElcodiElcodiStore_FormType_ProfileService',
            'elcodi_elcodi_store.form_type.register' => 'getElcodiElcodiStore_FormType_RegisterService',
            'elcodi_elcodi_store.twig_extension.store_page' => 'getElcodiElcodiStore_TwigExtension_StorePageService',
            'elcodi_plugin.bankwire' => 'getElcodiPlugin_BankwireService',
            'elcodi_plugin.bankwire.event_listener.payment_collect' => 'getElcodiPlugin_Bankwire_EventListener_PaymentCollectService',
            'elcodi_plugin.custom_shipping' => 'getElcodiPlugin_CustomShippingService',
            'elcodi_plugin.custom_shipping.event_listener.shipping_collect' => 'getElcodiPlugin_CustomShipping_EventListener_ShippingCollectService',
            'elcodi_plugin.custom_shipping.factory.carrier' => 'getElcodiPlugin_CustomShipping_Factory_CarrierService',
            'elcodi_plugin.custom_shipping.factory.shipping_range' => 'getElcodiPlugin_CustomShipping_Factory_ShippingRangeService',
            'elcodi_plugin.custom_shipping.form_type.carrier' => 'getElcodiPlugin_CustomShipping_FormType_CarrierService',
            'elcodi_plugin.custom_shipping.form_type.shipping_range' => 'getElcodiPlugin_CustomShipping_FormType_ShippingRangeService',
            'elcodi_plugin.custom_shipping.menu_builder' => 'getElcodiPlugin_CustomShipping_MenuBuilderService',
            'elcodi_plugin.custom_shipping.provider.shipping_ranges' => 'getElcodiPlugin_CustomShipping_Provider_ShippingRangesService',
            'elcodi_plugin.disqus' => 'getElcodiPlugin_DisqusService',
            'elcodi_plugin.disqus.renderer' => 'getElcodiPlugin_Disqus_RendererService',
            'elcodi_plugin.event_listener.facebook_username' => 'getElcodiPlugin_EventListener_FacebookUsernameService',
            'elcodi_plugin.event_listener.twitter_username' => 'getElcodiPlugin_EventListener_TwitterUsernameService',
            'elcodi_plugin.facebook' => 'getElcodiPlugin_FacebookService',
            'elcodi_plugin.facebook.follow_renderer' => 'getElcodiPlugin_Facebook_FollowRendererService',
            'elcodi_plugin.facebook.javascript_renderer' => 'getElcodiPlugin_Facebook_JavascriptRendererService',
            'elcodi_plugin.facebook.share_post_renderer' => 'getElcodiPlugin_Facebook_SharePostRendererService',
            'elcodi_plugin.free_payment' => 'getElcodiPlugin_FreePaymentService',
            'elcodi_plugin.free_payment.event_listener.payment_collect' => 'getElcodiPlugin_FreePayment_EventListener_PaymentCollectService',
            'elcodi_plugin.google_analytics.renderer' => 'getElcodiPlugin_GoogleAnalytics_RendererService',
            'elcodi_plugin.paypal.event_listener.payment_collect' => 'getElcodiPlugin_Paypal_EventListener_PaymentCollectService',
            'elcodi_plugin.paypal_web_checkout' => 'getElcodiPlugin_PaypalWebCheckoutService',
            'elcodi_plugin.paypal_web_checkout.business' => 'getElcodiPlugin_PaypalWebCheckout_BusinessService',
            'elcodi_plugin.pinterest' => 'getElcodiPlugin_PinterestService',
            'elcodi_plugin.pinterest.renderer' => 'getElcodiPlugin_Pinterest_RendererService',
            'elcodi_plugin.plugin.google_analytics' => 'getElcodiPlugin_Plugin_GoogleAnalyticsService',
            'elcodi_plugin.product_csv' => 'getElcodiPlugin_ProductCsvService',
            'elcodi_plugin.product_csv.csv_exporter' => 'getElcodiPlugin_ProductCsv_CsvExporterService',
            'elcodi_plugin.product_csv.csv_exporter_config' => 'getElcodiPlugin_ProductCsv_CsvExporterConfigService',
            'elcodi_plugin.product_csv.exporter' => 'getElcodiPlugin_ProductCsv_ExporterService',
            'elcodi_plugin.product_csv.renderer' => 'getElcodiPlugin_ProductCsv_RendererService',
            'elcodi_plugin.service.facebook_username_cleaner' => 'getElcodiPlugin_Service_FacebookUsernameCleanerService',
            'elcodi_plugin.service.twitter_username_cleaner' => 'getElcodiPlugin_Service_TwitterUsernameCleanerService',
            'elcodi_plugin.store_setup_wizard' => 'getElcodiPlugin_StoreSetupWizardService',
            'elcodi_plugin.store_setup_wizard.event_listener.dashboard_redirection' => 'getElcodiPlugin_StoreSetupWizard_EventListener_DashboardRedirectionService',
            'elcodi_plugin.store_setup_wizard.event_listener.disable_wizard' => 'getElcodiPlugin_StoreSetupWizard_EventListener_DisableWizardService',
            'elcodi_plugin.store_setup_wizard.renderer' => 'getElcodiPlugin_StoreSetupWizard_RendererService',
            'elcodi_plugin.store_setup_wizard.wizard_routes' => 'getElcodiPlugin_StoreSetupWizard_WizardRoutesService',
            'elcodi_plugin.store_setup_wizard.wizard_status' => 'getElcodiPlugin_StoreSetupWizard_WizardStatusService',
            'elcodi_plugin.stripe' => 'getElcodiPlugin_StripeService',
            'elcodi_plugin.stripe.event_listener.payment_collect' => 'getElcodiPlugin_Stripe_EventListener_PaymentCollectService',
            'elcodi_plugin.stripe.private_key' => 'getElcodiPlugin_Stripe_PrivateKeyService',
            'elcodi_plugin.stripe.public_key' => 'getElcodiPlugin_Stripe_PublicKeyService',
            'elcodi_plugin.twitter' => 'getElcodiPlugin_TwitterService',
            'elcodi_plugin.twitter.follow_renderer' => 'getElcodiPlugin_Twitter_FollowRendererService',
            'elcodi_plugin.twitter.javascript_renderer' => 'getElcodiPlugin_Twitter_JavascriptRendererService',
            'elcodi_plugin.twitter.share_tweet_renderer' => 'getElcodiPlugin_Twitter_ShareTweetRendererService',
            'elcodi_store.director.authorization' => 'getElcodiStore_Director_AuthorizationService',
            'elcodi_store.event_listener.categories_order_change' => 'getElcodiStore_EventListener_CategoriesOrderChangeService',
            'elcodi_store.event_listener.just_one_manual' => 'getElcodiStore_EventListener_JustOneManualService',
            'elcodi_store.event_listener.shipping_appliance' => 'getElcodiStore_EventListener_ShippingApplianceService',
            'elcodi_store.event_listener.store_disabled' => 'getElcodiStore_EventListener_StoreDisabledService',
            'elcodi_store.factory.authorization' => 'getElcodiStore_Factory_AuthorizationService',
            'elcodi_store.form.location_selector_builder' => 'getElcodiStore_Form_LocationSelectorBuilderService',
            'elcodi_store.form_type.address' => 'getElcodiStore_FormType_AddressService',
            'elcodi_store.form_type.cart' => 'getElcodiStore_FormType_CartService',
            'elcodi_store.form_type.cart_line' => 'getElcodiStore_FormType_CartLineService',
            'elcodi_store.form_type.coupon_apply' => 'getElcodiStore_FormType_CouponApplyService',
            'elcodi_store.provider.oauth' => 'getElcodiStore_Provider_OauthService',
            'elcodi_store.sitemap_transformer.category' => 'getElcodiStore_SitemapTransformer_CategoryService',
            'elcodi_store.sitemap_transformer.product' => 'getElcodiStore_SitemapTransformer_ProductService',
            'elcodi_store.store_category_tree' => 'getElcodiStore_StoreCategoryTreeService',
            'elcodi_store.template_locator.core' => 'getElcodiStore_TemplateLocator_CoreService',
            'elcodi_store.template_locator.page' => 'getElcodiStore_TemplateLocator_PageService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.csrf_provider' => 'getForm_CsrfProviderService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.exception_format_negotiator' => 'getFosRest_ExceptionFormatNegotiatorService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector.doctrine' => 'getFosRest_Inflector_DoctrineService',
            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',
            'fos_rest.normalizer.camel_keys_with_leading_underscore' => 'getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.routing.loader.controller' => 'getFosRest_Routing_Loader_ControllerService',
            'fos_rest.routing.loader.processor' => 'getFosRest_Routing_Loader_ProcessorService',
            'fos_rest.routing.loader.reader.action' => 'getFosRest_Routing_Loader_Reader_ActionService',
            'fos_rest.routing.loader.reader.controller' => 'getFosRest_Routing_Loader_Reader_ControllerService',
            'fos_rest.routing.loader.xml_collection' => 'getFosRest_Routing_Loader_XmlCollectionService',
            'fos_rest.routing.loader.yaml_collection' => 'getFosRest_Routing_Loader_YamlCollectionService',
            'fos_rest.serializer' => 'getFosRest_SerializerService',
            'fos_rest.serializer.exception_wrapper_normalizer' => 'getFosRest_Serializer_ExceptionWrapperNormalizerService',
            'fos_rest.serializer.exception_wrapper_serialize_handler' => 'getFosRest_Serializer_ExceptionWrapperSerializeHandlerService',
            'fos_rest.view.exception_wrapper_handler' => 'getFosRest_View_ExceptionWrapperHandlerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fos_rest.violation_formatter' => 'getFosRest_ViolationFormatterService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'fragment.renderer.ssi' => 'getFragment_Renderer_SsiService',
            'gaufrette.local_filesystem' => 'getGaufrette_LocalFilesystemService',
            'gravatar.api' => 'getGravatar_ApiService',
            'http_kernel' => 'getHttpKernelService',
            'hwi_oauth.http_client' => 'getHwiOauth_HttpClientService',
            'hwi_oauth.resource_owner.github' => 'getHwiOauth_ResourceOwner_GithubService',
            'hwi_oauth.resource_owner.paypal' => 'getHwiOauth_ResourceOwner_PaypalService',
            'hwi_oauth.resource_ownermap.store_area' => 'getHwiOauth_ResourceOwnermap_StoreAreaService',
            'hwi_oauth.security.oauth_utils' => 'getHwiOauth_Security_OauthUtilsService',
            'hwi_oauth.storage.session' => 'getHwiOauth_Storage_SessionService',
            'hwi_oauth.templating.helper.oauth' => 'getHwiOauth_Templating_Helper_OauthService',
            'hwi_oauth.user_checker' => 'getHwiOauth_UserCheckerService',
            'jms_i18n_routing.cookie_setting_listener' => 'getJmsI18nRouting_CookieSettingListenerService',
            'jms_i18n_routing.loader' => 'getJmsI18nRouting_LoaderService',
            'jms_i18n_routing.pattern_generation_strategy.default' => 'getJmsI18nRouting_PatternGenerationStrategy_DefaultService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'kernel' => 'getKernelService',
            'knp_gaufrette.filesystem_map' => 'getKnpGaufrette_FilesystemMapService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'mmoreram.controllerextra.collector.paginator_evaluator_collector' => 'getMmoreram_Controllerextra_Collector_PaginatorEvaluatorCollectorService',
            'mmoreram.controllerextra.evaluator.paginator_innerjoins_evaluator' => 'getMmoreram_Controllerextra_Evaluator_PaginatorInnerjoinsEvaluatorService',
            'mmoreram.controllerextra.evaluator.paginator_leftjoins_evaluator' => 'getMmoreram_Controllerextra_Evaluator_PaginatorLeftjoinsEvaluatorService',
            'mmoreram.controllerextra.evaluator.paginator_notnulls_evaluator' => 'getMmoreram_Controllerextra_Evaluator_PaginatorNotnullsEvaluatorService',
            'mmoreram.controllerextra.evaluator.paginator_orderby_evaluator' => 'getMmoreram_Controllerextra_Evaluator_PaginatorOrderbyEvaluatorService',
            'mmoreram.controllerextra.evaluator.paginator_wheres_evaluator' => 'getMmoreram_Controllerextra_Evaluator_PaginatorWheresEvaluatorService',
            'mmoreram.controllerextra.event_listeners.resolver_event_listener' => 'getMmoreram_Controllerextra_EventListeners_ResolverEventListenerService',
            'mmoreram.controllerextra.provider.entity_provider' => 'getMmoreram_Controllerextra_Provider_EntityProviderService',
            'mmoreram.controllerextra.provider.request_parameter_provider' => 'getMmoreram_Controllerextra_Provider_RequestParameterProviderService',
            'mmoreram.controllerextra.resolver.entity_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_EntityAnnotationResolverService',
            'mmoreram.controllerextra.resolver.flush_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_FlushAnnotationResolverService',
            'mmoreram.controllerextra.resolver.form_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_FormAnnotationResolverService',
            'mmoreram.controllerextra.resolver.get_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_GetAnnotationResolverService',
            'mmoreram.controllerextra.resolver.json_resolver_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_JsonResolverAnnotationResolverService',
            'mmoreram.controllerextra.resolver.log_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_LogAnnotationResolverService',
            'mmoreram.controllerextra.resolver.object_manager_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_ObjectManagerAnnotationResolverService',
            'mmoreram.controllerextra.resolver.paginator_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_PaginatorAnnotationResolverService',
            'mmoreram.controllerextra.resolver.post_annotation_resolver' => 'getMmoreram_Controllerextra_Resolver_PostAnnotationResolverService',
            'mmoreram.headers.listener' => 'getMmoreram_Headers_ListenerService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.debug' => 'getMonolog_Handler_DebugService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.logger.assetic' => 'getMonolog_Logger_AsseticService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.paymentsuite' => 'getMonolog_Logger_PaymentsuiteService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.router' => 'getMonolog_Logger_RouterService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.snc_redis' => 'getMonolog_Logger_SncRedisService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'paymentsuite.bankwire.manager' => 'getPaymentsuite_Bankwire_ManagerService',
            'paymentsuite.bankwire.method_factory' => 'getPaymentsuite_Bankwire_MethodFactoryService',
            'paymentsuite.bankwire.payment_controller' => 'getPaymentsuite_Bankwire_PaymentControllerService',
            'paymentsuite.bankwire.route_success' => 'getPaymentsuite_Bankwire_RouteSuccessService',
            'paymentsuite.bankwire.routes' => 'getPaymentsuite_Bankwire_RoutesService',
            'paymentsuite.bridge' => 'getPaymentsuite_BridgeService',
            'paymentsuite.event_dispatcher' => 'getPaymentsuite_EventDispatcherService',
            'paymentsuite.freepayment.manager' => 'getPaymentsuite_Freepayment_ManagerService',
            'paymentsuite.freepayment.method_factory' => 'getPaymentsuite_Freepayment_MethodFactoryService',
            'paymentsuite.freepayment.payment_controller' => 'getPaymentsuite_Freepayment_PaymentControllerService',
            'paymentsuite.freepayment.route_success' => 'getPaymentsuite_Freepayment_RouteSuccessService',
            'paymentsuite.freepayment.routes' => 'getPaymentsuite_Freepayment_RoutesService',
            'paymentsuite.logger' => 'getPaymentsuite_LoggerService',
            'paymentsuite.paypal_web_checkout.form_type_builder' => 'getPaymentsuite_PaypalWebCheckout_FormTypeBuilderService',
            'paymentsuite.paypal_web_checkout.form_type_factory' => 'getPaymentsuite_PaypalWebCheckout_FormTypeFactoryService',
            'paymentsuite.paypal_web_checkout.manager' => 'getPaymentsuite_PaypalWebCheckout_ManagerService',
            'paymentsuite.paypal_web_checkout.method_factory' => 'getPaymentsuite_PaypalWebCheckout_MethodFactoryService',
            'paymentsuite.paypal_web_checkout.payment_controller' => 'getPaymentsuite_PaypalWebCheckout_PaymentControllerService',
            'paymentsuite.paypal_web_checkout.process_controller' => 'getPaymentsuite_PaypalWebCheckout_ProcessControllerService',
            'paymentsuite.paypal_web_checkout.route_cancel' => 'getPaymentsuite_PaypalWebCheckout_RouteCancelService',
            'paymentsuite.paypal_web_checkout.route_success' => 'getPaymentsuite_PaypalWebCheckout_RouteSuccessService',
            'paymentsuite.paypal_web_checkout.routes' => 'getPaymentsuite_PaypalWebCheckout_RoutesService',
            'paymentsuite.paypal_web_checkout.url_factory' => 'getPaymentsuite_PaypalWebCheckout_UrlFactoryService',
            'paymentsuite.stripe.form_type' => 'getPaymentsuite_Stripe_FormTypeService',
            'paymentsuite.stripe.manager' => 'getPaymentsuite_Stripe_ManagerService',
            'paymentsuite.stripe.method_factory' => 'getPaymentsuite_Stripe_MethodFactoryService',
            'paymentsuite.stripe.payment_controller' => 'getPaymentsuite_Stripe_PaymentControllerService',
            'paymentsuite.stripe.route_failure' => 'getPaymentsuite_Stripe_RouteFailureService',
            'paymentsuite.stripe.route_success' => 'getPaymentsuite_Stripe_RouteSuccessService',
            'paymentsuite.stripe.routes' => 'getPaymentsuite_Stripe_RoutesService',
            'paymentsuite.stripe.template_render' => 'getPaymentsuite_Stripe_TemplateRenderService',
            'paymentsuite.stripe.transaction_factory' => 'getPaymentsuite_Stripe_TransactionFactoryService',
            'paymentsuite.stripe.twig_extension' => 'getPaymentsuite_Stripe_TwigExtensionService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request' => 'getRequestService',
            'request_stack' => 'getRequestStackService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.session_strategy' => 'getSecurity_Authentication_SessionStrategyService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context' => 'getSecurity_ContextService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map.context.admin_area' => 'getSecurity_Firewall_Map_Context_AdminAreaService',
            'security.firewall.map.context.api_area' => 'getSecurity_Firewall_Map_Context_ApiAreaService',
            'security.firewall.map.context.dev_area' => 'getSecurity_Firewall_Map_Context_DevAreaService',
            'security.firewall.map.context.public_area' => 'getSecurity_Firewall_Map_Context_PublicAreaService',
            'security.firewall.map.context.store_area' => 'getSecurity_Firewall_Map_Context_StoreAreaService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.secure_random' => 'getSecurity_SecureRandomService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.user.provider.concrete.adminuser' => 'getSecurity_User_Provider_Concrete_AdminuserService',
            'security.user.provider.concrete.customer' => 'getSecurity_User_Provider_Concrete_CustomerService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_distribution.webconfigurator' => 'getSensioDistribution_WebconfiguratorService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_container' => 'getServiceContainerService',
            'session' => 'getSessionService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'simple_doctrine_mapping.locator_configurator' => 'getSimpleDoctrineMapping_LocatorConfiguratorService',
            'snc_redis.logger' => 'getSncRedis_LoggerService',
            'snc_redis.metric' => 'getSncRedis_MetricService',
            'store.connect.object_manager.authorization' => 'getStore_Connect_ObjectManager_AuthorizationService',
            'store.connect.repository.authorization' => 'getStore_Connect_Repository_AuthorizationService',
            'store.fixtures_booster.command.load_fixtures' => 'getStore_FixturesBooster_Command_LoadFixturesService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.assets' => 'getTemplating_Helper_AssetsService',
            'templating.helper.gravatar' => 'getTemplating_Helper_GravatarService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.router' => 'getTemplating_Helper_RouterService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator' => 'getTranslatorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.gravatar' => 'getTwig_Extension_GravatarService',
            'twig.extension.text' => 'getTwig_Extension_TextService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.stringloader' => 'getTwig_StringloaderService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'visithor.client' => 'getVisithor_ClientService',
            'visithor.command.go' => 'getVisithor_Command_GoService',
            'visithor.executor' => 'getVisithor_ExecutorService',
            'visithor.factory.url' => 'getVisithor_Factory_UrlService',
            'visithor.factory.url_chain' => 'getVisithor_Factory_UrlChainService',
            'visithor.renderer_factory' => 'getVisithor_RendererFactoryService',
            'visithor.url_generator' => 'getVisithor_UrlGeneratorService',
            'visitor.environment_builder' => 'getVisitor_EnvironmentBuilderService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
        );
        $this->aliases = array(
            'console.command.elcodi_bundle_fixturesboosterbundle_command_loaddatafixturesdoctrinecommand' => 'store.fixtures_booster.command.load_fixtures',
            'console.command.elcodi_common_commonbundle_command_elcodiinstallcommand' => 'elcodi.command.elcodi_install',
            'console.command.elcodi_component_currency_command_currencyexchangeratespopulatecommand' => 'elcodi.command.populate_currency_rates',
            'console.command.elcodi_component_geo_command_locationdropcommand' => 'elcodi.command.location_drop',
            'console.command.elcodi_component_geo_command_locationloadcommand' => 'elcodi.command.location_load',
            'console.command.elcodi_component_geo_command_locationpopulatecommand' => 'elcodi.command.location_populate',
            'console.command.elcodi_component_metric_core_command_metricsloadcommand' => 'elcodi.command.metrics_load',
            'console.command.elcodi_component_plugin_command_plugindisablecommand' => 'elcodi.command.plugin_disable',
            'console.command.elcodi_component_plugin_command_pluginenablecommand' => 'elcodi.command.plugin_enable',
            'console.command.elcodi_component_plugin_command_pluginslistcommand' => 'elcodi.command.plugins_list',
            'console.command.elcodi_component_plugin_command_pluginsloadcommand' => 'elcodi.command.plugins_load',
            'console.command.elcodi_component_sitemap_command_sitemapdumpcommand' => 'elcodi.command.sitemap_dump',
            'console.command.elcodi_component_sitemap_command_sitemapprofilecommand' => 'elcodi.command.sitemap_profile',
            'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
            'console.command.visithor_bundle_command_gocommand' => 'visithor.command.go',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'elcodi.adapter.currency_exchange_rate' => 'elcodi.currency_exchange_rate_adapter.yahoo_finances',
            'elcodi.entity_translation_provider' => 'elcodi.services.cached_entity_translation_provider',
            'elcodi.entity_translator_form_event_listener' => 'elcodi.event_listener.entity_translator_form',
            'elcodi.location_loader_adapter' => 'elcodi.location_loader_adapter.github',
            'elcodi.location_populator_adapter' => 'elcodi.location_populator_adapter.geonames',
            'elcodi.location_provider' => 'elcodi.location_provider_adapter.service',
            'elcodi.media_filesystem' => 'gaufrette.local_filesystem',
            'elcodi.media_resize_adapter' => 'elcodi.media_resize_adapter.gd',
            'elcodi.metrics_bucket' => 'elcodi.redis_metrics_bucket',
            'elcodi.related_purchasables_provider' => 'elcodi.related_purchasables_provider.same_category',
            'event_dispatcher' => 'debug.event_dispatcher',
            'fos_rest.exception_handler' => 'fos_rest.view.exception_wrapper_handler',
            'fos_rest.inflector' => 'fos_rest.inflector.doctrine',
            'fos_rest.router' => 'router',
            'fos_rest.templating' => 'templating',
            'hwi_oauth.user.provider.entity.store_area' => 'elcodi_store.provider.oauth',
            'mailer' => 'swiftmailer.mailer.default',
            'sensio.distribution.webconfigurator' => 'sensio_distribution.webconfigurator',
            'serializer' => 'jms_serializer',
            'session.storage' => 'session.storage.native',
            'snc_redis.metric_client' => 'snc_redis.metric',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped frozen container.');
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance.
     */
    protected function getAnnotationReaderService()
    {
        return $this->services['annotation_reader'] = new \Doctrine\Common\Annotations\FileCacheReader(new \Doctrine\Common\Annotations\AnnotationReader(), (__DIR__.'/annotations'), true);
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = $this->get('templating.loader');

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager($this->get('assetic.asset_factory'), array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader($this->get('twig'), $this->get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminCoreBundle', ($this->targetDirs[2].'/Resources/AdminCoreBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminCoreBundle', ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StoreCoreBundle', ($this->targetDirs[2].'/Resources/StoreCoreBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StoreCoreBundle', ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StoreTemplateBundle', ($this->targetDirs[2].'/Resources/StoreTemplateBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'StoreTemplateBundle', ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminGeoBundle', ($this->targetDirs[2].'/Resources/AdminGeoBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminGeoBundle', ($this->targetDirs[3].'/src/Elcodi/Admin/GeoBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminStoreBundle', ($this->targetDirs[2].'/Resources/AdminStoreBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'AdminStoreBundle', ($this->targetDirs[3].'/src/Elcodi/Admin/StoreBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this->targetDirs[2].'/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    protected function getAssetic_Filter_CssrewriteService()
    {
        return $this->services['assetic.filter.cssrewrite'] = new \Assetic\Filter\CssRewriteFilter();
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array('cssrewrite' => 'assetic.filter.cssrewrite'));
    }

    /**
     * Gets the 'assets.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext A Symfony\Component\Asset\Context\RequestStackContext instance.
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext($this->get('request_stack'));
    }

    /**
     * Gets the 'assets.packages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Asset\Packages A Symfony\Component\Asset\Packages instance.
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), $this->get('assets.context')), array());
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array());
    }

    /**
     * Gets the 'cache_flusher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\CacheFlushBundle\Services\CacheFlusher A Mmoreram\CacheFlushBundle\Services\CacheFlusher instance.
     */
    protected function getCacheFlusherService()
    {
        return $this->services['cache_flusher'] = new \Mmoreram\CacheFlushBundle\Services\CacheFlusher($this->get('cache_flusher.event_dispatcher'), __DIR__);
    }

    /**
     * Gets the 'cache_flusher.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\CacheFlushBundle\EventDispatcher\CacheFlusherEventDispatcher A Mmoreram\CacheFlushBundle\EventDispatcher\CacheFlusherEventDispatcher instance.
     */
    protected function getCacheFlusher_EventDispatcherService()
    {
        return $this->services['cache_flusher.event_dispatcher'] = new \Mmoreram\CacheFlushBundle\EventDispatcher\CacheFlusherEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    protected function getCacheWarmerService()
    {
        $a = $this->get('kernel');
        $b = $this->get('templating.filename_parser');

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[2].'/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, $this->get('templating.locator')), 1 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer($this->get('translator.default')), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer($this->get('router')), 4 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer($this, $c), 5 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer($this->get('doctrine'))));
    }

    /**
     * Gets the 'data_collector.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector A Symfony\Component\Form\Extension\DataCollector\FormDataCollector instance.
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector($this->get('data_collector.form.extractor'));
    }

    /**
     * Gets the 'data_collector.form.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor A Symfony\Component\Form\Extension\DataCollector\FormDataExtractor instance.
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the 'data_collector.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector A Symfony\Component\Translation\DataCollector\TranslationDataCollector instance.
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector($this->get('translator'));
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, $this->get('controller_name_converter'), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)), $this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance.
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE), NULL, NULL, true, NULL);
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), $this->get('debug.stopwatch'), $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.load_cart_prices', 1 => 'loadCartPurchasablesAmount'), 16);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.load_cart_prices', 1 => 'loadCartTotalAmount'), 2);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.save_cart', 1 => 'saveCart'), 0);
        $instance->addListenerService('cart.preload', array(0 => 'elcodi.event_listener.validate_cart_integrity', 1 => 'validateCartIntegrity'), 24);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.validate_cart_amount', 1 => 'validateAmount'), 1);
        $instance->addListenerService('order_line.oncreated', array(0 => 'elcodi.event_listener.update_stock_by_cart_line', 1 => 'updatePurchasableStockByCartLine'), 0);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.validate_empty_shipping_amount', 1 => 'validateEmptyShippingAmount'), 4);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.save_cart_to_session', 1 => 'saveCartInSession'), -2);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi.event_listener.order_creation', 1 => 'saveOrder'), 0);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi.event_listener.order_creation', 1 => 'setCartAsOrdered'), -16);
        $instance->addListenerService('address.onclone', array(0 => 'elcodi.event_listener.address_clone', 1 => 'updateCarts'), 0);
        $instance->addListenerService('coupon.onused', array(0 => 'elcodi.event_listener.make_coupon_used', 1 => 'makeUse'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'elcodi.event_listener.referrer_session', 1 => 'updateSessionReferrer'), 0);
        $instance->addListenerService('security.authentication.success', array(0 => 'elcodi.event_listener.update_cart_with_user', 1 => 'onAuthenticationSuccess'), 0);
        $instance->addListenerService('security.interactive_login', array(0 => 'elcodi.event_listener.update_last_login', 1 => 'updateLastLogin'), 0);
        $instance->addListenerService('payment.order.load', array(0 => 'elcodi_bridge.payment_suite.event_listener.cart_paid', 1 => 'transformCartToOrder'), 0);
        $instance->addListenerService('payment.order.success', array(0 => 'elcodi_bridge.payment_suite.event_listener.order_to_paid', 1 => 'setOrderToPaid'), 0);
        $instance->addListenerService('translator.warmup', array(0 => 'elcodi.services.cached_entity_translation_provider', 1 => 'warmUp'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'elcodi.event_listener.entity_translator_form', 1 => 'saveEntityTranslations'), 0);
        $instance->addListenerService('kernel.controller', array(0 => 'data_collector.router', 1 => 'onKernelController'), 0);
        $instance->addListenerService('kernel.response', array(0 => 'jms_i18n_routing.cookie_setting_listener', 1 => 'onKernelResponse'), 256);
        $instance->addListenerService('kernel.controller', array(0 => 'mmoreram.controllerextra.event_listeners.resolver_event_listener', 1 => 'onKernelController'), -8);
        $instance->addListenerService('kernel.response', array(0 => 'mmoreram.controllerextra.resolver.flush_annotation_resolver', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('kernel.view', array(0 => 'mmoreram.controllerextra.resolver.json_resolver_annotation_resolver', 1 => 'onKernelView'), -128);
        $instance->addListenerService('kernel.exception', array(0 => 'mmoreram.controllerextra.resolver.json_resolver_annotation_resolver', 1 => 'onKernelException'), -128);
        $instance->addListenerService('kernel.response', array(0 => 'mmoreram.headers.listener', 1 => 'onKernelResponse'), 0);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi.event_listener.covert_cart_coupons_to_order_coupons', 1 => 'createOrderCouponsByCartCoupons'), -16);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi.event_listener.create_and_save_cart_coupon', 1 => 'createAndSaveCartCoupon'), 1);
        $instance->addListenerService('order_coupon.onapply', array(0 => 'elcodi.event_listener.create_order_coupon_by_coupon', 1 => 'createOrderCouponByCoupon'), 0);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.load_cart_coupon_amount', 1 => 'refreshCouponAmount'), 6);
        $instance->addListenerService('cart_coupon.onremove', array(0 => 'elcodi.event_listener.remove_cart_coupon', 1 => 'removeCartCoupon'), 0);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.try_automatic_coupons_application', 1 => 'tryAutomaticCoupons'), 16);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi.event_listener.validate_cart_coupon', 1 => 'validateCoupon'), 16);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi.event_listener.validate_coupon_duplication', 1 => 'validateDuplicatedCoupon'), 16);
        $instance->addListenerService('cart_coupon.oncheck', array(0 => 'elcodi.event_listener.validate_coupon', 1 => 'validateCoupon'), 32);
        $instance->addListenerService('cart_coupon.oncheck', array(0 => 'elcodi.event_listener.validate_coupon_minimum_price', 1 => 'validateCartCouponMinimumPrice'), 0);
        $instance->addListenerService('cart_coupon.oncheck', array(0 => 'elcodi.event_listener.validate_coupon_rules', 1 => 'validateCartCouponRules'), -16);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.validate_coupons_from_cart', 1 => 'refreshCartCoupons'), 10);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi.event_listener.validate_stackable_coupon', 1 => 'validateStackableCoupon'), 16);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi.event_listener.update_cart_after_coupon_change', 1 => 'updateCart'), 0);
        $instance->addListenerService('cart_coupon.onremove', array(0 => 'elcodi.event_listener.update_cart_after_coupon_change', 1 => 'updateCart'), 0);
        $instance->addListenerService('newsletter.onsubscribe', array(0 => 'elcodi.event_listener.newsletter', 1 => 'onNewsletterSubscribeFlush'), 0);
        $instance->addListenerService('newsletter.onunsubscribe', array(0 => 'elcodi.event_listener.newsletter', 1 => 'onNewsletterUnsubscribeFlush'), 0);
        $instance->addListenerService('comment.onadd', array(0 => 'elcodi.event_listener.comment_cache_invalidation', 1 => 'onCommentChange'), 0);
        $instance->addListenerService('comment.onedit', array(0 => 'elcodi.event_listener.comment_cache_invalidation', 1 => 'onCommentChange'), 0);
        $instance->addListenerService('comment.onremove', array(0 => 'elcodi.event_listener.comment_cache_invalidation', 1 => 'onCommentChange'), 0);
        $instance->addListenerService('comment.onvoted', array(0 => 'elcodi.event_listener.comment_cache_invalidation', 1 => 'onCommentChange'), 0);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi.event_listener.load_cart_shipping_amount', 1 => 'loadCartShippingAmount'), 6);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi.event_listener.load_order_shipping_method', 1 => 'loadOrderShippingMethod'), 16);
        $instance->addListenerService('categories.onchange', array(0 => 'elcodi_store.event_listener.categories_order_change', 1 => 'onChange'), 0);
        $instance->addListenerService('password.recover', array(0 => 'elcodi_elcodi_store.event_listener.password_remember_credentials', 1 => 'giveCredentialsWithNewPassword'), 0);
        $instance->addListenerService('customer.register', array(0 => 'elcodi_elcodi_store.event_listener.send_customer_registration_email', 1 => 'sendCustomerRegistrationEmail'), 0);
        $instance->addListenerService('password.remember', array(0 => 'elcodi_elcodi_store.event_listener.send_password_remember_email', 1 => 'sendPasswordRememberEmail'), 0);
        $instance->addListenerService('password.recover', array(0 => 'elcodi_elcodi_store.event_listener.send_password_recover_email', 1 => 'sendPasswordRecoverEmail'), 0);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi_store.event_listener.shipping_appliance', 1 => 'removeInvalidShippingMethod'), 8);
        $instance->addListenerService('cart.onload', array(0 => 'elcodi_store.event_listener.shipping_appliance', 1 => 'loadCheapestShippingMethod'), 7);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi_elcodi_store.event_listener.send_order_confirmation_email', 1 => 'sendOrderConfirmationEmail'), 0);
        $instance->addListenerService('state_machine.order_shipping_states_machine.transition_ship', array(0 => 'elcodi_elcodi_store.event_listener.send_order_shipped_email', 1 => 'sendOrderShippedEmail'), 0);
        $instance->addListenerService('cart_coupon.onapply', array(0 => 'elcodi_store.event_listener.just_one_manual', 1 => 'assertJustOneManualCoupon'), 16);
        $instance->addListenerService('order.oncreated', array(0 => 'elcodi_elcodi_store.event_listener.add_order_completed_metric', 1 => 'addMetric'), 0);
        $instance->addListenerService('store.head_bottom', array(0 => 'elcodi_plugin.google_analytics.renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('store.head_bottom', array(0 => 'elcodi_plugin.pinterest.renderer', 1 => 'renderAsynchronousJavascript'), 0);
        $instance->addListenerService('store.body_bottom', array(0 => 'elcodi_plugin.pinterest.renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('store.product_pin_top', array(0 => 'elcodi_plugin.pinterest.renderer', 1 => 'renderPin'), 0);
        $instance->addListenerService('admin.header_actions', array(0 => 'elcodi_plugin.product_csv.renderer', 1 => 'renderButtons'), 0);
        $instance->addListenerService('admin.body_top', array(0 => 'elcodi_plugin.store_setup_wizard.renderer', 1 => 'renderMiniWizard'), 0);
        $instance->addListenerService('admin.body_top', array(0 => 'elcodi_plugin.store_setup_wizard.renderer', 1 => 'renderEnableStoreMessage'), 0);
        $instance->addListenerService('admin.body_top', array(0 => 'elcodi_plugin.store_setup_wizard.renderer', 1 => 'renderGoNextStepMessage'), 0);
        $instance->addListenerService('admin.body_top', array(0 => 'elcodi_plugin.store_setup_wizard.renderer', 1 => 'renderDisableUnderConstructionMode'), 0);
        $instance->addListenerService('store.head_bottom', array(0 => 'elcodi_plugin.disqus.renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('store.blog_post_view_bottom', array(0 => 'elcodi_plugin.disqus.renderer', 1 => 'renderDisqusBlogPostBlock'), 0);
        $instance->addListenerService('store.product_view_bottom', array(0 => 'elcodi_plugin.disqus.renderer', 1 => 'renderDisqusProductBlock'), 0);
        $instance->addListenerService('store.body_bottom', array(0 => 'elcodi_plugin.twitter.javascript_renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('admin.footer_script', array(0 => 'elcodi_plugin.twitter.javascript_renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('store.product_pin_top', array(0 => 'elcodi_plugin.twitter.share_tweet_renderer', 1 => 'renderShareProduct'), 0);
        $instance->addListenerService('store.order_thanks', array(0 => 'elcodi_plugin.twitter.share_tweet_renderer', 1 => 'renderShareOrder'), 0);
        $instance->addListenerService('store.footer_social', array(0 => 'elcodi_plugin.twitter.follow_renderer', 1 => 'renderFollowButton'), 0);
        $instance->addListenerService('store.body_bottom', array(0 => 'elcodi_plugin.facebook.javascript_renderer', 1 => 'renderJavascript'), 0);
        $instance->addListenerService('store.product_pin_top', array(0 => 'elcodi_plugin.facebook.share_post_renderer', 1 => 'renderShareProduct'), 0);
        $instance->addListenerService('store.order_thanks', array(0 => 'elcodi_plugin.facebook.share_post_renderer', 1 => 'renderShareOrder'), 0);
        $instance->addListenerService('store.footer_social', array(0 => 'elcodi_plugin.facebook.follow_renderer', 1 => 'renderFollowButton'), 0);
        $instance->addListenerService('payment.collect', array(0 => 'elcodi_plugin.paypal.event_listener.payment_collect', 1 => 'addPaypalPaymentMethod'), 0);
        $instance->addListenerService('payment.collect', array(0 => 'elcodi_plugin.free_payment.event_listener.payment_collect', 1 => 'addFreePaymentPaymentMethod'), 0);
        $instance->addListenerService('payment.collect', array(0 => 'elcodi_plugin.stripe.event_listener.payment_collect', 1 => 'addStripePaymentMethod'), 0);
        $instance->addListenerService('shipping.collect', array(0 => 'elcodi_plugin.custom_shipping.event_listener.shipping_collect', 1 => 'addCustomShippingMethods'), 0);
        $instance->addListenerService('payment.collect', array(0 => 'elcodi_plugin.bankwire.event_listener.payment_collect', 1 => 'addFreePaymentPaymentMethod'), 0);
        $instance->addListenerService('kernel.request', array(0 => 'fos_rest.body_listener', 1 => 'onKernelRequest'), 10);
        $instance->addSubscriberService('response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener');
        $instance->addSubscriberService('streamed_response_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener');
        $instance->addSubscriberService('locale_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener');
        $instance->addSubscriberService('translator_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\TranslatorListener');
        $instance->addSubscriberService('session_listener', 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener');
        $instance->addSubscriberService('session.save_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener');
        $instance->addSubscriberService('fragment.listener', 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener');
        $instance->addSubscriberService('profiler_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener');
        $instance->addSubscriberService('data_collector.request', 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector');
        $instance->addSubscriberService('router_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener');
        $instance->addSubscriberService('debug.debug_handlers_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener');
        $instance->addSubscriberService('security.firewall', 'Symfony\\Component\\Security\\Http\\Firewall');
        $instance->addSubscriberService('security.rememberme.response_listener', 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener');
        $instance->addSubscriberService('twig.exception_listener', 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener');
        $instance->addSubscriberService('monolog.handler.console', 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler');
        $instance->addSubscriberService('swiftmailer.email_sender.listener', 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener');
        $instance->addSubscriberService('sensio_framework_extra.controller.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener');
        $instance->addSubscriberService('sensio_framework_extra.view.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener');
        $instance->addSubscriberService('sensio_framework_extra.cache.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\HttpCacheListener');
        $instance->addSubscriberService('sensio_framework_extra.security.listener', 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\SecurityListener');
        $instance->addSubscriberService('web_profiler.debug_toolbar', 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener');

        return $instance;
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array());
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger($this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $a->addLogger($this->get('doctrine.dbal.logger.profiling.default'));

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();
        $c->addResolveTargetEntity('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface', 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier', array());
        $c->addResolveTargetEntity('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\ShippingRangeInterface', 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange', array());
        $c->addResolveTargetEntity('Elcodi\\Store\\ConnectBundle\\Entity\\AuthorizationInterface', 'Elcodi\\Store\\ConnectBundle\\Entity\\Authorization', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Comment\\Entity\\Interfaces\\CommentInterface', 'Elcodi\\Component\\Comment\\Entity\\Comment', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Comment\\Entity\\Interfaces\\VoteInterface', 'Elcodi\\Component\\Comment\\Entity\\Vote', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Metric\\Core\\Entity\\Interfaces\\EntryInterface', 'Elcodi\\Component\\Metric\\Core\\Entity\\Entry', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface', 'Elcodi\\Component\\Page\\Entity\\Page', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Newsletter\\Entity\\Interfaces\\NewsletterSubscriptionInterface', 'Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerInterface', 'Elcodi\\Component\\Banner\\Entity\\Banner', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerZoneInterface', 'Elcodi\\Component\\Banner\\Entity\\BannerZone', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\CartCouponInterface', 'Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\OrderCouponInterface', 'Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\NodeInterface', 'Elcodi\\Component\\Menu\\Entity\\Menu\\Node', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\MenuInterface', 'Elcodi\\Component\\Menu\\Entity\\Menu\\Menu', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\EntityTranslator\\Entity\\Interfaces\\EntityTranslationInterface', 'Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Tax\\Entity\\Interfaces\\TaxInterface', 'Elcodi\\Component\\Tax\\Entity\\Tax', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Zone\\Entity\\Interfaces\\ZoneInterface', 'Elcodi\\Component\\Zone\\Entity\\Zone', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\StateTransitionMachine\\Entity\\Interfaces\\StateLineInterface', 'Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface', 'Elcodi\\Component\\Product\\Entity\\Purchasable', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\ProductInterface', 'Elcodi\\Component\\Product\\Entity\\Product', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\VariantInterface', 'Elcodi\\Component\\Product\\Entity\\Variant', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\PackInterface', 'Elcodi\\Component\\Product\\Entity\\Pack', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface', 'Elcodi\\Component\\Product\\Entity\\Manufacturer', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface', 'Elcodi\\Component\\Product\\Entity\\Category', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\User\\Entity\\Interfaces\\CustomerInterface', 'Elcodi\\Component\\User\\Entity\\Customer', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\User\\Entity\\Interfaces\\AdminUserInterface', 'Elcodi\\Component\\User\\Entity\\AdminUser', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Store\\Entity\\Interfaces\\StoreInterface', 'Elcodi\\Component\\Store\\Entity\\Store', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Attribute\\Entity\\Interfaces\\AttributeInterface', 'Elcodi\\Component\\Attribute\\Entity\\Attribute', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Attribute\\Entity\\Interfaces\\ValueInterface', 'Elcodi\\Component\\Attribute\\Entity\\Value', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Geo\\Entity\\Interfaces\\AddressInterface', 'Elcodi\\Component\\Geo\\Entity\\Address', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Geo\\Entity\\Interfaces\\LocationInterface', 'Elcodi\\Component\\Geo\\Entity\\Location', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Media\\Entity\\Interfaces\\ImageInterface', 'Elcodi\\Component\\Media\\Entity\\Image', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Language\\Entity\\Interfaces\\LanguageInterface', 'Elcodi\\Component\\Language\\Entity\\Language', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Currency\\Entity\\Interfaces\\CurrencyInterface', 'Elcodi\\Component\\Currency\\Entity\\Currency', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Rule\\Entity\\Interfaces\\RuleInterface', 'Elcodi\\Component\\Rule\\Entity\\Rule', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Coupon\\Entity\\Interfaces\\CouponInterface', 'Elcodi\\Component\\Coupon\\Entity\\Coupon', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartInterface', 'Elcodi\\Component\\Cart\\Entity\\Cart', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderInterface', 'Elcodi\\Component\\Cart\\Entity\\Order', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartLineInterface', 'Elcodi\\Component\\Cart\\Entity\\CartLine', array());
        $c->addResolveTargetEntity('Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderLineInterface', 'Elcodi\\Component\\Cart\\Entity\\OrderLine', array());

        $d = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $d->addEventSubscriber($c);
        $d->addEventListener(array(0 => 'preUpdate'), $this->get('elcodi_plugin.event_listener.twitter_username'));
        $d->addEventListener(array(0 => 'preUpdate', 1 => 'prePersist'), $this->get('elcodi.event_listener.admin_user_password'));
        $d->addEventListener(array(0 => 'loadClassMetadata'), $this->get('doctrine.orm.default_listeners.attach_entity_listeners'));
        $d->addEventListener(array(0 => 'preFlush', 1 => 'preUpdate'), $this->get('elcodi.event_listener.fix_category_integrity'));
        $d->addEventListener(array(0 => 'preUpdate', 1 => 'prePersist'), $this->get('elcodi.event_listener.customer_password'));
        $d->addEventListener(array(0 => 'preFlush', 1 => 'preUpdate'), $this->get('elcodi.event_listener.root_category'));
        $d->addEventListener(array(0 => 'preFlush'), $this->get('elcodi_admin.event_listener.category_position'));
        $d->addEventListener(array(0 => 'postLoad'), $this->get('elcodi.event_listener.entity_translator_entity'));
        $d->addEventListener(array(0 => 'preUpdate'), $this->get('elcodi_plugin.event_listener.facebook_username'));

        return $this->services['doctrine.dbal.default_connection'] = $this->get('doctrine.dbal.connection_factory')->createConnection(array('driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => NULL, 'dbname' => 'bamboo', 'user' => 'root', 'password' => 123456, 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $b, $d, array());
    }

    /**
     * Gets the 'doctrine.orm.default_entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultEntityListenerResolver A Doctrine\ORM\Mapping\DefaultEntityListenerResolver instance.
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\ORM\Mapping\DefaultEntityListenerResolver();
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance.
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        $a = $this->get('simple_doctrine_mapping.locator_configurator');

        $b = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Cart\\Entity\\Cart', array(0 => '@ElcodiCartBundle/Resources/config/doctrine/Cart.orm.yml'));
        $a->configure($b);

        $c = new \Doctrine\ORM\Mapping\Driver\YamlDriver($b);
        $c->setGlobalBasename('Elcodi\\Component\\Cart\\Entity\\Cart');

        $d = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Cart\\Entity\\CartLine', array(0 => '@ElcodiCartBundle/Resources/config/doctrine/CartLine.orm.yml'));
        $a->configure($d);

        $e = new \Doctrine\ORM\Mapping\Driver\YamlDriver($d);
        $e->setGlobalBasename('Elcodi\\Component\\Cart\\Entity\\CartLine');

        $f = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Cart\\Entity\\Order', array(0 => '@ElcodiCartBundle/Resources/config/doctrine/Order.orm.yml'));
        $a->configure($f);

        $g = new \Doctrine\ORM\Mapping\Driver\YamlDriver($f);
        $g->setGlobalBasename('Elcodi\\Component\\Cart\\Entity\\Order');

        $h = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Cart\\Entity\\OrderLine', array(0 => '@ElcodiCartBundle/Resources/config/doctrine/OrderLine.orm.yml'));
        $a->configure($h);

        $i = new \Doctrine\ORM\Mapping\Driver\YamlDriver($h);
        $i->setGlobalBasename('Elcodi\\Component\\Cart\\Entity\\OrderLine');

        $j = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Coupon\\Entity\\Coupon', array(0 => '@ElcodiCouponBundle/Resources/config/doctrine/Coupon.orm.yml'));
        $a->configure($j);

        $k = new \Doctrine\ORM\Mapping\Driver\YamlDriver($j);
        $k->setGlobalBasename('Elcodi\\Component\\Coupon\\Entity\\Coupon');

        $l = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Rule\\Entity\\Rule', array(0 => '@ElcodiRuleBundle/Resources/config/doctrine/Rule.orm.yml'));
        $a->configure($l);

        $m = new \Doctrine\ORM\Mapping\Driver\YamlDriver($l);
        $m->setGlobalBasename('Elcodi\\Component\\Rule\\Entity\\Rule');

        $n = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Currency\\Entity\\Currency', array(0 => '@ElcodiCurrencyBundle/Resources/config/doctrine/Currency.orm.yml'));
        $a->configure($n);

        $o = new \Doctrine\ORM\Mapping\Driver\YamlDriver($n);
        $o->setGlobalBasename('Elcodi\\Component\\Currency\\Entity\\Currency');

        $p = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate', array(0 => '@ElcodiCurrencyBundle/Resources/config/doctrine/CurrencyExchangeRate.orm.yml'));
        $a->configure($p);

        $q = new \Doctrine\ORM\Mapping\Driver\YamlDriver($p);
        $q->setGlobalBasename('Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate');

        $r = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Language\\Entity\\Language', array(0 => '@ElcodiLanguageBundle/Resources/config/doctrine/Language.orm.yml'));
        $a->configure($r);

        $s = new \Doctrine\ORM\Mapping\Driver\YamlDriver($r);
        $s->setGlobalBasename('Elcodi\\Component\\Language\\Entity\\Language');

        $t = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Media\\Entity\\Image', array(0 => '@ElcodiMediaBundle/Resources/config/doctrine/Image.orm.yml'));
        $a->configure($t);

        $u = new \Doctrine\ORM\Mapping\Driver\YamlDriver($t);
        $u->setGlobalBasename('Elcodi\\Component\\Media\\Entity\\Image');

        $v = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Geo\\Entity\\Address', array(0 => '@ElcodiGeoBundle/Resources/config/doctrine/Address.orm.yml'));
        $a->configure($v);

        $w = new \Doctrine\ORM\Mapping\Driver\YamlDriver($v);
        $w->setGlobalBasename('Elcodi\\Component\\Geo\\Entity\\Address');

        $x = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Geo\\Entity\\Location', array(0 => '@ElcodiGeoBundle/Resources/config/doctrine/Location.orm.yml'));
        $a->configure($x);

        $y = new \Doctrine\ORM\Mapping\Driver\YamlDriver($x);
        $y->setGlobalBasename('Elcodi\\Component\\Geo\\Entity\\Location');

        $z = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Attribute\\Entity\\Attribute', array(0 => '@ElcodiAttributeBundle/Resources/config/doctrine/Attribute.orm.yml'));
        $a->configure($z);

        $aa = new \Doctrine\ORM\Mapping\Driver\YamlDriver($z);
        $aa->setGlobalBasename('Elcodi\\Component\\Attribute\\Entity\\Attribute');

        $ba = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Attribute\\Entity\\Value', array(0 => '@ElcodiAttributeBundle/Resources/config/doctrine/Value.orm.yml'));
        $a->configure($ba);

        $ca = new \Doctrine\ORM\Mapping\Driver\YamlDriver($ba);
        $ca->setGlobalBasename('Elcodi\\Component\\Attribute\\Entity\\Value');

        $da = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Store\\Entity\\Store', array(0 => '@ElcodiStoreBundle/Resources/config/doctrine/Store.orm.yml'));
        $a->configure($da);

        $ea = new \Doctrine\ORM\Mapping\Driver\YamlDriver($da);
        $ea->setGlobalBasename('Elcodi\\Component\\Store\\Entity\\Store');

        $fa = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\User\\Entity\\Abstracts\\AbstractUser', array(0 => '@ElcodiUserBundle/Resources/config/doctrine/AbstractUser.orm.yml'));
        $a->configure($fa);

        $ga = new \Doctrine\ORM\Mapping\Driver\YamlDriver($fa);
        $ga->setGlobalBasename('Elcodi\\Component\\User\\Entity\\Abstracts\\AbstractUser');

        $ha = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\User\\Entity\\AdminUser', array(0 => '@ElcodiUserBundle/Resources/config/doctrine/AdminUser.orm.yml'));
        $a->configure($ha);

        $ia = new \Doctrine\ORM\Mapping\Driver\YamlDriver($ha);
        $ia->setGlobalBasename('Elcodi\\Component\\User\\Entity\\AdminUser');

        $ja = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\User\\Entity\\Customer', array(0 => '@ElcodiUserBundle/Resources/config/doctrine/Customer.orm.yml'));
        $a->configure($ja);

        $ka = new \Doctrine\ORM\Mapping\Driver\YamlDriver($ja);
        $ka->setGlobalBasename('Elcodi\\Component\\User\\Entity\\Customer');

        $la = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Purchasable', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Purchasable.orm.yml'));
        $a->configure($la);

        $ma = new \Doctrine\ORM\Mapping\Driver\YamlDriver($la);
        $ma->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Purchasable');

        $na = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Product', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Product.orm.yml'));
        $a->configure($na);

        $oa = new \Doctrine\ORM\Mapping\Driver\YamlDriver($na);
        $oa->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Product');

        $pa = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Variant', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Variant.orm.yml'));
        $a->configure($pa);

        $qa = new \Doctrine\ORM\Mapping\Driver\YamlDriver($pa);
        $qa->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Variant');

        $ra = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Pack', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Pack.orm.yml'));
        $a->configure($ra);

        $sa = new \Doctrine\ORM\Mapping\Driver\YamlDriver($ra);
        $sa->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Pack');

        $ta = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Category', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Category.orm.yml'));
        $a->configure($ta);

        $ua = new \Doctrine\ORM\Mapping\Driver\YamlDriver($ta);
        $ua->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Category');

        $va = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Product\\Entity\\Manufacturer', array(0 => '@ElcodiProductBundle/Resources/config/doctrine/Manufacturer.orm.yml'));
        $a->configure($va);

        $wa = new \Doctrine\ORM\Mapping\Driver\YamlDriver($va);
        $wa->setGlobalBasename('Elcodi\\Component\\Product\\Entity\\Manufacturer');

        $xa = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine', array(0 => '@ElcodiStateTransitionMachineBundle/Resources/config/doctrine/StateLine.orm.yml'));
        $a->configure($xa);

        $ya = new \Doctrine\ORM\Mapping\Driver\YamlDriver($xa);
        $ya->setGlobalBasename('Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine');

        $za = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Zone\\Entity\\Zone', array(0 => '@ElcodiZoneBundle/Resources/config/doctrine/Zone.orm.yml'));
        $a->configure($za);

        $ab = new \Doctrine\ORM\Mapping\Driver\YamlDriver($za);
        $ab->setGlobalBasename('Elcodi\\Component\\Zone\\Entity\\Zone');

        $bb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Tax\\Entity\\Tax', array(0 => '@ElcodiTaxBundle/Resources/config/doctrine/Tax.orm.yml'));
        $a->configure($bb);

        $cb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($bb);
        $cb->setGlobalBasename('Elcodi\\Component\\Tax\\Entity\\Tax');

        $db = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation', array(0 => '@ElcodiEntityTranslatorBundle/Resources/config/doctrine/EntityTranslation.orm.yml'));
        $a->configure($db);

        $eb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($db);
        $eb->setGlobalBasename('Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation');

        $fb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Menu\\Entity\\Menu\\Menu', array(0 => '@ElcodiMenuBundle/Resources/config/doctrine/Menu.orm.yml'));
        $a->configure($fb);

        $gb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($fb);
        $gb->setGlobalBasename('Elcodi\\Component\\Menu\\Entity\\Menu\\Menu');

        $hb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Menu\\Entity\\Menu\\Node', array(0 => '@ElcodiMenuBundle/Resources/config/doctrine/MenuNode.orm.yml'));
        $a->configure($hb);

        $ib = new \Doctrine\ORM\Mapping\Driver\YamlDriver($hb);
        $ib->setGlobalBasename('Elcodi\\Component\\Menu\\Entity\\Menu\\Node');

        $jb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Plugin\\Entity\\Plugin', array(0 => '@ElcodiPluginBundle/Resources/config/doctrine/Plugin.orm.yml'));
        $a->configure($jb);

        $kb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($jb);
        $kb->setGlobalBasename('Elcodi\\Component\\Plugin\\Entity\\Plugin');

        $lb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Plugin\\Entity\\PluginConfiguration', array(0 => '@ElcodiPluginBundle/Resources/config/doctrine/PluginConfiguration.orm.yml'));
        $a->configure($lb);

        $mb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($lb);
        $mb->setGlobalBasename('Elcodi\\Component\\Plugin\\Entity\\PluginConfiguration');

        $nb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon', array(0 => '@ElcodiCartCouponBundle/Resources/config/doctrine/CartCoupon.orm.yml'));
        $a->configure($nb);

        $ob = new \Doctrine\ORM\Mapping\Driver\YamlDriver($nb);
        $ob->setGlobalBasename('Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon');

        $pb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon', array(0 => '@ElcodiCartCouponBundle/Resources/config/doctrine/OrderCoupon.orm.yml'));
        $a->configure($pb);

        $qb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($pb);
        $qb->setGlobalBasename('Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon');

        $rb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Banner\\Entity\\Banner', array(0 => '@ElcodiBannerBundle/Resources/config/doctrine/Banner.orm.yml'));
        $a->configure($rb);

        $sb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($rb);
        $sb->setGlobalBasename('Elcodi\\Component\\Banner\\Entity\\Banner');

        $tb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Banner\\Entity\\BannerZone', array(0 => '@ElcodiBannerBundle/Resources/config/doctrine/BannerZone.orm.yml'));
        $a->configure($tb);

        $ub = new \Doctrine\ORM\Mapping\Driver\YamlDriver($tb);
        $ub->setGlobalBasename('Elcodi\\Component\\Banner\\Entity\\BannerZone');

        $vb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription', array(0 => '@ElcodiNewsletterBundle/Resources/config/doctrine/NewsletterSubscription.orm.yml'));
        $a->configure($vb);

        $wb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($vb);
        $wb->setGlobalBasename('Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription');

        $xb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Page\\Entity\\Page', array(0 => '@ElcodiPageBundle/Resources/config/doctrine/Page.orm.yml'));
        $a->configure($xb);

        $yb = new \Doctrine\ORM\Mapping\Driver\YamlDriver($xb);
        $yb->setGlobalBasename('Elcodi\\Component\\Page\\Entity\\Page');

        $zb = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Metric\\Core\\Entity\\Entry', array(0 => '@ElcodiMetricBundle/Resources/config/doctrine/Entry.orm.yml'));
        $a->configure($zb);

        $ac = new \Doctrine\ORM\Mapping\Driver\YamlDriver($zb);
        $ac->setGlobalBasename('Elcodi\\Component\\Metric\\Core\\Entity\\Entry');

        $bc = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Comment\\Entity\\Comment', array(0 => '@ElcodiCommentBundle/Resources/config/doctrine/Comment.orm.yml'));
        $a->configure($bc);

        $cc = new \Doctrine\ORM\Mapping\Driver\YamlDriver($bc);
        $cc->setGlobalBasename('Elcodi\\Component\\Comment\\Entity\\Comment');

        $dc = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Component\\Comment\\Entity\\Vote', array(0 => '@ElcodiCommentBundle/Resources/config/doctrine/Vote.orm.yml'));
        $a->configure($dc);

        $ec = new \Doctrine\ORM\Mapping\Driver\YamlDriver($dc);
        $ec->setGlobalBasename('Elcodi\\Component\\Comment\\Entity\\Vote');

        $fc = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Store\\ConnectBundle\\Entity\\Authorization', array(0 => '@StoreConnectBundle/Resources/config/doctrine/Authorization.orm.yml'));
        $a->configure($fc);

        $gc = new \Doctrine\ORM\Mapping\Driver\YamlDriver($fc);
        $gc->setGlobalBasename('Elcodi\\Store\\ConnectBundle\\Entity\\Authorization');

        $hc = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange', array(0 => '@ElcodiCustomShippingBundle/Resources/config/doctrine/ShippingRange.orm.yml'));
        $a->configure($hc);

        $ic = new \Doctrine\ORM\Mapping\Driver\YamlDriver($hc);
        $ic->setGlobalBasename('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange');

        $jc = new \Mmoreram\SimpleDoctrineMapping\Locator\SimpleDoctrineMappingLocator('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier', array(0 => '@ElcodiCustomShippingBundle/Resources/config/doctrine/Carrier.orm.yml'));
        $a->configure($jc);

        $kc = new \Doctrine\ORM\Mapping\Driver\YamlDriver($jc);
        $kc->setGlobalBasename('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier');

        $lc = new \Mmoreram\SimpleDoctrineMapping\Mapping\MappingDriverChain();
        $lc->addDriver($c, 'Elcodi\\Component\\Cart\\Entity\\Cart');
        $lc->addDriver($e, 'Elcodi\\Component\\Cart\\Entity\\CartLine');
        $lc->addDriver($g, 'Elcodi\\Component\\Cart\\Entity\\Order');
        $lc->addDriver($i, 'Elcodi\\Component\\Cart\\Entity\\OrderLine');
        $lc->addDriver($k, 'Elcodi\\Component\\Coupon\\Entity\\Coupon');
        $lc->addDriver($m, 'Elcodi\\Component\\Rule\\Entity\\Rule');
        $lc->addDriver($o, 'Elcodi\\Component\\Currency\\Entity\\Currency');
        $lc->addDriver($q, 'Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate');
        $lc->addDriver($s, 'Elcodi\\Component\\Language\\Entity\\Language');
        $lc->addDriver($u, 'Elcodi\\Component\\Media\\Entity\\Image');
        $lc->addDriver($w, 'Elcodi\\Component\\Geo\\Entity\\Address');
        $lc->addDriver($y, 'Elcodi\\Component\\Geo\\Entity\\Location');
        $lc->addDriver($aa, 'Elcodi\\Component\\Attribute\\Entity\\Attribute');
        $lc->addDriver($ca, 'Elcodi\\Component\\Attribute\\Entity\\Value');
        $lc->addDriver($ea, 'Elcodi\\Component\\Store\\Entity\\Store');
        $lc->addDriver($ga, 'Elcodi\\Component\\User\\Entity\\Abstracts\\AbstractUser');
        $lc->addDriver($ia, 'Elcodi\\Component\\User\\Entity\\AdminUser');
        $lc->addDriver($ka, 'Elcodi\\Component\\User\\Entity\\Customer');
        $lc->addDriver($ma, 'Elcodi\\Component\\Product\\Entity\\Purchasable');
        $lc->addDriver($oa, 'Elcodi\\Component\\Product\\Entity\\Product');
        $lc->addDriver($qa, 'Elcodi\\Component\\Product\\Entity\\Variant');
        $lc->addDriver($sa, 'Elcodi\\Component\\Product\\Entity\\Pack');
        $lc->addDriver($ua, 'Elcodi\\Component\\Product\\Entity\\Category');
        $lc->addDriver($wa, 'Elcodi\\Component\\Product\\Entity\\Manufacturer');
        $lc->addDriver($ya, 'Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine');
        $lc->addDriver($ab, 'Elcodi\\Component\\Zone\\Entity\\Zone');
        $lc->addDriver($cb, 'Elcodi\\Component\\Tax\\Entity\\Tax');
        $lc->addDriver($eb, 'Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation');
        $lc->addDriver($gb, 'Elcodi\\Component\\Menu\\Entity\\Menu\\Menu');
        $lc->addDriver($ib, 'Elcodi\\Component\\Menu\\Entity\\Menu\\Node');
        $lc->addDriver($kb, 'Elcodi\\Component\\Plugin\\Entity\\Plugin');
        $lc->addDriver($mb, 'Elcodi\\Component\\Plugin\\Entity\\PluginConfiguration');
        $lc->addDriver($ob, 'Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon');
        $lc->addDriver($qb, 'Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon');
        $lc->addDriver($sb, 'Elcodi\\Component\\Banner\\Entity\\Banner');
        $lc->addDriver($ub, 'Elcodi\\Component\\Banner\\Entity\\BannerZone');
        $lc->addDriver($wb, 'Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription');
        $lc->addDriver($yb, 'Elcodi\\Component\\Page\\Entity\\Page');
        $lc->addDriver($ac, 'Elcodi\\Component\\Metric\\Core\\Entity\\Entry');
        $lc->addDriver($cc, 'Elcodi\\Component\\Comment\\Entity\\Comment');
        $lc->addDriver($ec, 'Elcodi\\Component\\Comment\\Entity\\Vote');
        $lc->addDriver($gc, 'Elcodi\\Store\\ConnectBundle\\Entity\\Authorization');
        $lc->addDriver($ic, 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange');
        $lc->addDriver($kc, 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier');

        $mc = new \Doctrine\ORM\Configuration();
        $mc->setEntityNamespaces(array());
        $mc->setMetadataCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache'));
        $mc->setQueryCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_query_cache'));
        $mc->setResultCacheImpl($this->get('doctrine_cache.providers.doctrine.orm.default_result_cache'));
        $mc->setMetadataDriverImpl($lc);
        $mc->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $mc->setProxyNamespace('Proxies');
        $mc->setAutoGenerateProxyClasses(true);
        $mc->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $mc->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $mc->setNamingStrategy(new \Doctrine\ORM\Mapping\DefaultNamingStrategy());
        $mc->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $mc->setEntityListenerResolver($this->get('doctrine.orm.default_entity_listener_resolver'));

        $this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create($this->get('doctrine.dbal.default_connection'), $mc);

        $this->get('doctrine.orm.default_manager_configurator')->configure($instance);

        return $instance;
    }

    /**
     * Gets the 'doctrine.orm.default_listeners.attach_entity_listeners' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener A Doctrine\ORM\Tools\AttachEntityListenersListener instance.
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance.
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance.
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance.
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer($this->get('doctrine'));
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_f5945f0e8bb9eaf4058d45ccd9d4966e7cd12d2cc775ecc202d6e3f41ac8eee5');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_query_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_f5945f0e8bb9eaf4058d45ccd9d4966e7cd12d2cc775ecc202d6e3f41ac8eee5');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_result_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf2orm_default_f5945f0e8bb9eaf4058d45ccd9d4966e7cd12d2cc775ecc202d6e3f41ac8eee5');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.elcodi_categories' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_ElcodiCategoriesService()
    {
        $this->services['doctrine_cache.providers.elcodi_categories'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('categories');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.elcodi_comments' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_ElcodiCommentsService()
    {
        $this->services['doctrine_cache.providers.elcodi_comments'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('comments');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.elcodi_menus' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_ElcodiMenusService()
    {
        $this->services['doctrine_cache.providers.elcodi_menus'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('menus');

        return $instance;
    }

    /**
     * Gets the 'doctrine_cache.providers.elcodi_translations' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    protected function getDoctrineCache_Providers_ElcodiTranslationsService()
    {
        $this->services['doctrine_cache.providers.elcodi_translations'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('translations');

        return $instance;
    }

    /**
     * Gets the 'elcodi.admin.menu_builder.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PageBundle\Builder\MenuBuilder A Elcodi\Admin\PageBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodi_Admin_MenuBuilder_PageService()
    {
        return $this->services['elcodi.admin.menu_builder.page'] = new \Elcodi\Admin\PageBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi.admin_user_provider_entity_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Entity\AdminUser A Elcodi\Component\User\Entity\AdminUser instance.
     */
    protected function getElcodi_AdminUserProviderEntityInstanceService()
    {
        return $this->services['elcodi.admin_user_provider_entity_instance'] = $this->get('elcodi.factory.admin_user')->create();
    }

    /**
     * Gets the 'elcodi.applicator.automatic_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\AutomaticCouponApplicator A Elcodi\Component\CartCoupon\Services\AutomaticCouponApplicator instance.
     */
    protected function getElcodi_Applicator_AutomaticCouponService()
    {
        return $this->services['elcodi.applicator.automatic_coupon'] = new \Elcodi\Component\CartCoupon\Services\AutomaticCouponApplicator($this->get('elcodi.manager.cart_coupon'), $this->get('elcodi.repository.coupon'));
    }

    /**
     * Gets the 'elcodi.calculator.exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Currency\Services\ExchangeRateCalculator A Elcodi\Component\Currency\Services\ExchangeRateCalculator instance.
     */
    public function getElcodi_Calculator_ExchangeRateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.calculator.exchange_rate'] = new ElcodiComponentCurrencyServicesExchangeRateCalculator_00000000047380f70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Calculator_ExchangeRateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Currency\Services\ExchangeRateCalculator($this->get('elcodi.manager.currency'), 'USD');
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator.absolute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\AbsoluteCartCouponApplicator A Elcodi\Component\CartCoupon\Applicator\AbsoluteCartCouponApplicator instance.
     */
    protected function getElcodi_CartCouponApplicator_AbsoluteService()
    {
        return $this->services['elcodi.cart_coupon_applicator.absolute'] = new \Elcodi\Component\CartCoupon\Applicator\AbsoluteCartCouponApplicator($this->get('elcodi.wrapper.currency'), $this->get('elcodi.converter.currency'));
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator.mxn_group' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\MxNGroupCartCouponApplicator A Elcodi\Component\CartCoupon\Applicator\MxNGroupCartCouponApplicator instance.
     */
    protected function getElcodi_CartCouponApplicator_MxnGroupService()
    {
        return $this->services['elcodi.cart_coupon_applicator.mxn_group'] = new \Elcodi\Component\CartCoupon\Applicator\MxNGroupCartCouponApplicator($this->get('elcodi.wrapper.currency'), $this->get('elcodi.converter.currency'), $this->get('elcodi.cart_coupon_applicator_function_collector'));
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator.mxn_specific' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\MxNSpecificCartCouponApplicator A Elcodi\Component\CartCoupon\Applicator\MxNSpecificCartCouponApplicator instance.
     */
    protected function getElcodi_CartCouponApplicator_MxnSpecificService()
    {
        return $this->services['elcodi.cart_coupon_applicator.mxn_specific'] = new \Elcodi\Component\CartCoupon\Applicator\MxNSpecificCartCouponApplicator($this->get('elcodi.wrapper.currency'), $this->get('elcodi.converter.currency'), $this->get('elcodi.cart_coupon_applicator_function_collector'));
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\PercentCartCouponApplicator A Elcodi\Component\CartCoupon\Applicator\PercentCartCouponApplicator instance.
     */
    protected function getElcodi_CartCouponApplicator_PercentService()
    {
        return $this->services['elcodi.cart_coupon_applicator.percent'] = new \Elcodi\Component\CartCoupon\Applicator\PercentCartCouponApplicator();
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\CartCouponApplicatorCollector A Elcodi\Component\CartCoupon\Applicator\CartCouponApplicatorCollector instance.
     */
    protected function getElcodi_CartCouponApplicatorCollectorService()
    {
        $this->services['elcodi.cart_coupon_applicator_collector'] = $instance = new \Elcodi\Component\CartCoupon\Applicator\CartCouponApplicatorCollector($this->get('elcodi.wrapper.currency'));

        $instance->addCartCouponApplicator($this->get('elcodi.cart_coupon_applicator.absolute'));
        $instance->addCartCouponApplicator($this->get('elcodi.cart_coupon_applicator.mxn_group'));
        $instance->addCartCouponApplicator($this->get('elcodi.cart_coupon_applicator.mxn_specific'));
        $instance->addCartCouponApplicator($this->get('elcodi.cart_coupon_applicator.percent'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.cart_coupon_applicator_function_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\ExpressionLanguageFunctionCollector A Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\ExpressionLanguageFunctionCollector instance.
     */
    protected function getElcodi_CartCouponApplicatorFunctionCollectorService()
    {
        $this->services['elcodi.cart_coupon_applicator_function_collector'] = $instance = new \Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\ExpressionLanguageFunctionCollector();

        $instance->addExpressionLanguageFunction(new \Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\CategoryFunction());
        $instance->addExpressionLanguageFunction(new \Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\ManufacturerFunction());
        $instance->addExpressionLanguageFunction(new \Elcodi\Component\CartCoupon\Applicator\ExpressionLanguage\ProductFunction());

        return $instance;
    }

    /**
     * Gets the 'elcodi.cart_saver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartSaver A Elcodi\Component\Cart\Services\CartSaver instance.
     */
    protected function getElcodi_CartSaverService()
    {
        return $this->services['elcodi.cart_saver'] = new \Elcodi\Component\Cart\Services\CartSaver($this->get('elcodi.object_manager.cart'));
    }

    /**
     * Gets the 'elcodi.command.elcodi_install' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Common\CommonBundle\Command\ElcodiInstallCommand A Elcodi\Common\CommonBundle\Command\ElcodiInstallCommand instance.
     */
    protected function getElcodi_Command_ElcodiInstallService()
    {
        return $this->services['elcodi.command.elcodi_install'] = new \Elcodi\Common\CommonBundle\Command\ElcodiInstallCommand($this->get('kernel'), $this->get('elcodi.object_manager.location'));
    }

    /**
     * Gets the 'elcodi.command.location_drop' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Command\LocationDropCommand A Elcodi\Component\Geo\Command\LocationDropCommand instance.
     */
    protected function getElcodi_Command_LocationDropService()
    {
        return $this->services['elcodi.command.location_drop'] = new \Elcodi\Component\Geo\Command\LocationDropCommand($this->get('elcodi.director.location'));
    }

    /**
     * Gets the 'elcodi.command.location_load' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Command\LocationLoadCommand A Elcodi\Component\Geo\Command\LocationLoadCommand instance.
     */
    protected function getElcodi_Command_LocationLoadService()
    {
        return $this->services['elcodi.command.location_load'] = new \Elcodi\Component\Geo\Command\LocationLoadCommand($this->get('elcodi.director.location'), $this->get('elcodi.location_loader'));
    }

    /**
     * Gets the 'elcodi.command.location_populate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Command\LocationPopulateCommand A Elcodi\Component\Geo\Command\LocationPopulateCommand instance.
     */
    protected function getElcodi_Command_LocationPopulateService()
    {
        return $this->services['elcodi.command.location_populate'] = new \Elcodi\Component\Geo\Command\LocationPopulateCommand($this->get('elcodi.director.location'), $this->get('elcodi.location_populator'));
    }

    /**
     * Gets the 'elcodi.command.metrics_load' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Metric\Core\Command\MetricsLoadCommand A Elcodi\Component\Metric\Core\Command\MetricsLoadCommand instance.
     */
    protected function getElcodi_Command_MetricsLoadService()
    {
        return $this->services['elcodi.command.metrics_load'] = new \Elcodi\Component\Metric\Core\Command\MetricsLoadCommand($this->get('elcodi.metric_loader'));
    }

    /**
     * Gets the 'elcodi.command.plugin_disable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Command\PluginDisableCommand A Elcodi\Component\Plugin\Command\PluginDisableCommand instance.
     */
    protected function getElcodi_Command_PluginDisableService()
    {
        return $this->services['elcodi.command.plugin_disable'] = new \Elcodi\Component\Plugin\Command\PluginDisableCommand($this->get('elcodi.repository.plugin'), $this->get('elcodi.object_manager.plugin'));
    }

    /**
     * Gets the 'elcodi.command.plugin_enable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Command\PluginEnableCommand A Elcodi\Component\Plugin\Command\PluginEnableCommand instance.
     */
    protected function getElcodi_Command_PluginEnableService()
    {
        return $this->services['elcodi.command.plugin_enable'] = new \Elcodi\Component\Plugin\Command\PluginEnableCommand($this->get('elcodi.repository.plugin'), $this->get('elcodi.object_manager.plugin'));
    }

    /**
     * Gets the 'elcodi.command.plugins_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Command\PluginsListCommand A Elcodi\Component\Plugin\Command\PluginsListCommand instance.
     */
    protected function getElcodi_Command_PluginsListService()
    {
        return $this->services['elcodi.command.plugins_list'] = new \Elcodi\Component\Plugin\Command\PluginsListCommand($this->get('elcodi.repository.plugin'));
    }

    /**
     * Gets the 'elcodi.command.plugins_load' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Command\PluginsLoadCommand A Elcodi\Component\Plugin\Command\PluginsLoadCommand instance.
     */
    protected function getElcodi_Command_PluginsLoadService()
    {
        return $this->services['elcodi.command.plugins_load'] = new \Elcodi\Component\Plugin\Command\PluginsLoadCommand($this->get('elcodi.manager.plugin'));
    }

    /**
     * Gets the 'elcodi.command.populate_currency_rates' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Command\CurrencyExchangeRatesPopulateCommand A Elcodi\Component\Currency\Command\CurrencyExchangeRatesPopulateCommand instance.
     */
    protected function getElcodi_Command_PopulateCurrencyRatesService()
    {
        return $this->services['elcodi.command.populate_currency_rates'] = new \Elcodi\Component\Currency\Command\CurrencyExchangeRatesPopulateCommand($this->get('elcodi.populator.currency_exchange_rate'));
    }

    /**
     * Gets the 'elcodi.command.sitemap_dump' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Command\SitemapDumpCommand A Elcodi\Component\Sitemap\Command\SitemapDumpCommand instance.
     */
    protected function getElcodi_Command_SitemapDumpService()
    {
        return $this->services['elcodi.command.sitemap_dump'] = new \Elcodi\Component\Sitemap\Command\SitemapDumpCommand($this);
    }

    /**
     * Gets the 'elcodi.command.sitemap_profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Command\SitemapProfileCommand A Elcodi\Component\Sitemap\Command\SitemapProfileCommand instance.
     */
    protected function getElcodi_Command_SitemapProfileService()
    {
        return $this->services['elcodi.command.sitemap_profile'] = new \Elcodi\Component\Sitemap\Command\SitemapProfileCommand($this);
    }

    /**
     * Gets the 'elcodi.command.translations_warmup' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Console\TranslationsWarmupCommand A Elcodi\Component\EntityTranslator\Console\TranslationsWarmupCommand instance.
     */
    protected function getElcodi_Command_TranslationsWarmupService()
    {
        return $this->services['elcodi.command.translations_warmup'] = new \Elcodi\Component\EntityTranslator\Console\TranslationsWarmupCommand($this->get('elcodi.event_dispatcher.entity_translator'));
    }

    /**
     * Gets the 'elcodi.comment_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Services\CommentCache A Elcodi\Component\Comment\Services\CommentCache instance.
     */
    protected function getElcodi_CommentCacheService()
    {
        $this->services['elcodi.comment_cache'] = $instance = new \Elcodi\Component\Comment\Services\CommentCache($this->get('elcodi.repository.comment'), $this->get('elcodi.manager.comment_vote'), 'comments');

        $instance->setCache($this->get('doctrine_cache.providers.elcodi_comments'));
        $instance->setEncoder($this->get('elcodi.json_encoder'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.container_parameters' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ParameterBag A Symfony\Component\DependencyInjection\ParameterBag\ParameterBag instance.
     */
    protected function getElcodi_ContainerParametersService()
    {
        return $this->services['elcodi.container_parameters'] = $this->getParameterBag();
    }

    /**
     * Gets the 'elcodi.controller.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Controller\CommentController A Elcodi\Component\Comment\Controller\CommentController instance.
     */
    protected function getElcodi_Controller_CommentService()
    {
        return $this->services['elcodi.controller.comment'] = new \Elcodi\Component\Comment\Controller\CommentController($this->get('elcodi.manager.comment'), $this->get('elcodi.comment_cache'), $this->get('elcodi.repository.comment'));
    }

    /**
     * Gets the 'elcodi.controller.image_resize' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Controller\ImageResizeController A Elcodi\Component\Media\Controller\ImageResizeController instance.
     */
    protected function getElcodi_Controller_ImageResizeService()
    {
        return $this->services['elcodi.controller.image_resize'] = new \Elcodi\Component\Media\Controller\ImageResizeController($this->get('request_stack'), $this->get('elcodi.repository.image'), $this->get('elcodi.manager.media_image'), $this->get('elcodi.transformer.media_image_etag'), 7884000, 7884000);
    }

    /**
     * Gets the 'elcodi.controller.image_upload' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Controller\ImageUploadController A Elcodi\Component\Media\Controller\ImageUploadController instance.
     */
    protected function getElcodi_Controller_ImageUploadService()
    {
        return $this->services['elcodi.controller.image_upload'] = new \Elcodi\Component\Media\Controller\ImageUploadController($this->get('request_stack'), $this->get('elcodi.uploader.image'), $this->get('router'), 'file', 'elcodi.route.image_view', 'elcodi.route.image_resize');
    }

    /**
     * Gets the 'elcodi.controller.location_api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Controller\LocationApiController A Elcodi\Component\Geo\Controller\LocationApiController instance.
     */
    protected function getElcodi_Controller_LocationApiService()
    {
        return $this->services['elcodi.controller.location_api'] = new \Elcodi\Component\Geo\Controller\LocationApiController($this->get('request_stack'), $this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi.controller.metric_input' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Metric\Input\Controller\InputController A Elcodi\Component\Metric\Input\Controller\InputController instance.
     */
    protected function getElcodi_Controller_MetricInputService()
    {
        return $this->services['elcodi.controller.metric_input'] = new \Elcodi\Component\Metric\Input\Controller\InputController($this->get('request_stack'), $this->get('elcodi.metric_manager'), $this->get('elcodi.factory.datetime'));
    }

    /**
     * Gets the 'elcodi.controller.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Page\Controller\PageController A Elcodi\Component\Page\Controller\PageController instance.
     */
    protected function getElcodi_Controller_PageService()
    {
        return $this->services['elcodi.controller.page'] = new \Elcodi\Component\Page\Controller\PageController($this->get('elcodi.repository.page'), $this->get('elcodi.transformer.page_response'));
    }

    /**
     * Gets the 'elcodi.converter.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Services\CurrencyConverter A Elcodi\Component\Currency\Services\CurrencyConverter instance.
     */
    protected function getElcodi_Converter_CurrencyService()
    {
        return $this->services['elcodi.converter.currency'] = new \Elcodi\Component\Currency\Services\CurrencyConverter($this->get('elcodi.calculator.exchange_rate'));
    }

    /**
     * Gets the 'elcodi.currency_exchange_rate_adapter.dummy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\DummyProviderAdapter A Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\DummyProviderAdapter instance.
     */
    protected function getElcodi_CurrencyExchangeRateAdapter_DummyService()
    {
        return $this->services['elcodi.currency_exchange_rate_adapter.dummy'] = new \Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\DummyProviderAdapter();
    }

    /**
     * Gets the 'elcodi.currency_exchange_rate_adapter.yahoo_finances' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\YahooFinanceProviderAdapter A Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\YahooFinanceProviderAdapter instance.
     */
    protected function getElcodi_CurrencyExchangeRateAdapter_YahooFinancesService()
    {
        return $this->services['elcodi.currency_exchange_rate_adapter.yahoo_finances'] = new \Elcodi\Component\Currency\Adapter\CurrencyExchangeRatesProvider\YahooFinanceProviderAdapter($this->get('elcodi.guzzle_client'));
    }

    /**
     * Gets the 'elcodi.customer_provider_entity_instance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Entity\Customer A Elcodi\Component\User\Entity\Customer instance.
     */
    protected function getElcodi_CustomerProviderEntityInstanceService()
    {
        return $this->services['elcodi.customer_provider_entity_instance'] = $this->get('elcodi.factory.customer')->create();
    }

    /**
     * Gets the 'elcodi.director.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_AddressService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.address'] = new ElcodiComponentCoreServicesObjectDirector_00000000047386c60000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_AddressService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.address'), $this->get('elcodi.repository.address'), $this->get('elcodi.factory.address'));
    }

    /**
     * Gets the 'elcodi.director.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_AdminUserService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.admin_user'] = new ElcodiComponentCoreServicesObjectDirector_000000000473844b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_AdminUserService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.admin_user'), $this->get('elcodi.repository.admin_user'), $this->get('elcodi.factory.admin_user'));
    }

    /**
     * Gets the 'elcodi.director.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_AttributeService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.attribute'] = new ElcodiComponentCoreServicesObjectDirector_00000000047384900000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_AttributeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.attribute'), $this->get('elcodi.repository.attribute'), $this->get('elcodi.factory.attribute'));
    }

    /**
     * Gets the 'elcodi.director.attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_AttributeValueService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.attribute_value'] = new ElcodiComponentCoreServicesObjectDirector_00000000047384ed0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_AttributeValueService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.attribute_value'), $this->get('elcodi.repository.attribute_value'), $this->get('elcodi.factory.attribute_value'));
    }

    /**
     * Gets the 'elcodi.director.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_BannerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.banner'] = new ElcodiComponentCoreServicesObjectDirector_00000000047392dc0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_BannerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.banner'), $this->get('elcodi.repository.banner'), $this->get('elcodi.factory.banner'));
    }

    /**
     * Gets the 'elcodi.director.banner_zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_BannerZoneService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.banner_zone'] = new ElcodiComponentCoreServicesObjectDirector_00000000047392d90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_BannerZoneService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.banner_zone'), $this->get('elcodi.repository.banner_zone'), $this->get('elcodi.factory.banner_zone'));
    }

    /**
     * Gets the 'elcodi.director.carrier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CarrierService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.carrier'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739d1b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CarrierService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.carrier'), $this->get('elcodi.repository.carrier'), $this->get('elcodi_plugin.custom_shipping.factory.carrier'));
    }

    /**
     * Gets the 'elcodi.director.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CartService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.cart'] = new ElcodiComponentCoreServicesObjectDirector_00000000047381cc0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CartService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.cart'), $this->get('elcodi.repository.cart'), $this->get('elcodi.factory.cart'));
    }

    /**
     * Gets the 'elcodi.director.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CartCouponService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.cart_coupon'] = new ElcodiComponentCoreServicesObjectDirector_00000000047392820000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CartCouponService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.cart_coupon'), $this->get('elcodi.repository.cart_coupon'), $this->get('elcodi.factory.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.director.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CartLineService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.cart_line'] = new ElcodiComponentCoreServicesObjectDirector_00000000047381c90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CartLineService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.cart_line'), $this->get('elcodi.repository.cart_line'), $this->get('elcodi.factory.cart_line'));
    }

    /**
     * Gets the 'elcodi.director.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CategoryService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.category'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739b2f0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CategoryService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.category'), $this->get('elcodi.repository.category'), $this->get('elcodi.factory.category'));
    }

    /**
     * Gets the 'elcodi.director.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CommentService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.comment'] = new ElcodiComponentCoreServicesObjectDirector_00000000047391fb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CommentService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.comment'), $this->get('elcodi.repository.comment'), $this->get('elcodi.factory.comment'));
    }

    /**
     * Gets the 'elcodi.director.comment_vote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CommentVoteService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.comment_vote'] = new ElcodiComponentCoreServicesObjectDirector_00000000047391f80000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CommentVoteService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.comment_vote'), $this->get('elcodi.repository.comment_vote'), $this->get('elcodi.factory.comment_vote'));
    }

    /**
     * Gets the 'elcodi.director.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CouponService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.coupon'] = new ElcodiComponentCoreServicesObjectDirector_00000000047381180000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CouponService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.coupon'), $this->get('elcodi.repository.coupon'), $this->get('elcodi.factory.coupon'));
    }

    /**
     * Gets the 'elcodi.director.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CurrencyService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.currency'] = new ElcodiComponentCoreServicesObjectDirector_00000000047380d00000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CurrencyService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.currency'), $this->get('elcodi.repository.currency'), $this->get('elcodi.factory.currency'));
    }

    /**
     * Gets the 'elcodi.director.currency_exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CurrencyExchangeRateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.currency_exchange_rate'] = new ElcodiComponentCoreServicesObjectDirector_000000000473802d0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CurrencyExchangeRateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.currency_exchange_rate'), $this->get('elcodi.repository.currency_exchange_rate'), $this->get('elcodi.factory.currency_exchange_rate'));
    }

    /**
     * Gets the 'elcodi.director.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_CustomerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.customer'] = new ElcodiComponentCoreServicesObjectDirector_000000000473844e0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_CustomerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.customer'), $this->get('elcodi.repository.customer'), $this->get('elcodi.factory.customer'));
    }

    /**
     * Gets the 'elcodi.director.entity_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_EntityTranslationService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.entity_translation'] = new ElcodiComponentCoreServicesObjectDirector_00000000047399e90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_EntityTranslationService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.entity_translation'), $this->get('elcodi.repository.entity_translation'), $this->get('elcodi.factory.entity_translation'));
    }

    /**
     * Gets the 'elcodi.director.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ImageService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.image'] = new ElcodiComponentCoreServicesObjectDirector_00000000047387b90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ImageService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.image'), $this->get('elcodi.repository.image'), $this->get('elcodi.factory.image'));
    }

    /**
     * Gets the 'elcodi.director.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_LanguageService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.language'] = new ElcodiComponentCoreServicesObjectDirector_00000000047380160000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_LanguageService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.language'), $this->get('elcodi.repository.language'), $this->get('elcodi.factory.language'));
    }

    /**
     * Gets the 'elcodi.director.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_LocationService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.location'] = new ElcodiComponentCoreServicesObjectDirector_00000000047386c30000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_LocationService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.location'), $this->get('elcodi.repository.location'), $this->get('elcodi.factory.location'));
    }

    /**
     * Gets the 'elcodi.director.manufacturer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ManufacturerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.manufacturer'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739b2b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ManufacturerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.manufacturer'), $this->get('elcodi.repository.manufacturer'), $this->get('elcodi.factory.manufacturer'));
    }

    /**
     * Gets the 'elcodi.director.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_MenuService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.menu'] = new ElcodiComponentCoreServicesObjectDirector_00000000047399220000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_MenuService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.menu'), $this->get('elcodi.repository.menu'), $this->get('elcodi.factory.menu'));
    }

    /**
     * Gets the 'elcodi.director.menu_node' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_MenuNodeService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.menu_node'] = new ElcodiComponentCoreServicesObjectDirector_00000000047399250000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_MenuNodeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.menu_node'), $this->get('elcodi.repository.menu_node'), $this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi.director.newsletter_subscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_NewsletterSubscriptionService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.newsletter_subscription'] = new ElcodiComponentCoreServicesObjectDirector_000000000473920c0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_NewsletterSubscriptionService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.newsletter_subscription'), $this->get('elcodi.repository.newsletter_subscription'), $this->get('elcodi.factory.newsletter_subscription'));
    }

    /**
     * Gets the 'elcodi.director.order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_OrderService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.order'] = new ElcodiComponentCoreServicesObjectDirector_00000000047381c50000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_OrderService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.order'), $this->get('elcodi.repository.order'), $this->get('elcodi.factory.order'));
    }

    /**
     * Gets the 'elcodi.director.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_OrderCouponService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.order_coupon'] = new ElcodiComponentCoreServicesObjectDirector_000000000473929f0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_OrderCouponService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.order_coupon'), $this->get('elcodi.repository.order_coupon'), $this->get('elcodi.factory.order_coupon'));
    }

    /**
     * Gets the 'elcodi.director.order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_OrderLineService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.order_line'] = new ElcodiComponentCoreServicesObjectDirector_00000000047381c10000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_OrderLineService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.order_line'), $this->get('elcodi.repository.order_line'), $this->get('elcodi.factory.order_line'));
    }

    /**
     * Gets the 'elcodi.director.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_PageService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.page'] = new ElcodiComponentCoreServicesObjectDirector_000000000473927b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_PageService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.page'), $this->get('elcodi.repository.page'), $this->get('elcodi.factory.page'));
    }

    /**
     * Gets the 'elcodi.director.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ProductService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.product'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739bdb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ProductService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.product'), $this->get('elcodi.repository.product'), $this->get('elcodi.factory.product'));
    }

    /**
     * Gets the 'elcodi.director.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ProductVariantService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.product_variant'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739bd70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ProductVariantService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.product_variant'), $this->get('elcodi.repository.product_variant'), $this->get('elcodi.factory.product_variant'));
    }

    /**
     * Gets the 'elcodi.director.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_PurchasablePackService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.purchasable_pack'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739bd30000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_PurchasablePackService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.purchasable_pack'), $this->get('elcodi.repository.purchasable_pack'), $this->get('elcodi.factory.purchasable_pack'));
    }

    /**
     * Gets the 'elcodi.director.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_RuleService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.rule'] = new ElcodiComponentCoreServicesObjectDirector_000000000473814c0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_RuleService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.rule'), $this->get('elcodi.repository.rule'), $this->get('elcodi.factory.rule'));
    }

    /**
     * Gets the 'elcodi.director.shipping_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ShippingRangeService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.shipping_range'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739df60000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ShippingRangeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.shipping_range'), $this->get('elcodi.repository.shipping_range'), $this->get('elcodi_plugin.custom_shipping.factory.shipping_range'));
    }

    /**
     * Gets the 'elcodi.director.state_transition_machine_state_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_StateTransitionMachineStateLineService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.state_transition_machine_state_line'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739b610000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_StateTransitionMachineStateLineService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.state_transition_machine_state_line'), $this->get('elcodi.repository.state_transition_machine_state_line'), $this->get('elcodi.factory.state_transition_machine_state_line'));
    }

    /**
     * Gets the 'elcodi.director.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_StoreService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.store'] = new ElcodiComponentCoreServicesObjectDirector_00000000047384cf0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_StoreService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.store'), $this->get('elcodi.repository.store'), $this->get('elcodi.factory.store'));
    }

    /**
     * Gets the 'elcodi.director.tax' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_TaxService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.tax'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739a4b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_TaxService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.tax'), $this->get('elcodi.repository.tax'), $this->get('elcodi.factory.tax'));
    }

    /**
     * Gets the 'elcodi.director.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodi_Director_ZoneService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.director.zone'] = new ElcodiComponentCoreServicesObjectDirector_0000000004739a6b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Director_ZoneService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('elcodi.object_manager.zone'), $this->get('elcodi.repository.zone'), $this->get('elcodi.factory.zone'));
    }

    /**
     * Gets the 'elcodi.enabled_payment_plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_EnabledPaymentPluginsService()
    {
        return $this->services['elcodi.enabled_payment_plugins'] = $this->get('elcodi.repository.plugin')->findBy(array('enabled' => true, 'type' => 'plugin', 'category' => 'payment'));
    }

    /**
     * Gets the 'elcodi.enabled_plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_EnabledPluginsService()
    {
        return $this->services['elcodi.enabled_plugins'] = $this->get('elcodi.repository.plugin')->findBy(array('enabled' => true));
    }

    /**
     * Gets the 'elcodi.enabled_shipping_plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_EnabledShippingPluginsService()
    {
        return $this->services['elcodi.enabled_shipping_plugins'] = $this->get('elcodi.repository.plugin')->findBy(array('enabled' => true, 'type' => 'plugin', 'category' => 'shipping'));
    }

    /**
     * Gets the 'elcodi.entity_translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Services\EntityTranslator A Elcodi\Component\EntityTranslator\Services\EntityTranslator instance.
     */
    protected function getElcodi_EntityTranslatorService()
    {
        return $this->services['elcodi.entity_translator'] = $this->get('elcodi.entity_translator_builder')->compile();
    }

    /**
     * Gets the 'elcodi.entity_translator_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Services\EntityTranslatorBuilder A Elcodi\Component\EntityTranslator\Services\EntityTranslatorBuilder instance.
     */
    protected function getElcodi_EntityTranslatorBuilderService()
    {
        return $this->services['elcodi.entity_translator_builder'] = new \Elcodi\Component\EntityTranslator\Services\EntityTranslatorBuilder($this->get('elcodi.services.cached_entity_translation_provider'), $this->get('elcodi.factory.entity_translator'), array('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface' => array('alias' => 'carrier', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface' => array('alias' => 'purchasable', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription'), 'shortDescription' => array('getter' => 'getShortDescription', 'setter' => 'setShortDescription'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface' => array('alias' => 'category', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface' => array('alias' => 'manufacturer', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface' => array('alias' => 'page', 'fields' => array('title' => array('getter' => 'getTitle', 'setter' => 'setTitle'), 'content' => array('getter' => 'getContent', 'setter' => 'setContent'), 'path' => array('getter' => 'getPath', 'setter' => 'setPath'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId')), true);
    }

    /**
     * Gets the 'elcodi.entity_translator_changes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Services\EntityTranslationChangesBag A Elcodi\Component\EntityTranslator\Services\EntityTranslationChangesBag instance.
     */
    protected function getElcodi_EntityTranslatorChangesService()
    {
        return $this->services['elcodi.entity_translator_changes'] = new \Elcodi\Component\EntityTranslator\Services\EntityTranslationChangesBag();
    }

    /**
     * Gets the 'elcodi.event_dispatcher.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\EventDispatcher\AddressEventDispatcher A Elcodi\Component\Geo\EventDispatcher\AddressEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_AddressService()
    {
        return $this->services['elcodi.event_dispatcher.address'] = new \Elcodi\Component\Geo\EventDispatcher\AddressEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventDispatcher\CartEventDispatcher A Elcodi\Component\Cart\EventDispatcher\CartEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_CartService()
    {
        return $this->services['elcodi.event_dispatcher.cart'] = new \Elcodi\Component\Cart\EventDispatcher\CartEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventDispatcher\CartCouponEventDispatcher A Elcodi\Component\CartCoupon\EventDispatcher\CartCouponEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_CartCouponService()
    {
        return $this->services['elcodi.event_dispatcher.cart_coupon'] = new \Elcodi\Component\CartCoupon\EventDispatcher\CartCouponEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventDispatcher\CartLineEventDispatcher A Elcodi\Component\Cart\EventDispatcher\CartLineEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_CartLineService()
    {
        return $this->services['elcodi.event_dispatcher.cart_line'] = new \Elcodi\Component\Cart\EventDispatcher\CartLineEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\EventDispatcher\CommentEventDispatcher A Elcodi\Component\Comment\EventDispatcher\CommentEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_CommentService()
    {
        return $this->services['elcodi.event_dispatcher.comment'] = new \Elcodi\Component\Comment\EventDispatcher\CommentEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Coupon\EventDispatcher\CouponEventDispatcher A Elcodi\Component\Coupon\EventDispatcher\CouponEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_CouponService()
    {
        return $this->services['elcodi.event_dispatcher.coupon'] = new \Elcodi\Component\Coupon\EventDispatcher\CouponEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.entity_translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\EventDispatcher\EntityTranslatorEventDispatcher A Elcodi\Component\EntityTranslator\EventDispatcher\EntityTranslatorEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_EntityTranslatorService()
    {
        return $this->services['elcodi.event_dispatcher.entity_translator'] = new \Elcodi\Component\EntityTranslator\EventDispatcher\EntityTranslatorEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.hook_system' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\EventDispatcher\HookSystemEventDispatcher A Elcodi\Component\Plugin\EventDispatcher\HookSystemEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_HookSystemService()
    {
        return $this->services['elcodi.event_dispatcher.hook_system'] = new \Elcodi\Component\Plugin\EventDispatcher\HookSystemEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.machine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\EventDispatcher\MachineEventDispatcher A Elcodi\Component\StateTransitionMachine\EventDispatcher\MachineEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_MachineService()
    {
        return $this->services['elcodi.event_dispatcher.machine'] = new \Elcodi\Component\StateTransitionMachine\EventDispatcher\MachineEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.media' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\EventDispatcher\MediaEventDispatcher A Elcodi\Component\Media\EventDispatcher\MediaEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_MediaService()
    {
        return $this->services['elcodi.event_dispatcher.media'] = new \Elcodi\Component\Media\EventDispatcher\MediaEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.newsletter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Newsletter\EventDispatcher\NewsletterEventDispatcher A Elcodi\Component\Newsletter\EventDispatcher\NewsletterEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_NewsletterService()
    {
        return $this->services['elcodi.event_dispatcher.newsletter'] = new \Elcodi\Component\Newsletter\EventDispatcher\NewsletterEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventDispatcher\OrderEventDispatcher A Elcodi\Component\Cart\EventDispatcher\OrderEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_OrderService()
    {
        return $this->services['elcodi.event_dispatcher.order'] = new \Elcodi\Component\Cart\EventDispatcher\OrderEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventDispatcher\OrderCouponEventDispatcher A Elcodi\Component\CartCoupon\EventDispatcher\OrderCouponEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_OrderCouponService()
    {
        return $this->services['elcodi.event_dispatcher.order_coupon'] = new \Elcodi\Component\CartCoupon\EventDispatcher\OrderCouponEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventDispatcher\OrderLineEventDispatcher A Elcodi\Component\Cart\EventDispatcher\OrderLineEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_OrderLineService()
    {
        return $this->services['elcodi.event_dispatcher.order_line'] = new \Elcodi\Component\Cart\EventDispatcher\OrderLineEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventDispatcher\PasswordEventDispatcher A Elcodi\Component\User\EventDispatcher\PasswordEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_PasswordService()
    {
        return $this->services['elcodi.event_dispatcher.password'] = new \Elcodi\Component\User\EventDispatcher\PasswordEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.payment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Payment\EventDispatcher\PaymentEventDispatcher A Elcodi\Component\Payment\EventDispatcher\PaymentEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_PaymentService()
    {
        return $this->services['elcodi.event_dispatcher.payment'] = new \Elcodi\Component\Payment\EventDispatcher\PaymentEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.shipping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Shipping\EventDispatcher\ShippingEventDispatcher A Elcodi\Component\Shipping\EventDispatcher\ShippingEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_ShippingService()
    {
        return $this->services['elcodi.event_dispatcher.shipping'] = new \Elcodi\Component\Shipping\EventDispatcher\ShippingEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.sitemap' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\EventDispatcher\SitemapEventDispatcher A Elcodi\Component\Sitemap\EventDispatcher\SitemapEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_SitemapService()
    {
        return $this->services['elcodi.event_dispatcher.sitemap'] = new \Elcodi\Component\Sitemap\EventDispatcher\SitemapEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_dispatcher.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventDispatcher\UserEventDispatcher A Elcodi\Component\User\EventDispatcher\UserEventDispatcher instance.
     */
    protected function getElcodi_EventDispatcher_UserService()
    {
        return $this->services['elcodi.event_dispatcher.user'] = new \Elcodi\Component\User\EventDispatcher\UserEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi.event_listener.address_clone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\AddressCloneEventListener A Elcodi\Component\Cart\EventListener\AddressCloneEventListener instance.
     */
    protected function getElcodi_EventListener_AddressCloneService()
    {
        return $this->services['elcodi.event_listener.address_clone'] = new \Elcodi\Component\Cart\EventListener\AddressCloneEventListener($this->get('elcodi.repository.cart'), $this->get('elcodi.object_manager.cart'));
    }

    /**
     * Gets the 'elcodi.event_listener.admin_user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventListener\AdminUserPasswordEventListener A Elcodi\Component\User\EventListener\AdminUserPasswordEventListener instance.
     */
    protected function getElcodi_EventListener_AdminUserPasswordService()
    {
        return $this->services['elcodi.event_listener.admin_user_password'] = new \Elcodi\Component\User\EventListener\AdminUserPasswordEventListener($this->get('elcodi.provider.admin_user_provider'));
    }

    /**
     * Gets the 'elcodi.event_listener.comment_cache_invalidation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\EventListener\CommentCacheInvalidationEventListener A Elcodi\Component\Comment\EventListener\CommentCacheInvalidationEventListener instance.
     */
    protected function getElcodi_EventListener_CommentCacheInvalidationService()
    {
        return $this->services['elcodi.event_listener.comment_cache_invalidation'] = new \Elcodi\Component\Comment\EventListener\CommentCacheInvalidationEventListener($this->get('elcodi.comment_cache'));
    }

    /**
     * Gets the 'elcodi.event_listener.covert_cart_coupons_to_order_coupons' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ConvertCartCouponsToOrderCouponsEventListener A Elcodi\Component\CartCoupon\EventListener\ConvertCartCouponsToOrderCouponsEventListener instance.
     */
    protected function getElcodi_EventListener_CovertCartCouponsToOrderCouponsService()
    {
        return $this->services['elcodi.event_listener.covert_cart_coupons_to_order_coupons'] = new \Elcodi\Component\CartCoupon\EventListener\ConvertCartCouponsToOrderCouponsEventListener($this->get('elcodi.transformer.cart_coupon_to_order_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.create_and_save_cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\CreateAndSaveCartCouponEventListener A Elcodi\Component\CartCoupon\EventListener\CreateAndSaveCartCouponEventListener instance.
     */
    protected function getElcodi_EventListener_CreateAndSaveCartCouponService()
    {
        return $this->services['elcodi.event_listener.create_and_save_cart_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\CreateAndSaveCartCouponEventListener($this->get('elcodi.manager.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.create_order_coupon_by_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\CreateOrderCouponByCouponEventListener A Elcodi\Component\CartCoupon\EventListener\CreateOrderCouponByCouponEventListener instance.
     */
    protected function getElcodi_EventListener_CreateOrderCouponByCouponService()
    {
        return $this->services['elcodi.event_listener.create_order_coupon_by_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\CreateOrderCouponByCouponEventListener($this->get('elcodi.transformer.coupon_to_order_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.customer_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventListener\CustomerPasswordEventListener A Elcodi\Component\User\EventListener\CustomerPasswordEventListener instance.
     */
    protected function getElcodi_EventListener_CustomerPasswordService()
    {
        return $this->services['elcodi.event_listener.customer_password'] = new \Elcodi\Component\User\EventListener\CustomerPasswordEventListener($this->get('elcodi.provider.customer_provider'));
    }

    /**
     * Gets the 'elcodi.event_listener.entity_translator_entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorEntityEventListener A Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorEntityEventListener instance.
     */
    public function getElcodi_EventListener_EntityTranslatorEntityService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.event_listener.entity_translator_entity'] = new ElcodiComponentEntityTranslatorEventListenerEntityTranslatorEntityEventListener_00000000047399ed0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_EventListener_EntityTranslatorEntityService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorEntityEventListener($this, $this->get('elcodi.locale'));
    }

    /**
     * Gets the 'elcodi.event_listener.entity_translator_form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorFormEventListener A Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorFormEventListener instance.
     */
    protected function getElcodi_EventListener_EntityTranslatorFormService()
    {
        return $this->services['elcodi.event_listener.entity_translator_form'] = new \Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorFormEventListener($this->get('elcodi.services.cached_entity_translation_provider'), array('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface' => array('alias' => 'carrier', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface' => array('alias' => 'purchasable', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription'), 'shortDescription' => array('getter' => 'getShortDescription', 'setter' => 'setShortDescription'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface' => array('alias' => 'category', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface' => array('alias' => 'manufacturer', 'fields' => array('name' => array('getter' => 'getName', 'setter' => 'setName'), 'slug' => array('getter' => 'getSlug', 'setter' => 'setSlug'), 'description' => array('getter' => 'getDescription', 'setter' => 'setDescription'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId'), 'Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface' => array('alias' => 'page', 'fields' => array('title' => array('getter' => 'getTitle', 'setter' => 'setTitle'), 'content' => array('getter' => 'getContent', 'setter' => 'setContent'), 'path' => array('getter' => 'getPath', 'setter' => 'setPath'), 'metaTitle' => array('getter' => 'getMetaTitle', 'setter' => 'setMetaTitle'), 'metaDescription' => array('getter' => 'getMetaDescription', 'setter' => 'setMetaDescription'), 'metaKeywords' => array('getter' => 'getMetaKeywords', 'setter' => 'setMetaKeywords')), 'idGetter' => 'getId')), $this->get('elcodi.languages_iso_array'), 'en', true, $this->get('elcodi.entity_translator_changes'));
    }

    /**
     * Gets the 'elcodi.event_listener.fix_category_integrity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\EventListener\CategoryIntegrityEventListener A Elcodi\Component\Product\EventListener\CategoryIntegrityEventListener instance.
     */
    protected function getElcodi_EventListener_FixCategoryIntegrityService()
    {
        return $this->services['elcodi.event_listener.fix_category_integrity'] = new \Elcodi\Component\Product\EventListener\CategoryIntegrityEventListener($this->get('elcodi.service.category_integrity_fixer'));
    }

    /**
     * Gets the 'elcodi.event_listener.load_cart_coupon_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\LoadCartCouponAmountEventListener A Elcodi\Component\CartCoupon\EventListener\LoadCartCouponAmountEventListener instance.
     */
    protected function getElcodi_EventListener_LoadCartCouponAmountService()
    {
        return $this->services['elcodi.event_listener.load_cart_coupon_amount'] = new \Elcodi\Component\CartCoupon\EventListener\LoadCartCouponAmountEventListener($this->get('elcodi.loader.cart_coupon_prices'));
    }

    /**
     * Gets the 'elcodi.event_listener.load_cart_prices' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\LoadCartPricesEventListener A Elcodi\Component\Cart\EventListener\LoadCartPricesEventListener instance.
     */
    protected function getElcodi_EventListener_LoadCartPricesService()
    {
        return $this->services['elcodi.event_listener.load_cart_prices'] = new \Elcodi\Component\Cart\EventListener\LoadCartPricesEventListener($this->get('elcodi.loader.cart_prices'));
    }

    /**
     * Gets the 'elcodi.event_listener.load_cart_shipping_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartShipping\EventListener\LoadCartShippingAmountEventListener A Elcodi\Component\CartShipping\EventListener\LoadCartShippingAmountEventListener instance.
     */
    protected function getElcodi_EventListener_LoadCartShippingAmountService()
    {
        return $this->services['elcodi.event_listener.load_cart_shipping_amount'] = new \Elcodi\Component\CartShipping\EventListener\LoadCartShippingAmountEventListener($this->get('elcodi.loader.cart_shipping_amount'));
    }

    /**
     * Gets the 'elcodi.event_listener.load_order_shipping_method' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartShipping\EventListener\LoadOrderShippingMethodEventListener A Elcodi\Component\CartShipping\EventListener\LoadOrderShippingMethodEventListener instance.
     */
    protected function getElcodi_EventListener_LoadOrderShippingMethodService()
    {
        return $this->services['elcodi.event_listener.load_order_shipping_method'] = new \Elcodi\Component\CartShipping\EventListener\LoadOrderShippingMethodEventListener($this->get('elcodi.loader.order_shipping_method'));
    }

    /**
     * Gets the 'elcodi.event_listener.make_coupon_used' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Coupon\EventListener\MakeCouponUsedEventListener A Elcodi\Component\Coupon\EventListener\MakeCouponUsedEventListener instance.
     */
    protected function getElcodi_EventListener_MakeCouponUsedService()
    {
        return $this->services['elcodi.event_listener.make_coupon_used'] = new \Elcodi\Component\Coupon\EventListener\MakeCouponUsedEventListener($this->get('elcodi.object_manager.coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.newsletter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Newsletter\EventListener\NewsletterEventListener A Elcodi\Component\Newsletter\EventListener\NewsletterEventListener instance.
     */
    protected function getElcodi_EventListener_NewsletterService()
    {
        return $this->services['elcodi.event_listener.newsletter'] = new \Elcodi\Component\Newsletter\EventListener\NewsletterEventListener($this->get('elcodi.object_manager.newsletter_subscription'));
    }

    /**
     * Gets the 'elcodi.event_listener.order_creation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\OrderCreationEventListener A Elcodi\Component\Cart\EventListener\OrderCreationEventListener instance.
     */
    protected function getElcodi_EventListener_OrderCreationService()
    {
        return $this->services['elcodi.event_listener.order_creation'] = new \Elcodi\Component\Cart\EventListener\OrderCreationEventListener($this->get('elcodi.object_manager.order'), $this->get('elcodi.object_manager.cart'));
    }

    /**
     * Gets the 'elcodi.event_listener.referrer_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\EventListener\ReferrerSessionEventListener A Elcodi\Component\Core\EventListener\ReferrerSessionEventListener instance.
     */
    protected function getElcodi_EventListener_ReferrerSessionService()
    {
        return $this->services['elcodi.event_listener.referrer_session'] = new \Elcodi\Component\Core\EventListener\ReferrerSessionEventListener();
    }

    /**
     * Gets the 'elcodi.event_listener.remove_cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\RemoveCartCouponEventListener A Elcodi\Component\CartCoupon\EventListener\RemoveCartCouponEventListener instance.
     */
    protected function getElcodi_EventListener_RemoveCartCouponService()
    {
        return $this->services['elcodi.event_listener.remove_cart_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\RemoveCartCouponEventListener($this->get('elcodi.manager.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.root_category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\EventListener\RootCategoryEventListener A Elcodi\Component\Product\EventListener\RootCategoryEventListener instance.
     */
    protected function getElcodi_EventListener_RootCategoryService()
    {
        return $this->services['elcodi.event_listener.root_category'] = new \Elcodi\Component\Product\EventListener\RootCategoryEventListener();
    }

    /**
     * Gets the 'elcodi.event_listener.save_cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\SaveCartEventListener A Elcodi\Component\Cart\EventListener\SaveCartEventListener instance.
     */
    protected function getElcodi_EventListener_SaveCartService()
    {
        return $this->services['elcodi.event_listener.save_cart'] = new \Elcodi\Component\Cart\EventListener\SaveCartEventListener($this->get('elcodi.cart_saver'));
    }

    /**
     * Gets the 'elcodi.event_listener.save_cart_to_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\SaveCartToSessionEventListener A Elcodi\Component\Cart\EventListener\SaveCartToSessionEventListener instance.
     */
    protected function getElcodi_EventListener_SaveCartToSessionService()
    {
        return $this->services['elcodi.event_listener.save_cart_to_session'] = new \Elcodi\Component\Cart\EventListener\SaveCartToSessionEventListener($this->get('elcodi.session_manager.cart'));
    }

    /**
     * Gets the 'elcodi.event_listener.try_automatic_coupons_application' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\TryAutomaticCouponsApplicationEventListener A Elcodi\Component\CartCoupon\EventListener\TryAutomaticCouponsApplicationEventListener instance.
     */
    protected function getElcodi_EventListener_TryAutomaticCouponsApplicationService()
    {
        return $this->services['elcodi.event_listener.try_automatic_coupons_application'] = new \Elcodi\Component\CartCoupon\EventListener\TryAutomaticCouponsApplicationEventListener($this->get('elcodi.applicator.automatic_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.update_cart_after_coupon_change' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\CartUpdateAfterCouponChangeEventListener A Elcodi\Component\CartCoupon\EventListener\CartUpdateAfterCouponChangeEventListener instance.
     */
    protected function getElcodi_EventListener_UpdateCartAfterCouponChangeService()
    {
        return $this->services['elcodi.event_listener.update_cart_after_coupon_change'] = new \Elcodi\Component\CartCoupon\EventListener\CartUpdateAfterCouponChangeEventListener($this->get('elcodi.event_dispatcher.cart'));
    }

    /**
     * Gets the 'elcodi.event_listener.update_cart_with_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventListener\UpdateCartWithUserListener A Elcodi\Component\User\EventListener\UpdateCartWithUserListener instance.
     */
    protected function getElcodi_EventListener_UpdateCartWithUserService()
    {
        return $this->services['elcodi.event_listener.update_cart_with_user'] = new \Elcodi\Component\User\EventListener\UpdateCartWithUserListener($this->get('elcodi.wrapper.cart'), $this->get('elcodi.object_manager.cart'));
    }

    /**
     * Gets the 'elcodi.event_listener.update_last_login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventListener\UpdateLastLoginEventListener A Elcodi\Component\User\EventListener\UpdateLastLoginEventListener instance.
     */
    protected function getElcodi_EventListener_UpdateLastLoginService()
    {
        return $this->services['elcodi.event_listener.update_last_login'] = new \Elcodi\Component\User\EventListener\UpdateLastLoginEventListener($this->get('elcodi.provider.manager'), $this->get('elcodi.factory.datetime'));
    }

    /**
     * Gets the 'elcodi.event_listener.update_stock_by_cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\UpdateStockByCartLineEventListener A Elcodi\Component\Cart\EventListener\UpdateStockByCartLineEventListener instance.
     */
    protected function getElcodi_EventListener_UpdateStockByCartLineService()
    {
        return $this->services['elcodi.event_listener.update_stock_by_cart_line'] = new \Elcodi\Component\Cart\EventListener\UpdateStockByCartLineEventListener($this->get('elcodi.updater.cart_line_stock'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_cart_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\ValidateCartAmountEventListener A Elcodi\Component\Cart\EventListener\ValidateCartAmountEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCartAmountService()
    {
        return $this->services['elcodi.event_listener.validate_cart_amount'] = new \Elcodi\Component\Cart\EventListener\ValidateCartAmountEventListener($this->get('elcodi.validator.cart_amount'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCartCouponEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCartCouponEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCartCouponService()
    {
        return $this->services['elcodi.event_listener.validate_cart_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCartCouponEventListener($this->get('elcodi.event_dispatcher.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_cart_integrity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\ValidateCartIntegrityEventListener A Elcodi\Component\Cart\EventListener\ValidateCartIntegrityEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCartIntegrityService()
    {
        return $this->services['elcodi.event_listener.validate_cart_integrity'] = new \Elcodi\Component\Cart\EventListener\ValidateCartIntegrityEventListener($this->get('elcodi.validator.cart_integrity'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCouponEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCouponEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCouponService()
    {
        return $this->services['elcodi.event_listener.validate_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCouponEventListener($this->get('elcodi.validator.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_coupon_duplication' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCouponDuplicationEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCouponDuplicationEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCouponDuplicationService()
    {
        return $this->services['elcodi.event_listener.validate_coupon_duplication'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCouponDuplicationEventListener($this->get('elcodi.validator.duplicated_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_coupon_minimum_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCouponMinimumPriceEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCouponMinimumPriceEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCouponMinimumPriceService()
    {
        return $this->services['elcodi.event_listener.validate_coupon_minimum_price'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCouponMinimumPriceEventListener($this->get('elcodi.validator.cart_coupon_minimum_price'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_coupon_rules' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCouponRulesEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCouponRulesEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCouponRulesService()
    {
        return $this->services['elcodi.event_listener.validate_coupon_rules'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCouponRulesEventListener($this->get('elcodi.validator.cart_coupon_rule'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_coupons_from_cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateCouponsFromCartEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateCouponsFromCartEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateCouponsFromCartService()
    {
        return $this->services['elcodi.event_listener.validate_coupons_from_cart'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateCouponsFromCartEventListener($this->get('elcodi.validator.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_empty_shipping_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\EventListener\ValidateEmptyShippingAmountEventListener A Elcodi\Component\Cart\EventListener\ValidateEmptyShippingAmountEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateEmptyShippingAmountService()
    {
        return $this->services['elcodi.event_listener.validate_empty_shipping_amount'] = new \Elcodi\Component\Cart\EventListener\ValidateEmptyShippingAmountEventListener($this->get('elcodi.validator.cart_shipping_method'));
    }

    /**
     * Gets the 'elcodi.event_listener.validate_stackable_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\EventListener\ValidateStackableCouponsEventListener A Elcodi\Component\CartCoupon\EventListener\ValidateStackableCouponsEventListener instance.
     */
    protected function getElcodi_EventListener_ValidateStackableCouponService()
    {
        return $this->services['elcodi.event_listener.validate_stackable_coupon'] = new \Elcodi\Component\CartCoupon\EventListener\ValidateStackableCouponsEventListener($this->get('elcodi.validator.stackable_coupon'));
    }

    /**
     * Gets the 'elcodi.expression_language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage A Symfony\Component\ExpressionLanguage\ExpressionLanguage instance.
     */
    protected function getElcodi_ExpressionLanguageService()
    {
        $this->services['elcodi.expression_language'] = $instance = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();

        $instance->registerProvider($this->get('elcodi.expression_language_container_provider'));
        $instance->registerProvider($this->get('elcodi.expression_language_rule_provider'));
        $instance->registerProvider($this->get('elcodi.expression_language.money_provider'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.expression_language.money_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\ExpressionLanguage\MoneyProvider A Elcodi\Component\Currency\ExpressionLanguage\MoneyProvider instance.
     */
    protected function getElcodi_ExpressionLanguage_MoneyProviderService()
    {
        return $this->services['elcodi.expression_language.money_provider'] = new \Elcodi\Component\Currency\ExpressionLanguage\MoneyProvider($this->get('elcodi.wrapper.default_currency'), $this->get('elcodi.repository.currency'));
    }

    /**
     * Gets the 'elcodi.expression_language_container_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Rule\ExpressionLanguage\Provider\ContainerProvider A Elcodi\Component\Rule\ExpressionLanguage\Provider\ContainerProvider instance.
     */
    protected function getElcodi_ExpressionLanguageContainerProviderService()
    {
        return $this->services['elcodi.expression_language_container_provider'] = new \Elcodi\Component\Rule\ExpressionLanguage\Provider\ContainerProvider($this);
    }

    /**
     * Gets the 'elcodi.expression_language_context_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Rule\ExpressionLanguage\Context\ContextCollector A Elcodi\Component\Rule\ExpressionLanguage\Context\ContextCollector instance.
     */
    protected function getElcodi_ExpressionLanguageContextCollectorService()
    {
        return $this->services['elcodi.expression_language_context_collector'] = new \Elcodi\Component\Rule\ExpressionLanguage\Context\ContextCollector(array());
    }

    /**
     * Gets the 'elcodi.expression_language_rule_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Rule\ExpressionLanguage\Provider\RuleProvider A Elcodi\Component\Rule\ExpressionLanguage\Provider\RuleProvider instance.
     */
    protected function getElcodi_ExpressionLanguageRuleProviderService()
    {
        return $this->services['elcodi.expression_language_rule_provider'] = new \Elcodi\Component\Rule\ExpressionLanguage\Provider\RuleProvider($this->get('elcodi.repository.rule'), $this->get('elcodi.manager.rule'));
    }

    /**
     * Gets the 'elcodi.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\Extractor\Extractor A Mmoreram\Extractor\Extractor instance.
     */
    protected function getElcodi_ExtractorService()
    {
        return $this->services['elcodi.extractor'] = new \Mmoreram\Extractor\Extractor(new \Mmoreram\Extractor\Filesystem\TemporaryDirectory(), new \Mmoreram\Extractor\Resolver\ExtensionResolver());
    }

    /**
     * Gets the 'elcodi.factory.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Factory\AddressFactory A Elcodi\Component\Geo\Factory\AddressFactory instance.
     */
    protected function getElcodi_Factory_AddressService()
    {
        $this->services['elcodi.factory.address'] = $instance = new \Elcodi\Component\Geo\Factory\AddressFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Address');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.address_view' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Factory\AddressViewFactory A Elcodi\Component\Geo\Factory\AddressViewFactory instance.
     */
    protected function getElcodi_Factory_AddressViewService()
    {
        return $this->services['elcodi.factory.address_view'] = new \Elcodi\Component\Geo\Factory\AddressViewFactory($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi.factory.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Factory\AdminUserFactory A Elcodi\Component\User\Factory\AdminUserFactory instance.
     */
    protected function getElcodi_Factory_AdminUserService()
    {
        $this->services['elcodi.factory.admin_user'] = $instance = new \Elcodi\Component\User\Factory\AdminUserFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\User\\Entity\\AdminUser');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));
        $instance->setGenerator($this->get('elcodi.generator.random_string'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Attribute\Factory\AttributeFactory A Elcodi\Component\Attribute\Factory\AttributeFactory instance.
     */
    protected function getElcodi_Factory_AttributeService()
    {
        $this->services['elcodi.factory.attribute'] = $instance = new \Elcodi\Component\Attribute\Factory\AttributeFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Attribute');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Attribute\Factory\ValueFactory A Elcodi\Component\Attribute\Factory\ValueFactory instance.
     */
    protected function getElcodi_Factory_AttributeValueService()
    {
        $this->services['elcodi.factory.attribute_value'] = $instance = new \Elcodi\Component\Attribute\Factory\ValueFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Value');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Banner\Factory\BannerFactory A Elcodi\Component\Banner\Factory\BannerFactory instance.
     */
    protected function getElcodi_Factory_BannerService()
    {
        $this->services['elcodi.factory.banner'] = $instance = new \Elcodi\Component\Banner\Factory\BannerFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Banner\\Entity\\Banner');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.banner_zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Banner\Factory\BannerZoneFactory A Elcodi\Component\Banner\Factory\BannerZoneFactory instance.
     */
    protected function getElcodi_Factory_BannerZoneService()
    {
        $this->services['elcodi.factory.banner_zone'] = $instance = new \Elcodi\Component\Banner\Factory\BannerZoneFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Banner\\Entity\\BannerZone');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Factory\CartFactory A Elcodi\Component\Cart\Factory\CartFactory instance.
     */
    protected function getElcodi_Factory_CartService()
    {
        $this->services['elcodi.factory.cart'] = $instance = new \Elcodi\Component\Cart\Factory\CartFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Cart');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Factory\CartCouponFactory A Elcodi\Component\CartCoupon\Factory\CartCouponFactory instance.
     */
    protected function getElcodi_Factory_CartCouponService()
    {
        $this->services['elcodi.factory.cart_coupon'] = $instance = new \Elcodi\Component\CartCoupon\Factory\CartCouponFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Factory\CartLineFactory A Elcodi\Component\Cart\Factory\CartLineFactory instance.
     */
    protected function getElcodi_Factory_CartLineService()
    {
        $this->services['elcodi.factory.cart_line'] = $instance = new \Elcodi\Component\Cart\Factory\CartLineFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Cart\\Entity\\CartLine');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Factory\CategoryFactory A Elcodi\Component\Product\Factory\CategoryFactory instance.
     */
    protected function getElcodi_Factory_CategoryService()
    {
        $this->services['elcodi.factory.category'] = $instance = new \Elcodi\Component\Product\Factory\CategoryFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Product\\Entity\\Category');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Factory\CommentFactory A Elcodi\Component\Comment\Factory\CommentFactory instance.
     */
    protected function getElcodi_Factory_CommentService()
    {
        $this->services['elcodi.factory.comment'] = $instance = new \Elcodi\Component\Comment\Factory\CommentFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Comment');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.comment_vote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Factory\VoteFactory A Elcodi\Component\Comment\Factory\VoteFactory instance.
     */
    protected function getElcodi_Factory_CommentVoteService()
    {
        $this->services['elcodi.factory.comment_vote'] = $instance = new \Elcodi\Component\Comment\Factory\VoteFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Vote');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Coupon\Factory\CouponFactory A Elcodi\Component\Coupon\Factory\CouponFactory instance.
     */
    protected function getElcodi_Factory_CouponService()
    {
        $this->services['elcodi.factory.coupon'] = $instance = new \Elcodi\Component\Coupon\Factory\CouponFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Coupon\\Entity\\Coupon');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Factory\CurrencyFactory A Elcodi\Component\Currency\Factory\CurrencyFactory instance.
     */
    protected function getElcodi_Factory_CurrencyService()
    {
        $this->services['elcodi.factory.currency'] = $instance = new \Elcodi\Component\Currency\Factory\CurrencyFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Currency\\Entity\\Currency');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.currency_exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Factory\CurrencyExchangeRateFactory A Elcodi\Component\Currency\Factory\CurrencyExchangeRateFactory instance.
     */
    protected function getElcodi_Factory_CurrencyExchangeRateService()
    {
        $this->services['elcodi.factory.currency_exchange_rate'] = $instance = new \Elcodi\Component\Currency\Factory\CurrencyExchangeRateFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Factory\CustomerFactory A Elcodi\Component\User\Factory\CustomerFactory instance.
     */
    protected function getElcodi_Factory_CustomerService()
    {
        $this->services['elcodi.factory.customer'] = $instance = new \Elcodi\Component\User\Factory\CustomerFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\User\\Entity\\Customer');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));
        $instance->setGenerator($this->get('elcodi.generator.random_string'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Factory\DateTimeFactory A Elcodi\Component\Core\Factory\DateTimeFactory instance.
     */
    protected function getElcodi_Factory_DatetimeService()
    {
        return $this->services['elcodi.factory.datetime'] = new \Elcodi\Component\Core\Factory\DateTimeFactory();
    }

    /**
     * Gets the 'elcodi.factory.entity_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Factory\EntityTranslationFactory A Elcodi\Component\EntityTranslator\Factory\EntityTranslationFactory instance.
     */
    protected function getElcodi_Factory_EntityTranslationService()
    {
        $this->services['elcodi.factory.entity_translation'] = $instance = new \Elcodi\Component\EntityTranslator\Factory\EntityTranslationFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.entity_translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Factory\EntityTranslatorFactory A Elcodi\Component\EntityTranslator\Factory\EntityTranslatorFactory instance.
     */
    protected function getElcodi_Factory_EntityTranslatorService()
    {
        $this->services['elcodi.factory.entity_translator'] = $instance = new \Elcodi\Component\EntityTranslator\Factory\EntityTranslatorFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\EntityTranslator\\Services\\EntityTranslator');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Factory\ImageFactory A Elcodi\Component\Media\Factory\ImageFactory instance.
     */
    protected function getElcodi_Factory_ImageService()
    {
        $this->services['elcodi.factory.image'] = $instance = new \Elcodi\Component\Media\Factory\ImageFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Media\\Entity\\Image');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Factory\LanguageFactory A Elcodi\Component\Language\Factory\LanguageFactory instance.
     */
    protected function getElcodi_Factory_LanguageService()
    {
        $this->services['elcodi.factory.language'] = $instance = new \Elcodi\Component\Language\Factory\LanguageFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Language\\Entity\\Language');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Factory\LocationFactory A Elcodi\Component\Geo\Factory\LocationFactory instance.
     */
    protected function getElcodi_Factory_LocationService()
    {
        $this->services['elcodi.factory.location'] = $instance = new \Elcodi\Component\Geo\Factory\LocationFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Location');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.location_data' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Factory\LocationDataFactory A Elcodi\Component\Geo\Factory\LocationDataFactory instance.
     */
    protected function getElcodi_Factory_LocationDataService()
    {
        return $this->services['elcodi.factory.location_data'] = new \Elcodi\Component\Geo\Factory\LocationDataFactory();
    }

    /**
     * Gets the 'elcodi.factory.manufacturer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Factory\ManufacturerFactory A Elcodi\Component\Product\Factory\ManufacturerFactory instance.
     */
    protected function getElcodi_Factory_ManufacturerService()
    {
        $this->services['elcodi.factory.manufacturer'] = $instance = new \Elcodi\Component\Product\Factory\ManufacturerFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Product\\Entity\\Manufacturer');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Factory\MenuFactory A Elcodi\Component\Menu\Factory\MenuFactory instance.
     */
    protected function getElcodi_Factory_MenuService()
    {
        $this->services['elcodi.factory.menu'] = $instance = new \Elcodi\Component\Menu\Factory\MenuFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Menu');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.menu_node' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Factory\NodeFactory A Elcodi\Component\Menu\Factory\NodeFactory instance.
     */
    protected function getElcodi_Factory_MenuNodeService()
    {
        $this->services['elcodi.factory.menu_node'] = $instance = new \Elcodi\Component\Menu\Factory\NodeFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Node');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.metric_entry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Metric\Core\Factory\EntryFactory A Elcodi\Component\Metric\Core\Factory\EntryFactory instance.
     */
    protected function getElcodi_Factory_MetricEntryService()
    {
        return $this->services['elcodi.factory.metric_entry'] = new \Elcodi\Component\Metric\Core\Factory\EntryFactory();
    }

    /**
     * Gets the 'elcodi.factory.newsletter_subscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Newsletter\Factory\NewsletterSubscriptionFactory A Elcodi\Component\Newsletter\Factory\NewsletterSubscriptionFactory instance.
     */
    protected function getElcodi_Factory_NewsletterSubscriptionService()
    {
        $this->services['elcodi.factory.newsletter_subscription'] = $instance = new \Elcodi\Component\Newsletter\Factory\NewsletterSubscriptionFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Factory\OrderFactory A Elcodi\Component\Cart\Factory\OrderFactory instance.
     */
    protected function getElcodi_Factory_OrderService()
    {
        $this->services['elcodi.factory.order'] = $instance = new \Elcodi\Component\Cart\Factory\OrderFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setPaymentMachineManager($this->get('elcodi.order_payment_states_machine_manager'));
        $instance->setShippingMachineManager($this->get('elcodi.order_shipping_states_machine_manager'));
        $instance->setEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Order');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Factory\OrderCouponFactory A Elcodi\Component\CartCoupon\Factory\OrderCouponFactory instance.
     */
    protected function getElcodi_Factory_OrderCouponService()
    {
        $this->services['elcodi.factory.order_coupon'] = $instance = new \Elcodi\Component\CartCoupon\Factory\OrderCouponFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Factory\OrderLineFactory A Elcodi\Component\Cart\Factory\OrderLineFactory instance.
     */
    protected function getElcodi_Factory_OrderLineService()
    {
        $this->services['elcodi.factory.order_line'] = $instance = new \Elcodi\Component\Cart\Factory\OrderLineFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Cart\\Entity\\OrderLine');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Page\Factory\PageFactory A Elcodi\Component\Page\Factory\PageFactory instance.
     */
    protected function getElcodi_Factory_PageService()
    {
        $this->services['elcodi.factory.page'] = $instance = new \Elcodi\Component\Page\Factory\PageFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Page\\Entity\\Page');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Factory\ProductFactory A Elcodi\Component\Product\Factory\ProductFactory instance.
     */
    protected function getElcodi_Factory_ProductService()
    {
        $this->services['elcodi.factory.product'] = $instance = new \Elcodi\Component\Product\Factory\ProductFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Product\\Entity\\Product');
        $instance->setUseStock($this->get('elcodi.store_uses_stock'));
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Factory\VariantFactory A Elcodi\Component\Product\Factory\VariantFactory instance.
     */
    protected function getElcodi_Factory_ProductVariantService()
    {
        $this->services['elcodi.factory.product_variant'] = $instance = new \Elcodi\Component\Product\Factory\VariantFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Product\\Entity\\Variant');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Factory\PackFactory A Elcodi\Component\Product\Factory\PackFactory instance.
     */
    protected function getElcodi_Factory_PurchasablePackService()
    {
        $this->services['elcodi.factory.purchasable_pack'] = $instance = new \Elcodi\Component\Product\Factory\PackFactory($this->get('elcodi.wrapper.empty_money'));

        $instance->setEntityNamespace('Elcodi\\Component\\Product\\Entity\\Pack');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Rule\Factory\RuleFactory A Elcodi\Component\Rule\Factory\RuleFactory instance.
     */
    protected function getElcodi_Factory_RuleService()
    {
        $this->services['elcodi.factory.rule'] = $instance = new \Elcodi\Component\Rule\Factory\RuleFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Rule\\Entity\\Rule');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.sitemap_element' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Factory\SitemapElementFactory A Elcodi\Component\Sitemap\Factory\SitemapElementFactory instance.
     */
    protected function getElcodi_Factory_SitemapElementService()
    {
        return $this->services['elcodi.factory.sitemap_element'] = new \Elcodi\Component\Sitemap\Factory\SitemapElementFactory();
    }

    /**
     * Gets the 'elcodi.factory.state_transition_machine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Factory\MachineFactory A Elcodi\Component\StateTransitionMachine\Factory\MachineFactory instance.
     */
    protected function getElcodi_Factory_StateTransitionMachineService()
    {
        return $this->services['elcodi.factory.state_transition_machine'] = new \Elcodi\Component\StateTransitionMachine\Factory\MachineFactory();
    }

    /**
     * Gets the 'elcodi.factory.state_transition_machine_state_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Factory\StateLineFactory A Elcodi\Component\StateTransitionMachine\Factory\StateLineFactory instance.
     */
    protected function getElcodi_Factory_StateTransitionMachineStateLineService()
    {
        $this->services['elcodi.factory.state_transition_machine_state_line'] = $instance = new \Elcodi\Component\StateTransitionMachine\Factory\StateLineFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Store\Factory\StoreFactory A Elcodi\Component\Store\Factory\StoreFactory instance.
     */
    protected function getElcodi_Factory_StoreService()
    {
        $this->services['elcodi.factory.store'] = $instance = new \Elcodi\Component\Store\Factory\StoreFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Store\\Entity\\Store');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.tax' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Tax\Factory\TaxFactory A Elcodi\Component\Tax\Factory\TaxFactory instance.
     */
    protected function getElcodi_Factory_TaxService()
    {
        $this->services['elcodi.factory.tax'] = $instance = new \Elcodi\Component\Tax\Factory\TaxFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Tax\\Entity\\Tax');

        return $instance;
    }

    /**
     * Gets the 'elcodi.factory.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Zone\Factory\ZoneFactory A Elcodi\Component\Zone\Factory\ZoneFactory instance.
     */
    protected function getElcodi_Factory_ZoneService()
    {
        $this->services['elcodi.factory.zone'] = $instance = new \Elcodi\Component\Zone\Factory\ZoneFactory();

        $instance->setEntityNamespace('Elcodi\\Component\\Zone\\Entity\\Zone');
        $instance->setDateTimeFactory($this->get('elcodi.factory.datetime'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.finder.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Zone\Services\ZoneFinder A Elcodi\Component\Zone\Services\ZoneFinder instance.
     */
    protected function getElcodi_Finder_ZoneService()
    {
        return $this->services['elcodi.finder.zone'] = new \Elcodi\Component\Zone\Services\ZoneFinder($this->get('elcodi.repository.zone'), $this->get('elcodi.matcher.zone'));
    }

    /**
     * Gets the 'elcodi.form_type.plugin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Form\Type\PluginType A Elcodi\Component\Plugin\Form\Type\PluginType instance.
     */
    protected function getElcodi_FormType_PluginService()
    {
        return $this->services['elcodi.form_type.plugin'] = new \Elcodi\Component\Plugin\Form\Type\PluginType();
    }

    /**
     * Gets the 'elcodi.formatter.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Formatter\AddressFormatter A Elcodi\Component\Geo\Formatter\AddressFormatter instance.
     */
    protected function getElcodi_Formatter_AddressService()
    {
        return $this->services['elcodi.formatter.address'] = new \Elcodi\Component\Geo\Formatter\AddressFormatter($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi.generator.random_string' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Generator\RandomGenerator A Elcodi\Component\Core\Generator\RandomGenerator instance.
     */
    protected function getElcodi_Generator_RandomStringService()
    {
        return $this->services['elcodi.generator.random_string'] = new \Elcodi\Component\Core\Generator\RandomGenerator();
    }

    /**
     * Gets the 'elcodi.generator.sha1' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Generator\Sha1Generator A Elcodi\Component\Core\Generator\Sha1Generator instance.
     */
    protected function getElcodi_Generator_Sha1Service()
    {
        return $this->services['elcodi.generator.sha1'] = new \Elcodi\Component\Core\Generator\Sha1Generator($this->get('elcodi.generator.random_string'));
    }

    /**
     * Gets the 'elcodi.generator.uniqid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Generator\UniqIdGenerator A Elcodi\Component\Core\Generator\UniqIdGenerator instance.
     */
    protected function getElcodi_Generator_UniqidService()
    {
        return $this->services['elcodi.generator.uniqid'] = new \Elcodi\Component\Core\Generator\UniqIdGenerator();
    }

    /**
     * Gets the 'elcodi.guzzle_client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \GuzzleHttp\Client A GuzzleHttp\Client instance.
     */
    protected function getElcodi_GuzzleClientService()
    {
        return $this->services['elcodi.guzzle_client'] = new \GuzzleHttp\Client();
    }

    /**
     * Gets the 'elcodi.image_resolver.abstract_product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\ImageResolver\Abstracts\AbstractImageResolver A Elcodi\Component\Product\ImageResolver\Abstracts\AbstractImageResolver instance.
     */
    protected function getElcodi_ImageResolver_AbstractProductService()
    {
        return $this->services['elcodi.image_resolver.abstract_product'] = new \Elcodi\Component\Product\ImageResolver\Abstracts\AbstractImageResolver($this->get('elcodi.resolver.image'));
    }

    /**
     * Gets the 'elcodi.image_resolver.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\ImageResolver\ProductImageResolver A Elcodi\Component\Product\ImageResolver\ProductImageResolver instance.
     */
    protected function getElcodi_ImageResolver_ProductService()
    {
        return $this->services['elcodi.image_resolver.product'] = new \Elcodi\Component\Product\ImageResolver\ProductImageResolver($this->get('elcodi.resolver.image'));
    }

    /**
     * Gets the 'elcodi.image_resolver.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\ImageResolver\VariantImageResolver A Elcodi\Component\Product\ImageResolver\VariantImageResolver instance.
     */
    protected function getElcodi_ImageResolver_ProductVariantService()
    {
        $this->services['elcodi.image_resolver.product_variant'] = $instance = new \Elcodi\Component\Product\ImageResolver\VariantImageResolver($this->get('elcodi.resolver.image'));

        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.product'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.image_resolver.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\ImageResolver\PurchasableImageResolver A Elcodi\Component\Product\ImageResolver\PurchasableImageResolver instance.
     */
    protected function getElcodi_ImageResolver_PurchasableService()
    {
        $this->services['elcodi.image_resolver.purchasable'] = $instance = new \Elcodi\Component\Product\ImageResolver\PurchasableImageResolver();

        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.product'));
        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.product_variant'));
        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.purchasable_pack'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.image_resolver.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\ImageResolver\PackImageResolver A Elcodi\Component\Product\ImageResolver\PackImageResolver instance.
     */
    protected function getElcodi_ImageResolver_PurchasablePackService()
    {
        $this->services['elcodi.image_resolver.purchasable_pack'] = $instance = new \Elcodi\Component\Product\ImageResolver\PackImageResolver($this->get('elcodi.resolver.image'));

        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.product'));
        $instance->addPurchasableImageResolver($this->get('elcodi.image_resolver.product_variant'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.json_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Encoder\JsonEncoder A Elcodi\Component\Core\Encoder\JsonEncoder instance.
     */
    protected function getElcodi_JsonEncoderService()
    {
        return $this->services['elcodi.json_encoder'] = new \Elcodi\Component\Core\Encoder\JsonEncoder();
    }

    /**
     * Gets the 'elcodi.languages' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Collections\Collection A Doctrine\Common\Collections\Collection instance.
     */
    protected function getElcodi_LanguagesService()
    {
        return $this->services['elcodi.languages'] = $this->get('elcodi.manager.language')->getLanguages();
    }

    /**
     * Gets the 'elcodi.languages_iso' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Collections\Collection A Doctrine\Common\Collections\Collection instance.
     */
    protected function getElcodi_LanguagesIsoService()
    {
        return $this->services['elcodi.languages_iso'] = $this->get('elcodi.manager.language')->getLanguagesIso();
    }

    /**
     * Gets the 'elcodi.languages_iso_array' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \stdClass A stdClass instance.
     */
    protected function getElcodi_LanguagesIsoArrayService()
    {
        return $this->services['elcodi.languages_iso_array'] = $this->get('elcodi.languages_iso')->toArray();
    }

    /**
     * Gets the 'elcodi.languages_with_master_promoted' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Collections\Collection A Doctrine\Common\Collections\Collection instance.
     */
    protected function getElcodi_LanguagesWithMasterPromotedService()
    {
        return $this->services['elcodi.languages_with_master_promoted'] = $this->get('elcodi.manager.promoted_language')->getLanguagesWithMasterLanguagePromoted();
    }

    /**
     * Gets the 'elcodi.loader.cart_coupon_prices' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\CartCouponPricesLoader A Elcodi\Component\CartCoupon\Services\CartCouponPricesLoader instance.
     */
    protected function getElcodi_Loader_CartCouponPricesService()
    {
        return $this->services['elcodi.loader.cart_coupon_prices'] = new \Elcodi\Component\CartCoupon\Services\CartCouponPricesLoader($this->get('elcodi.manager.cart_coupon'), $this->get('elcodi.wrapper.currency'), $this->get('elcodi.cart_coupon_applicator_collector'));
    }

    /**
     * Gets the 'elcodi.loader.cart_prices' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartPricesLoader A Elcodi\Component\Cart\Services\CartPricesLoader instance.
     */
    protected function getElcodi_Loader_CartPricesService()
    {
        return $this->services['elcodi.loader.cart_prices'] = new \Elcodi\Component\Cart\Services\CartPricesLoader($this->get('elcodi.wrapper.currency'), $this->get('elcodi.converter.currency'));
    }

    /**
     * Gets the 'elcodi.loader.cart_shipping_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartShipping\Services\CartShippingAmountLoader A Elcodi\Component\CartShipping\Services\CartShippingAmountLoader instance.
     */
    protected function getElcodi_Loader_CartShippingAmountService()
    {
        return $this->services['elcodi.loader.cart_shipping_amount'] = new \Elcodi\Component\CartShipping\Services\CartShippingAmountLoader($this->get('elcodi.wrapper.shipping_methods'));
    }

    /**
     * Gets the 'elcodi.loader.order_shipping_method' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartShipping\Services\OrderShippingMethodLoader A Elcodi\Component\CartShipping\Services\OrderShippingMethodLoader instance.
     */
    protected function getElcodi_Loader_OrderShippingMethodService()
    {
        return $this->services['elcodi.loader.order_shipping_method'] = new \Elcodi\Component\CartShipping\Services\OrderShippingMethodLoader($this->get('elcodi.wrapper.shipping_methods'));
    }

    /**
     * Gets the 'elcodi.loader.plugin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Services\PluginLoader A Elcodi\Component\Plugin\Services\PluginLoader instance.
     */
    protected function getElcodi_Loader_PluginService()
    {
        return $this->services['elcodi.loader.plugin'] = new \Elcodi\Component\Plugin\Services\PluginLoader();
    }

    /**
     * Gets the 'elcodi.loader.plugin_routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Loader\RouterLoader A Elcodi\Component\Plugin\Loader\RouterLoader instance.
     */
    protected function getElcodi_Loader_PluginRoutesService()
    {
        return $this->services['elcodi.loader.plugin_routes'] = new \Elcodi\Component\Plugin\Loader\RouterLoader($this->get('kernel'), $this->get('elcodi.plugins'));
    }

    /**
     * Gets the 'elcodi.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Entity\Locale A Elcodi\Component\Language\Entity\Locale instance.
     */
    protected function getElcodi_LocaleService()
    {
        return $this->services['elcodi.locale'] = $this->get('elcodi.manager.locale')->getLocale();
    }

    /**
     * Gets the 'elcodi.location_api_urls' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\ValueObject\ApiUrls A Elcodi\Component\Geo\ValueObject\ApiUrls instance.
     */
    protected function getElcodi_LocationApiUrlsService()
    {
        return $this->services['elcodi.location_api_urls'] = new \Elcodi\Component\Geo\ValueObject\ApiUrls('elcodi.route.location_api_root_locations', 'elcodi.route.location_api_children', 'elcodi.route.location_api_parents', 'elcodi.route.location_api_location', 'elcodi.route.location_api_hierarchy', 'elcodi.route.location_api_in');
    }

    /**
     * Gets the 'elcodi.location_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Services\LocationBuilder A Elcodi\Component\Geo\Services\LocationBuilder instance.
     */
    protected function getElcodi_LocationBuilderService()
    {
        return $this->services['elcodi.location_builder'] = new \Elcodi\Component\Geo\Services\LocationBuilder($this->get('elcodi.factory.location'));
    }

    /**
     * Gets the 'elcodi.location_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Services\LocationLoader A Elcodi\Component\Geo\Services\LocationLoader instance.
     */
    protected function getElcodi_LocationLoaderService()
    {
        return $this->services['elcodi.location_loader'] = new \Elcodi\Component\Geo\Services\LocationLoader($this->get('elcodi.object_manager.location'), $this->get('elcodi.location_loader_adapter.github'));
    }

    /**
     * Gets the 'elcodi.location_loader_adapter.github' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Adapter\LocationLoader\GithubLocationLoaderAdapter A Elcodi\Component\Geo\Adapter\LocationLoader\GithubLocationLoaderAdapter instance.
     */
    protected function getElcodi_LocationLoaderAdapter_GithubService()
    {
        return $this->services['elcodi.location_loader_adapter.github'] = new \Elcodi\Component\Geo\Adapter\LocationLoader\GithubLocationLoaderAdapter();
    }

    /**
     * Gets the 'elcodi.location_populator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Services\LocationPopulator A Elcodi\Component\Geo\Services\LocationPopulator instance.
     */
    protected function getElcodi_LocationPopulatorService()
    {
        return $this->services['elcodi.location_populator'] = new \Elcodi\Component\Geo\Services\LocationPopulator($this->get('elcodi.location_populator_adapter.geonames'), $this->get('elcodi.object_manager.location'));
    }

    /**
     * Gets the 'elcodi.location_populator_adapter.geonames' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Adapter\LocationPopulator\GeonamesLocationPopulatorAdapter A Elcodi\Component\Geo\Adapter\LocationPopulator\GeonamesLocationPopulatorAdapter instance.
     */
    protected function getElcodi_LocationPopulatorAdapter_GeonamesService()
    {
        return $this->services['elcodi.location_populator_adapter.geonames'] = new \Elcodi\Component\Geo\Adapter\LocationPopulator\GeonamesLocationPopulatorAdapter($this->get('elcodi.extractor'), $this->get('elcodi.location_builder'));
    }

    /**
     * Gets the 'elcodi.location_provider_adapter.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Adapter\LocationProvider\LocationApiProviderAdapter A Elcodi\Component\Geo\Adapter\LocationProvider\LocationApiProviderAdapter instance.
     */
    protected function getElcodi_LocationProviderAdapter_ApiService()
    {
        return $this->services['elcodi.location_provider_adapter.api'] = new \Elcodi\Component\Geo\Adapter\LocationProvider\LocationApiProviderAdapter($this->get('elcodi.factory.location_data'), $this->get('router'), $this->get('elcodi.location_api_urls'), NULL);
    }

    /**
     * Gets the 'elcodi.location_provider_adapter.service' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Adapter\LocationProvider\LocationServiceProviderAdapter A Elcodi\Component\Geo\Adapter\LocationProvider\LocationServiceProviderAdapter instance.
     */
    protected function getElcodi_LocationProviderAdapter_ServiceService()
    {
        return $this->services['elcodi.location_provider_adapter.service'] = new \Elcodi\Component\Geo\Adapter\LocationProvider\LocationServiceProviderAdapter($this->get('elcodi.repository.location'), $this->get('elcodi.transformer.location_to_location_data'));
    }

    /**
     * Gets the 'elcodi.manager.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Services\AddressManager A Elcodi\Component\Geo\Services\AddressManager instance.
     */
    protected function getElcodi_Manager_AddressService()
    {
        return $this->services['elcodi.manager.address'] = new \Elcodi\Component\Geo\Services\AddressManager($this->get('elcodi.object_manager.address'), $this->get('elcodi.event_dispatcher.address'));
    }

    /**
     * Gets the 'elcodi.manager.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Services\AdminUserManager A Elcodi\Component\User\Services\AdminUserManager instance.
     */
    protected function getElcodi_Manager_AdminUserService()
    {
        return $this->services['elcodi.manager.admin_user'] = new \Elcodi\Component\User\Services\AdminUserManager($this->get('elcodi.event_dispatcher.user'));
    }

    /**
     * Gets the 'elcodi.manager.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Banner\Services\BannerManager A Elcodi\Component\Banner\Services\BannerManager instance.
     */
    protected function getElcodi_Manager_BannerService()
    {
        return $this->services['elcodi.manager.banner'] = new \Elcodi\Component\Banner\Services\BannerManager($this->get('elcodi.repository.banner'));
    }

    /**
     * Gets the 'elcodi.manager.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartManager A Elcodi\Component\Cart\Services\CartManager instance.
     */
    protected function getElcodi_Manager_CartService()
    {
        return $this->services['elcodi.manager.cart'] = new \Elcodi\Component\Cart\Services\CartManager($this->get('elcodi.event_dispatcher.cart'), $this->get('elcodi.event_dispatcher.cart_line'), $this->get('elcodi.factory.cart'), $this->get('elcodi.factory.cart_line'));
    }

    /**
     * Gets the 'elcodi.manager.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\CartCouponManager A Elcodi\Component\CartCoupon\Services\CartCouponManager instance.
     */
    protected function getElcodi_Manager_CartCouponService()
    {
        return $this->services['elcodi.manager.cart_coupon'] = new \Elcodi\Component\CartCoupon\Services\CartCouponManager($this->get('elcodi.event_dispatcher.cart_coupon'), $this->get('elcodi.repository.coupon'), $this->get('elcodi.director.cart_coupon'), $this->get('elcodi.repository.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.manager.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Services\CommentManager A Elcodi\Component\Comment\Services\CommentManager instance.
     */
    protected function getElcodi_Manager_CommentService()
    {
        return $this->services['elcodi.manager.comment'] = new \Elcodi\Component\Comment\Services\CommentManager($this->get('elcodi.event_dispatcher.comment'), $this->get('elcodi.director.comment'));
    }

    /**
     * Gets the 'elcodi.manager.comment_vote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Comment\Services\VoteManager A Elcodi\Component\Comment\Services\VoteManager instance.
     */
    protected function getElcodi_Manager_CommentVoteService()
    {
        return $this->services['elcodi.manager.comment_vote'] = new \Elcodi\Component\Comment\Services\VoteManager($this->get('elcodi.event_dispatcher.comment'), $this->get('elcodi.director.comment_vote'));
    }

    /**
     * Gets the 'elcodi.manager.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Coupon\Services\CouponManager A Elcodi\Component\Coupon\Services\CouponManager instance.
     */
    protected function getElcodi_Manager_CouponService()
    {
        return $this->services['elcodi.manager.coupon'] = new \Elcodi\Component\Coupon\Services\CouponManager($this->get('elcodi.factory.coupon'), $this->get('elcodi.generator.random_string'), $this->get('elcodi.factory.datetime'));
    }

    /**
     * Gets the 'elcodi.manager.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Services\CurrencyManager A Elcodi\Component\Currency\Services\CurrencyManager instance.
     */
    protected function getElcodi_Manager_CurrencyService()
    {
        return $this->services['elcodi.manager.currency'] = new \Elcodi\Component\Currency\Services\CurrencyManager($this->get('elcodi.repository.currency'), $this->get('elcodi.repository.currency_exchange_rate'), 'USD');
    }

    /**
     * Gets the 'elcodi.manager.currency_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Services\CurrencySessionManager A Elcodi\Component\Currency\Services\CurrencySessionManager instance.
     */
    protected function getElcodi_Manager_CurrencySessionService()
    {
        return $this->services['elcodi.manager.currency_session'] = new \Elcodi\Component\Currency\Services\CurrencySessionManager($this->get('session'), 'currency_id');
    }

    /**
     * Gets the 'elcodi.manager.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Services\CustomerManager A Elcodi\Component\User\Services\CustomerManager instance.
     */
    protected function getElcodi_Manager_CustomerService()
    {
        return $this->services['elcodi.manager.customer'] = new \Elcodi\Component\User\Services\CustomerManager($this->get('elcodi.event_dispatcher.user'));
    }

    /**
     * Gets the 'elcodi.manager.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Services\LanguageManager A Elcodi\Component\Language\Services\LanguageManager instance.
     */
    protected function getElcodi_Manager_LanguageService()
    {
        return $this->services['elcodi.manager.language'] = new \Elcodi\Component\Language\Services\LanguageManager($this->get('elcodi.repository.language'));
    }

    /**
     * Gets the 'elcodi.manager.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Services\LocaleManager A Elcodi\Component\Language\Services\LocaleManager instance.
     */
    protected function getElcodi_Manager_LocaleService()
    {
        $this->services['elcodi.manager.locale'] = $instance = new \Elcodi\Component\Language\Services\LocaleManager($this->get('elcodi.provider.locale')->getLocale());

        $instance->initialize();

        return $instance;
    }

    /**
     * Gets the 'elcodi.manager.media_file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Services\FileManager A Elcodi\Component\Media\Services\FileManager instance.
     */
    protected function getElcodi_Manager_MediaFileService()
    {
        return $this->services['elcodi.manager.media_file'] = new \Elcodi\Component\Media\Services\FileManager($this->get('gaufrette.local_filesystem'), $this->get('elcodi.transformer.media_file_identifier'));
    }

    /**
     * Gets the 'elcodi.manager.media_image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Services\ImageManager A Elcodi\Component\Media\Services\ImageManager instance.
     */
    protected function getElcodi_Manager_MediaImageService()
    {
        return $this->services['elcodi.manager.media_image'] = new \Elcodi\Component\Media\Services\ImageManager($this->get('elcodi.factory.image'), $this->get('elcodi.manager.media_file'), $this->get('elcodi.media_resize_adapter.gd'));
    }

    /**
     * Gets the 'elcodi.manager.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Services\MenuManager A Elcodi\Component\Menu\Services\MenuManager instance.
     */
    protected function getElcodi_Manager_MenuService()
    {
        $this->services['elcodi.manager.menu'] = $instance = new \Elcodi\Component\Menu\Services\MenuManager($this->get('elcodi.repository.menu'), $this->get('elcodi.object_manager.menu'), 'menus');

        $instance->setCache($this->get('doctrine_cache.providers.elcodi_menus'));
        $instance->setEncoder($this->get('elcodi.php_encoder'));
        $instance->addMenuChanger($this->get('elcodi.menu_builder'));
        $instance->addMenuChanger($this->get('elcodi.menu_filterer'));
        $instance->addMenuChanger($this->get('elcodi.menu_modifier'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.manager.newsletter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Newsletter\Services\NewsletterManager A Elcodi\Component\Newsletter\Services\NewsletterManager instance.
     */
    protected function getElcodi_Manager_NewsletterService()
    {
        return $this->services['elcodi.manager.newsletter'] = new \Elcodi\Component\Newsletter\Services\NewsletterManager($this->get('elcodi.event_dispatcher.newsletter'), $this->get('validator'), $this->get('elcodi.factory.newsletter_subscription'), $this->get('elcodi.repository.newsletter_subscription'), $this->get('elcodi.generator.sha1'));
    }

    /**
     * Gets the 'elcodi.manager.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Services\PasswordManager A Elcodi\Component\User\Services\PasswordManager instance.
     */
    protected function getElcodi_Manager_PasswordService()
    {
        return $this->services['elcodi.manager.password'] = new \Elcodi\Component\User\Services\PasswordManager($this->get('doctrine.orm.default_entity_manager'), $this->get('router'), $this->get('elcodi.event_dispatcher.password'), $this->get('elcodi.generator.sha1'));
    }

    /**
     * Gets the 'elcodi.manager.plugin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Services\PluginManager A Elcodi\Component\Plugin\Services\PluginManager instance.
     */
    protected function getElcodi_Manager_PluginService()
    {
        return $this->services['elcodi.manager.plugin'] = new \Elcodi\Component\Plugin\Services\PluginManager($this->get('kernel'), $this->get('elcodi.repository.plugin'), $this->get('elcodi.object_manager.plugin'), $this->get('elcodi.loader.plugin'));
    }

    /**
     * Gets the 'elcodi.manager.promoted_language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Services\PromotedLanguageManager A Elcodi\Component\Language\Services\PromotedLanguageManager instance.
     */
    protected function getElcodi_Manager_PromotedLanguageService()
    {
        return $this->services['elcodi.manager.promoted_language'] = new \Elcodi\Component\Language\Services\PromotedLanguageManager($this->get('elcodi.manager.language'), $this->get('elcodi.locale'));
    }

    /**
     * Gets the 'elcodi.manager.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Rule\Services\RuleManager A Elcodi\Component\Rule\Services\RuleManager instance.
     */
    public function getElcodi_Manager_RuleService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.manager.rule'] = new ElcodiComponentRuleServicesRuleManager_000000000473817e0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Manager_RuleService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Rule\Services\RuleManager($this->get('elcodi.expression_language'), $this->get('elcodi.expression_language_context_collector'));
    }

    /**
     * Gets the 'elcodi.mapping_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Services\MappingProvider A Elcodi\Component\Core\Services\MappingProvider instance.
     */
    protected function getElcodi_MappingProviderService()
    {
        return $this->services['elcodi.mapping_provider'] = new \Elcodi\Component\Core\Services\MappingProvider(array('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier', 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\ShippingRangeInterface' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange', 'Elcodi\\Store\\ConnectBundle\\Entity\\AuthorizationInterface' => 'Elcodi\\Store\\ConnectBundle\\Entity\\Authorization', 'Elcodi\\Component\\Comment\\Entity\\Interfaces\\CommentInterface' => 'Elcodi\\Component\\Comment\\Entity\\Comment', 'Elcodi\\Component\\Comment\\Entity\\Interfaces\\VoteInterface' => 'Elcodi\\Component\\Comment\\Entity\\Vote', 'Elcodi\\Component\\Metric\\Core\\Entity\\Interfaces\\EntryInterface' => 'Elcodi\\Component\\Metric\\Core\\Entity\\Entry', 'Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface' => 'Elcodi\\Component\\Page\\Entity\\Page', 'Elcodi\\Component\\Newsletter\\Entity\\Interfaces\\NewsletterSubscriptionInterface' => 'Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription', 'Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerInterface' => 'Elcodi\\Component\\Banner\\Entity\\Banner', 'Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerZoneInterface' => 'Elcodi\\Component\\Banner\\Entity\\BannerZone', 'Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\CartCouponInterface' => 'Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon', 'Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\OrderCouponInterface' => 'Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon', 'Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\NodeInterface' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Node', 'Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\MenuInterface' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Menu', 'Elcodi\\Component\\EntityTranslator\\Entity\\Interfaces\\EntityTranslationInterface' => 'Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation', 'Elcodi\\Component\\Tax\\Entity\\Interfaces\\TaxInterface' => 'Elcodi\\Component\\Tax\\Entity\\Tax', 'Elcodi\\Component\\Zone\\Entity\\Interfaces\\ZoneInterface' => 'Elcodi\\Component\\Zone\\Entity\\Zone', 'Elcodi\\Component\\StateTransitionMachine\\Entity\\Interfaces\\StateLineInterface' => 'Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface' => 'Elcodi\\Component\\Product\\Entity\\Purchasable', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\ProductInterface' => 'Elcodi\\Component\\Product\\Entity\\Product', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\VariantInterface' => 'Elcodi\\Component\\Product\\Entity\\Variant', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\PackInterface' => 'Elcodi\\Component\\Product\\Entity\\Pack', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface' => 'Elcodi\\Component\\Product\\Entity\\Manufacturer', 'Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface' => 'Elcodi\\Component\\Product\\Entity\\Category', 'Elcodi\\Component\\User\\Entity\\Interfaces\\CustomerInterface' => 'Elcodi\\Component\\User\\Entity\\Customer', 'Elcodi\\Component\\User\\Entity\\Interfaces\\AdminUserInterface' => 'Elcodi\\Component\\User\\Entity\\AdminUser', 'Elcodi\\Component\\Store\\Entity\\Interfaces\\StoreInterface' => 'Elcodi\\Component\\Store\\Entity\\Store', 'Elcodi\\Component\\Attribute\\Entity\\Interfaces\\AttributeInterface' => 'Elcodi\\Component\\Attribute\\Entity\\Attribute', 'Elcodi\\Component\\Attribute\\Entity\\Interfaces\\ValueInterface' => 'Elcodi\\Component\\Attribute\\Entity\\Value', 'Elcodi\\Component\\Geo\\Entity\\Interfaces\\AddressInterface' => 'Elcodi\\Component\\Geo\\Entity\\Address', 'Elcodi\\Component\\Geo\\Entity\\Interfaces\\LocationInterface' => 'Elcodi\\Component\\Geo\\Entity\\Location', 'Elcodi\\Component\\Media\\Entity\\Interfaces\\ImageInterface' => 'Elcodi\\Component\\Media\\Entity\\Image', 'Elcodi\\Component\\Language\\Entity\\Interfaces\\LanguageInterface' => 'Elcodi\\Component\\Language\\Entity\\Language', 'Elcodi\\Component\\Currency\\Entity\\Interfaces\\CurrencyInterface' => 'Elcodi\\Component\\Currency\\Entity\\Currency', 'Elcodi\\Component\\Rule\\Entity\\Interfaces\\RuleInterface' => 'Elcodi\\Component\\Rule\\Entity\\Rule', 'Elcodi\\Component\\Coupon\\Entity\\Interfaces\\CouponInterface' => 'Elcodi\\Component\\Coupon\\Entity\\Coupon', 'Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartInterface' => 'Elcodi\\Component\\Cart\\Entity\\Cart', 'Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderInterface' => 'Elcodi\\Component\\Cart\\Entity\\Order', 'Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartLineInterface' => 'Elcodi\\Component\\Cart\\Entity\\CartLine', 'Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderLineInterface' => 'Elcodi\\Component\\Cart\\Entity\\OrderLine'));
    }

    /**
     * Gets the 'elcodi.matcher.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Zone\Services\ZoneMatcher A Elcodi\Component\Zone\Services\ZoneMatcher instance.
     */
    protected function getElcodi_Matcher_ZoneService()
    {
        return $this->services['elcodi.matcher.zone'] = new \Elcodi\Component\Zone\Services\ZoneMatcher($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi.media_resize_adapter.gd' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Adapter\Resizer\GDResizeAdapter A Elcodi\Component\Media\Adapter\Resizer\GDResizeAdapter instance.
     */
    protected function getElcodi_MediaResizeAdapter_GdService()
    {
        return $this->services['elcodi.media_resize_adapter.gd'] = new \Elcodi\Component\Media\Adapter\Resizer\GDResizeAdapter();
    }

    /**
     * Gets the 'elcodi.media_resize_adapter.imagemagick' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Adapter\Resizer\ImageMagickResizeAdapter A Elcodi\Component\Media\Adapter\Resizer\ImageMagickResizeAdapter instance.
     */
    protected function getElcodi_MediaResizeAdapter_ImagemagickService()
    {
        return $this->services['elcodi.media_resize_adapter.imagemagick'] = new \Elcodi\Component\Media\Adapter\Resizer\ImageMagickResizeAdapter('/usr/bin/convert', '/usr/share/color/icc/colord/sRGB.icc');
    }

    /**
     * Gets the 'elcodi.menu_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Services\MenuBuilder A Elcodi\Component\Menu\Services\MenuBuilder instance.
     */
    protected function getElcodi_MenuBuilderService()
    {
        $this->services['elcodi.menu_builder'] = $instance = new \Elcodi\Component\Menu\Services\MenuBuilder();

        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.core'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.user'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.cart'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.orders_not_shipped'), array(), 'after_cache', 0);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.coupon'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.currency'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.language'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.product'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi.admin.menu_builder.page'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.template'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.plugin_list'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.plugin_entries'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.shipping'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.payment'), array(), 'before_cache', 32);
        $instance->addMenuBuilder($this->get('elcodi_admin.menu_builder.store'), array(), 'before_cache', 16);
        $instance->addMenuBuilder($this->get('elcodi_plugin.custom_shipping.menu_builder'), array(), 'before_cache', 0);

        return $instance;
    }

    /**
     * Gets the 'elcodi.menu_filter.menu_disabled' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Filter\MenuDisabledFilter A Elcodi\Component\Menu\Filter\MenuDisabledFilter instance.
     */
    protected function getElcodi_MenuFilter_MenuDisabledService()
    {
        return $this->services['elcodi.menu_filter.menu_disabled'] = new \Elcodi\Component\Menu\Filter\MenuDisabledFilter();
    }

    /**
     * Gets the 'elcodi.menu_filter.menu_expanded' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Filter\MenuExpandedFilter A Elcodi\Component\Menu\Filter\MenuExpandedFilter instance.
     */
    protected function getElcodi_MenuFilter_MenuExpandedService()
    {
        return $this->services['elcodi.menu_filter.menu_expanded'] = new \Elcodi\Component\Menu\Filter\MenuExpandedFilter();
    }

    /**
     * Gets the 'elcodi.menu_filterer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Services\MenuFilterer A Elcodi\Component\Menu\Services\MenuFilterer instance.
     */
    protected function getElcodi_MenuFiltererService()
    {
        $this->services['elcodi.menu_filterer'] = $instance = new \Elcodi\Component\Menu\Services\MenuFilterer();

        $instance->addMenuFilter($this->get('elcodi.menu_filter.menu_disabled'), array(), 'before_cache', 0);
        $instance->addMenuFilter($this->get('elcodi.menu_filter.menu_expanded'), array(), 'after_cache', -128);

        return $instance;
    }

    /**
     * Gets the 'elcodi.menu_modifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Menu\Services\MenuModifier A Elcodi\Component\Menu\Services\MenuModifier instance.
     */
    protected function getElcodi_MenuModifierService()
    {
        return $this->services['elcodi.menu_modifier'] = new \Elcodi\Component\Menu\Services\MenuModifier();
    }

    /**
     * Gets the 'elcodi.metric_loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Metric\Core\Services\MetricLoader A Elcodi\Component\Metric\Core\Services\MetricLoader instance.
     */
    public function getElcodi_MetricLoaderService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.metric_loader'] = new ElcodiComponentMetricCoreServicesMetricLoader_00000000047392570000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_MetricLoaderService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Metric\Core\Services\MetricLoader($this->get('elcodi.redis_metrics_bucket'), $this->get('elcodi.repository.metric_entry'));
    }

    /**
     * Gets the 'elcodi.metric_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Metric\Core\Services\MetricManager A Elcodi\Component\Metric\Core\Services\MetricManager instance.
     */
    protected function getElcodi_MetricManagerService()
    {
        return $this->services['elcodi.metric_manager'] = new \Elcodi\Component\Metric\Core\Services\MetricManager($this->get('elcodi.redis_metrics_bucket'), $this->get('elcodi.factory.metric_entry'), $this->get('elcodi.object_manager.entry'));
    }

    /**
     * Gets the 'elcodi.money_printer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Services\MoneyPrinter A Elcodi\Component\Currency\Services\MoneyPrinter instance.
     */
    protected function getElcodi_MoneyPrinterService()
    {
        return $this->services['elcodi.money_printer'] = new \Elcodi\Component\Currency\Services\MoneyPrinter($this->get('elcodi.converter.currency'), $this->get('elcodi.wrapper.currency'), $this->get('elcodi.locale'));
    }

    /**
     * Gets the 'elcodi.name_resolver.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\NameResolver\ProductNameResolver A Elcodi\Component\Product\NameResolver\ProductNameResolver instance.
     */
    protected function getElcodi_NameResolver_ProductService()
    {
        return $this->services['elcodi.name_resolver.product'] = new \Elcodi\Component\Product\NameResolver\ProductNameResolver();
    }

    /**
     * Gets the 'elcodi.name_resolver.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\NameResolver\VariantNameResolver A Elcodi\Component\Product\NameResolver\VariantNameResolver instance.
     */
    protected function getElcodi_NameResolver_ProductVariantService()
    {
        return $this->services['elcodi.name_resolver.product_variant'] = new \Elcodi\Component\Product\NameResolver\VariantNameResolver();
    }

    /**
     * Gets the 'elcodi.name_resolver.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\NameResolver\PurchasableNameResolver A Elcodi\Component\Product\NameResolver\PurchasableNameResolver instance.
     */
    protected function getElcodi_NameResolver_PurchasableService()
    {
        $this->services['elcodi.name_resolver.purchasable'] = $instance = new \Elcodi\Component\Product\NameResolver\PurchasableNameResolver();

        $instance->addPurchasableNameResolver($this->get('elcodi.name_resolver.product'));
        $instance->addPurchasableNameResolver($this->get('elcodi.name_resolver.product_variant'));
        $instance->addPurchasableNameResolver($this->get('elcodi.name_resolver.purchasable_pack'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.name_resolver.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\NameResolver\PackNameResolver A Elcodi\Component\Product\NameResolver\PackNameResolver instance.
     */
    protected function getElcodi_NameResolver_PurchasablePackService()
    {
        return $this->services['elcodi.name_resolver.purchasable_pack'] = new \Elcodi\Component\Product\NameResolver\PackNameResolver();
    }

    /**
     * Gets the 'elcodi.object_manager.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_AddressService()
    {
        return $this->services['elcodi.object_manager.address'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Address');
    }

    /**
     * Gets the 'elcodi.object_manager.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_AdminUserService()
    {
        return $this->services['elcodi.object_manager.admin_user'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\User\\Entity\\AdminUser');
    }

    /**
     * Gets the 'elcodi.object_manager.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_AttributeService()
    {
        return $this->services['elcodi.object_manager.attribute'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Attribute');
    }

    /**
     * Gets the 'elcodi.object_manager.attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_AttributeValueService()
    {
        return $this->services['elcodi.object_manager.attribute_value'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Value');
    }

    /**
     * Gets the 'elcodi.object_manager.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_BannerService()
    {
        return $this->services['elcodi.object_manager.banner'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Banner\\Entity\\Banner');
    }

    /**
     * Gets the 'elcodi.object_manager.banner_zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_BannerZoneService()
    {
        return $this->services['elcodi.object_manager.banner_zone'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Banner\\Entity\\BannerZone');
    }

    /**
     * Gets the 'elcodi.object_manager.carrier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CarrierService()
    {
        return $this->services['elcodi.object_manager.carrier'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier');
    }

    /**
     * Gets the 'elcodi.object_manager.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CartService()
    {
        return $this->services['elcodi.object_manager.cart'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Cart');
    }

    /**
     * Gets the 'elcodi.object_manager.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CartCouponService()
    {
        return $this->services['elcodi.object_manager.cart_coupon'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon');
    }

    /**
     * Gets the 'elcodi.object_manager.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CartLineService()
    {
        return $this->services['elcodi.object_manager.cart_line'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\CartLine');
    }

    /**
     * Gets the 'elcodi.object_manager.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CategoryService()
    {
        return $this->services['elcodi.object_manager.category'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Category');
    }

    /**
     * Gets the 'elcodi.object_manager.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CommentService()
    {
        return $this->services['elcodi.object_manager.comment'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Comment');
    }

    /**
     * Gets the 'elcodi.object_manager.comment_vote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CommentVoteService()
    {
        return $this->services['elcodi.object_manager.comment_vote'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Vote');
    }

    /**
     * Gets the 'elcodi.object_manager.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CouponService()
    {
        return $this->services['elcodi.object_manager.coupon'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Coupon\\Entity\\Coupon');
    }

    /**
     * Gets the 'elcodi.object_manager.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CurrencyService()
    {
        return $this->services['elcodi.object_manager.currency'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Currency\\Entity\\Currency');
    }

    /**
     * Gets the 'elcodi.object_manager.currency_exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CurrencyExchangeRateService()
    {
        return $this->services['elcodi.object_manager.currency_exchange_rate'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate');
    }

    /**
     * Gets the 'elcodi.object_manager.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_CustomerService()
    {
        return $this->services['elcodi.object_manager.customer'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\User\\Entity\\Customer');
    }

    /**
     * Gets the 'elcodi.object_manager.entity_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_EntityTranslationService()
    {
        return $this->services['elcodi.object_manager.entity_translation'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation');
    }

    /**
     * Gets the 'elcodi.object_manager.entry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_EntryService()
    {
        return $this->services['elcodi.object_manager.entry'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Metric\\Core\\Entity\\Entry');
    }

    /**
     * Gets the 'elcodi.object_manager.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ImageService()
    {
        return $this->services['elcodi.object_manager.image'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Media\\Entity\\Image');
    }

    /**
     * Gets the 'elcodi.object_manager.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_LanguageService()
    {
        return $this->services['elcodi.object_manager.language'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Language\\Entity\\Language');
    }

    /**
     * Gets the 'elcodi.object_manager.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_LocationService()
    {
        return $this->services['elcodi.object_manager.location'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Location');
    }

    /**
     * Gets the 'elcodi.object_manager.manufacturer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ManufacturerService()
    {
        return $this->services['elcodi.object_manager.manufacturer'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Manufacturer');
    }

    /**
     * Gets the 'elcodi.object_manager.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_MenuService()
    {
        return $this->services['elcodi.object_manager.menu'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Menu');
    }

    /**
     * Gets the 'elcodi.object_manager.menu_node' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_MenuNodeService()
    {
        return $this->services['elcodi.object_manager.menu_node'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Node');
    }

    /**
     * Gets the 'elcodi.object_manager.newsletter_subscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_NewsletterSubscriptionService()
    {
        return $this->services['elcodi.object_manager.newsletter_subscription'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription');
    }

    /**
     * Gets the 'elcodi.object_manager.order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_OrderService()
    {
        return $this->services['elcodi.object_manager.order'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Order');
    }

    /**
     * Gets the 'elcodi.object_manager.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_OrderCouponService()
    {
        return $this->services['elcodi.object_manager.order_coupon'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon');
    }

    /**
     * Gets the 'elcodi.object_manager.order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_OrderLineService()
    {
        return $this->services['elcodi.object_manager.order_line'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\OrderLine');
    }

    /**
     * Gets the 'elcodi.object_manager.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_PageService()
    {
        return $this->services['elcodi.object_manager.page'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Page\\Entity\\Page');
    }

    /**
     * Gets the 'elcodi.object_manager.plugin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_PluginService()
    {
        return $this->services['elcodi.object_manager.plugin'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Plugin\\Entity\\Plugin');
    }

    /**
     * Gets the 'elcodi.object_manager.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ProductService()
    {
        return $this->services['elcodi.object_manager.product'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Product');
    }

    /**
     * Gets the 'elcodi.object_manager.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ProductVariantService()
    {
        return $this->services['elcodi.object_manager.product_variant'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Variant');
    }

    /**
     * Gets the 'elcodi.object_manager.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_PurchasableService()
    {
        return $this->services['elcodi.object_manager.purchasable'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Purchasable');
    }

    /**
     * Gets the 'elcodi.object_manager.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_PurchasablePackService()
    {
        return $this->services['elcodi.object_manager.purchasable_pack'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Pack');
    }

    /**
     * Gets the 'elcodi.object_manager.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_RuleService()
    {
        return $this->services['elcodi.object_manager.rule'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Rule\\Entity\\Rule');
    }

    /**
     * Gets the 'elcodi.object_manager.shipping_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ShippingRangeService()
    {
        return $this->services['elcodi.object_manager.shipping_range'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange');
    }

    /**
     * Gets the 'elcodi.object_manager.state_transition_machine_state_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_StateTransitionMachineStateLineService()
    {
        return $this->services['elcodi.object_manager.state_transition_machine_state_line'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine');
    }

    /**
     * Gets the 'elcodi.object_manager.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_StoreService()
    {
        return $this->services['elcodi.object_manager.store'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Store\\Entity\\Store');
    }

    /**
     * Gets the 'elcodi.object_manager.tax' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_TaxService()
    {
        return $this->services['elcodi.object_manager.tax'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Tax\\Entity\\Tax');
    }

    /**
     * Gets the 'elcodi.object_manager.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getElcodi_ObjectManager_ZoneService()
    {
        return $this->services['elcodi.object_manager.zone'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Component\\Zone\\Entity\\Zone');
    }

    /**
     * Gets the 'elcodi.order.payment_states_machine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\Machine A Elcodi\Component\StateTransitionMachine\Machine\Machine instance.
     */
    protected function getElcodi_Order_PaymentStatesMachineService()
    {
        return $this->services['elcodi.order.payment_states_machine'] = $this->get('elcodi.order_payment_states_machine_builder')->compile();
    }

    /**
     * Gets the 'elcodi.order.shipping_states_machine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\Machine A Elcodi\Component\StateTransitionMachine\Machine\Machine instance.
     */
    protected function getElcodi_Order_ShippingStatesMachineService()
    {
        return $this->services['elcodi.order.shipping_states_machine'] = $this->get('elcodi.order_shipping_states_machine_builder')->compile();
    }

    /**
     * Gets the 'elcodi.order_payment_states_machine_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder A Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder instance.
     */
    protected function getElcodi_OrderPaymentStatesMachineBuilderService()
    {
        return $this->services['elcodi.order_payment_states_machine_builder'] = new \Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder($this->get('elcodi.factory.state_transition_machine'), 'order_payment_states_machine', array(0 => array(0 => 'unpaid', 1 => 'pay', 2 => 'paid'), 1 => array(0 => 'paid', 1 => 'refund', 2 => 'refunded')), 'unpaid');
    }

    /**
     * Gets the 'elcodi.order_payment_states_machine_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\MachineManager A Elcodi\Component\StateTransitionMachine\Machine\MachineManager instance.
     */
    protected function getElcodi_OrderPaymentStatesMachineManagerService()
    {
        return $this->services['elcodi.order_payment_states_machine_manager'] = new \Elcodi\Component\StateTransitionMachine\Machine\MachineManager($this->get('elcodi.order.payment_states_machine'), $this->get('elcodi.event_dispatcher.machine'), $this->get('elcodi.factory.state_transition_machine_state_line'));
    }

    /**
     * Gets the 'elcodi.order_shipping_states_machine_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder A Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder instance.
     */
    protected function getElcodi_OrderShippingStatesMachineBuilderService()
    {
        return $this->services['elcodi.order_shipping_states_machine_builder'] = new \Elcodi\Component\StateTransitionMachine\Machine\MachineBuilder($this->get('elcodi.factory.state_transition_machine'), 'order_shipping_states_machine', array(0 => array(0 => 'preparing', 1 => 'order ready', 2 => 'processed'), 1 => array(0 => 'processed', 1 => 'picked up by carrier', 2 => 'in delivery'), 2 => array(0 => 'processed', 1 => 'picked up on store', 2 => 'delivered'), 3 => array(0 => 'in delivery', 1 => 'delivered', 2 => 'delivered'), 4 => array(0 => 'preparing', 1 => 'cancel', 2 => 'cancelled'), 5 => array(0 => 'processed', 1 => 'cancel', 2 => 'cancelled'), 6 => array(0 => 'in delivery', 1 => 'cancel', 2 => 'cancelled'), 7 => array(0 => 'in delivery', 1 => 'return', 2 => 'returned'), 8 => array(0 => 'delivered', 1 => 'return', 2 => 'returned')), 'preparing');
    }

    /**
     * Gets the 'elcodi.order_shipping_states_machine_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\StateTransitionMachine\Machine\MachineManager A Elcodi\Component\StateTransitionMachine\Machine\MachineManager instance.
     */
    protected function getElcodi_OrderShippingStatesMachineManagerService()
    {
        return $this->services['elcodi.order_shipping_states_machine_manager'] = new \Elcodi\Component\StateTransitionMachine\Machine\MachineManager($this->get('elcodi.order.shipping_states_machine'), $this->get('elcodi.event_dispatcher.machine'), $this->get('elcodi.factory.state_transition_machine_state_line'));
    }

    /**
     * Gets the 'elcodi.page_renderer_chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Page\Renderer\PageRendererChain A Elcodi\Component\Page\Renderer\PageRendererChain instance.
     */
    protected function getElcodi_PageRendererChainService()
    {
        return $this->services['elcodi.page_renderer_chain'] = new \Elcodi\Component\Page\Renderer\PageRendererChain(array(0 => $this->get('elcodi_common.renderer.template_renderer')));
    }

    /**
     * Gets the 'elcodi.payment_plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_PaymentPluginsService()
    {
        return $this->services['elcodi.payment_plugins'] = $this->get('elcodi.repository.plugin')->findBy(array('type' => 'plugin', 'category' => 'payment'));
    }

    /**
     * Gets the 'elcodi.php_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Encoder\PHPEncoder A Elcodi\Component\Core\Encoder\PHPEncoder instance.
     */
    protected function getElcodi_PhpEncoderService()
    {
        return $this->services['elcodi.php_encoder'] = new \Elcodi\Component\Core\Encoder\PHPEncoder();
    }

    /**
     * Gets the 'elcodi.plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_PluginsService()
    {
        return $this->services['elcodi.plugins'] = $this->get('elcodi.repository.plugin')->findAll();
    }

    /**
     * Gets the 'elcodi.populator.currency_exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Currency\Populator\CurrencyExchangeRatesPopulator A Elcodi\Component\Currency\Populator\CurrencyExchangeRatesPopulator instance.
     */
    public function getElcodi_Populator_CurrencyExchangeRateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.populator.currency_exchange_rate'] = new ElcodiComponentCurrencyPopulatorCurrencyExchangeRatesPopulator_00000000047380fb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Populator_CurrencyExchangeRateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Currency\Populator\CurrencyExchangeRatesPopulator($this->get('elcodi.currency_exchange_rate_adapter.yahoo_finances'), $this->get('elcodi.director.currency_exchange_rate'), $this->get('elcodi.repository.currency'), 'USD');
    }

    /**
     * Gets the 'elcodi.provider.admin_user_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface A Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface instance.
     */
    protected function getElcodi_Provider_AdminUserProviderService()
    {
        return $this->services['elcodi.provider.admin_user_provider'] = $this->get('security.encoder_factory')->getEncoder($this->get('elcodi.admin_user_provider_entity_instance'));
    }

    /**
     * Gets the 'elcodi.provider.category_tree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Services\CategoryTree A Elcodi\Component\Product\Services\CategoryTree instance.
     */
    protected function getElcodi_Provider_CategoryTreeService()
    {
        return $this->services['elcodi.provider.category_tree'] = new \Elcodi\Component\Product\Services\CategoryTree($this->get('elcodi.repository.category'));
    }

    /**
     * Gets the 'elcodi.provider.customer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface A Symfony\Component\Security\Core\Encoder\PasswordEncoderInterface instance.
     */
    protected function getElcodi_Provider_CustomerProviderService()
    {
        return $this->services['elcodi.provider.customer_provider'] = $this->get('security.encoder_factory')->getEncoder($this->get('elcodi.customer_provider_entity_instance'));
    }

    /**
     * Gets the 'elcodi.provider.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Language\Services\LocaleProvider A Elcodi\Component\Language\Services\LocaleProvider instance.
     */
    protected function getElcodi_Provider_LocaleService()
    {
        return $this->services['elcodi.provider.locale'] = new \Elcodi\Component\Language\Services\LocaleProvider($this->get('request_stack'), 'en');
    }

    /**
     * Gets the 'elcodi.provider.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Services\ManagerProvider A Elcodi\Component\Core\Services\ManagerProvider instance.
     */
    protected function getElcodi_Provider_ManagerService()
    {
        return $this->services['elcodi.provider.manager'] = new \Elcodi\Component\Core\Services\ManagerProvider($this->get('doctrine'), $this->get('elcodi.container_parameters'));
    }

    /**
     * Gets the 'elcodi.provider.repository' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Services\RepositoryProvider A Elcodi\Component\Core\Services\RepositoryProvider instance.
     */
    protected function getElcodi_Provider_RepositoryService()
    {
        return $this->services['elcodi.provider.repository'] = new \Elcodi\Component\Core\Services\RepositoryProvider($this->get('elcodi.provider.manager'), $this->get('elcodi.container_parameters'));
    }

    /**
     * Gets the 'elcodi.redis_metrics_bucket' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Metric\Core\Bucket\RedisMetricsBucket A Elcodi\Component\Metric\Core\Bucket\RedisMetricsBucket instance.
     */
    protected function getElcodi_RedisMetricsBucketService()
    {
        return $this->services['elcodi.redis_metrics_bucket'] = new \Elcodi\Component\Metric\Core\Bucket\RedisMetricsBucket($this->get('snc_redis.metric'));
    }

    /**
     * Gets the 'elcodi.referrer_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Core\Services\ReferrerProvider A Elcodi\Component\Core\Services\ReferrerProvider instance.
     */
    protected function getElcodi_ReferrerProviderService()
    {
        return $this->services['elcodi.referrer_provider'] = new \Elcodi\Component\Core\Services\ReferrerProvider($this->get('session'), $this->get('request_stack'));
    }

    /**
     * Gets the 'elcodi.related_purchasables_provider.same_category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Adapter\SimilarPurchasablesProvider\SameCategoryRelatedPurchasableProvider A Elcodi\Component\Product\Adapter\SimilarPurchasablesProvider\SameCategoryRelatedPurchasableProvider instance.
     */
    protected function getElcodi_RelatedPurchasablesProvider_SameCategoryService()
    {
        return $this->services['elcodi.related_purchasables_provider.same_category'] = new \Elcodi\Component\Product\Adapter\SimilarPurchasablesProvider\SameCategoryRelatedPurchasableProvider($this->get('elcodi.repository.purchasable'));
    }

    /**
     * Gets the 'elcodi.repository.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_AddressService()
    {
        return $this->services['elcodi.repository.address'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Address');
    }

    /**
     * Gets the 'elcodi.repository.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_AdminUserService()
    {
        return $this->services['elcodi.repository.admin_user'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\User\\Entity\\AdminUser');
    }

    /**
     * Gets the 'elcodi.repository.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_AttributeService()
    {
        return $this->services['elcodi.repository.attribute'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Attribute');
    }

    /**
     * Gets the 'elcodi.repository.attribute_value' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_AttributeValueService()
    {
        return $this->services['elcodi.repository.attribute_value'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Attribute\\Entity\\Value');
    }

    /**
     * Gets the 'elcodi.repository.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_BannerService()
    {
        return $this->services['elcodi.repository.banner'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Banner\\Entity\\Banner');
    }

    /**
     * Gets the 'elcodi.repository.banner_zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_BannerZoneService()
    {
        return $this->services['elcodi.repository.banner_zone'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Banner\\Entity\\BannerZone');
    }

    /**
     * Gets the 'elcodi.repository.carrier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CarrierService()
    {
        return $this->services['elcodi.repository.carrier'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier');
    }

    /**
     * Gets the 'elcodi.repository.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CartService()
    {
        return $this->services['elcodi.repository.cart'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Cart');
    }

    /**
     * Gets the 'elcodi.repository.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CartCouponService()
    {
        return $this->services['elcodi.repository.cart_coupon'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon');
    }

    /**
     * Gets the 'elcodi.repository.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CartLineService()
    {
        return $this->services['elcodi.repository.cart_line'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\CartLine');
    }

    /**
     * Gets the 'elcodi.repository.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CategoryService()
    {
        return $this->services['elcodi.repository.category'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Category');
    }

    /**
     * Gets the 'elcodi.repository.comment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CommentService()
    {
        return $this->services['elcodi.repository.comment'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Comment');
    }

    /**
     * Gets the 'elcodi.repository.comment_vote' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CommentVoteService()
    {
        return $this->services['elcodi.repository.comment_vote'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Comment\\Entity\\Vote');
    }

    /**
     * Gets the 'elcodi.repository.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CouponService()
    {
        return $this->services['elcodi.repository.coupon'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Coupon\\Entity\\Coupon');
    }

    /**
     * Gets the 'elcodi.repository.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CurrencyService()
    {
        return $this->services['elcodi.repository.currency'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Currency\\Entity\\Currency');
    }

    /**
     * Gets the 'elcodi.repository.currency_exchange_rate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CurrencyExchangeRateService()
    {
        return $this->services['elcodi.repository.currency_exchange_rate'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate');
    }

    /**
     * Gets the 'elcodi.repository.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_CustomerService()
    {
        return $this->services['elcodi.repository.customer'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\User\\Entity\\Customer');
    }

    /**
     * Gets the 'elcodi.repository.entity_translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Repository\EntityTranslationRepository A Elcodi\Component\EntityTranslator\Repository\EntityTranslationRepository instance.
     */
    protected function getElcodi_Repository_EntityTranslationService()
    {
        return $this->services['elcodi.repository.entity_translation'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation');
    }

    /**
     * Gets the 'elcodi.repository.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ImageService()
    {
        return $this->services['elcodi.repository.image'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Media\\Entity\\Image');
    }

    /**
     * Gets the 'elcodi.repository.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_LanguageService()
    {
        return $this->services['elcodi.repository.language'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Language\\Entity\\Language');
    }

    /**
     * Gets the 'elcodi.repository.location' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_LocationService()
    {
        return $this->services['elcodi.repository.location'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Geo\\Entity\\Location');
    }

    /**
     * Gets the 'elcodi.repository.manufacturer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ManufacturerService()
    {
        return $this->services['elcodi.repository.manufacturer'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Manufacturer');
    }

    /**
     * Gets the 'elcodi.repository.menu' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_MenuService()
    {
        return $this->services['elcodi.repository.menu'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Menu');
    }

    /**
     * Gets the 'elcodi.repository.menu_node' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_MenuNodeService()
    {
        return $this->services['elcodi.repository.menu_node'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Menu\\Entity\\Menu\\Node');
    }

    /**
     * Gets the 'elcodi.repository.metric_entry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_MetricEntryService()
    {
        return $this->services['elcodi.repository.metric_entry'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Metric\\Core\\Entity\\Entry');
    }

    /**
     * Gets the 'elcodi.repository.newsletter_subscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_NewsletterSubscriptionService()
    {
        return $this->services['elcodi.repository.newsletter_subscription'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription');
    }

    /**
     * Gets the 'elcodi.repository.order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_OrderService()
    {
        return $this->services['elcodi.repository.order'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\Order');
    }

    /**
     * Gets the 'elcodi.repository.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_OrderCouponService()
    {
        return $this->services['elcodi.repository.order_coupon'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon');
    }

    /**
     * Gets the 'elcodi.repository.order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_OrderLineService()
    {
        return $this->services['elcodi.repository.order_line'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Cart\\Entity\\OrderLine');
    }

    /**
     * Gets the 'elcodi.repository.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_PageService()
    {
        return $this->services['elcodi.repository.page'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Page\\Entity\\Page');
    }

    /**
     * Gets the 'elcodi.repository.plugin' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Repository\PluginRepository A Elcodi\Component\Plugin\Repository\PluginRepository instance.
     */
    protected function getElcodi_Repository_PluginService()
    {
        return $this->services['elcodi.repository.plugin'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Plugin\\Entity\\Plugin');
    }

    /**
     * Gets the 'elcodi.repository.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ProductService()
    {
        return $this->services['elcodi.repository.product'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Product');
    }

    /**
     * Gets the 'elcodi.repository.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ProductVariantService()
    {
        return $this->services['elcodi.repository.product_variant'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Variant');
    }

    /**
     * Gets the 'elcodi.repository.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_PurchasableService()
    {
        return $this->services['elcodi.repository.purchasable'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Purchasable');
    }

    /**
     * Gets the 'elcodi.repository.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_PurchasablePackService()
    {
        return $this->services['elcodi.repository.purchasable_pack'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Product\\Entity\\Pack');
    }

    /**
     * Gets the 'elcodi.repository.rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_RuleService()
    {
        return $this->services['elcodi.repository.rule'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Rule\\Entity\\Rule');
    }

    /**
     * Gets the 'elcodi.repository.shipping_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ShippingRangeService()
    {
        return $this->services['elcodi.repository.shipping_range'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange');
    }

    /**
     * Gets the 'elcodi.repository.state_transition_machine_state_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_StateTransitionMachineStateLineService()
    {
        return $this->services['elcodi.repository.state_transition_machine_state_line'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine');
    }

    /**
     * Gets the 'elcodi.repository.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_StoreService()
    {
        return $this->services['elcodi.repository.store'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Store\\Entity\\Store');
    }

    /**
     * Gets the 'elcodi.repository.tax' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_TaxService()
    {
        return $this->services['elcodi.repository.tax'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Tax\\Entity\\Tax');
    }

    /**
     * Gets the 'elcodi.repository.zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getElcodi_Repository_ZoneService()
    {
        return $this->services['elcodi.repository.zone'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Component\\Zone\\Entity\\Zone');
    }

    /**
     * Gets the 'elcodi.resolver.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Services\ImageResolver A Elcodi\Component\Media\Services\ImageResolver instance.
     */
    protected function getElcodi_Resolver_ImageService()
    {
        return $this->services['elcodi.resolver.image'] = new \Elcodi\Component\Media\Services\ImageResolver();
    }

    /**
     * Gets the 'elcodi.resolver.product_options' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Services\ProductOptionsResolver A Elcodi\Component\Product\Services\ProductOptionsResolver instance.
     */
    protected function getElcodi_Resolver_ProductOptionsService()
    {
        return $this->services['elcodi.resolver.product_options'] = new \Elcodi\Component\Product\Services\ProductOptionsResolver();
    }

    /**
     * Gets the 'elcodi.resolver.shipping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Shipping\Resolver\ShippingResolver A Elcodi\Component\Shipping\Resolver\ShippingResolver instance.
     */
    protected function getElcodi_Resolver_ShippingService()
    {
        return $this->services['elcodi.resolver.shipping'] = new \Elcodi\Component\Shipping\Resolver\ShippingResolver($this->get('elcodi.converter.currency'));
    }

    /**
     * Gets the 'elcodi.service.category_integrity_fixer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\Services\CategoryIntegrityFixer A Elcodi\Component\Product\Services\CategoryIntegrityFixer instance.
     */
    protected function getElcodi_Service_CategoryIntegrityFixerService()
    {
        return $this->services['elcodi.service.category_integrity_fixer'] = new \Elcodi\Component\Product\Services\CategoryIntegrityFixer();
    }

    /**
     * Gets the 'elcodi.services.cached_entity_translation_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\EntityTranslator\Services\CachedEntityTranslationProvider A Elcodi\Component\EntityTranslator\Services\CachedEntityTranslationProvider instance.
     */
    protected function getElcodi_Services_CachedEntityTranslationProviderService()
    {
        $this->services['elcodi.services.cached_entity_translation_provider'] = $instance = new \Elcodi\Component\EntityTranslator\Services\CachedEntityTranslationProvider($this->get('elcodi.services.entity_translation_provider'), $this->get('elcodi.repository.entity_translation'), 'translation');

        $instance->setCache($this->get('doctrine_cache.providers.elcodi_translations'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.services.entity_translation_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\EntityTranslator\Services\EntityTranslationProvider A Elcodi\Component\EntityTranslator\Services\EntityTranslationProvider instance.
     */
    public function getElcodi_Services_EntityTranslationProviderService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.services.entity_translation_provider'] = new ElcodiComponentEntityTranslatorServicesEntityTranslationProvider_00000000047399850000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Services_EntityTranslationProviderService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\EntityTranslator\Services\EntityTranslationProvider($this->get('elcodi.repository.entity_translation'), $this->get('elcodi.factory.entity_translation'), $this->get('elcodi.object_manager.entity_translation'));
    }

    /**
     * Gets the 'elcodi.session_manager.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartSessionManager A Elcodi\Component\Cart\Services\CartSessionManager instance.
     */
    protected function getElcodi_SessionManager_CartService()
    {
        return $this->services['elcodi.session_manager.cart'] = new \Elcodi\Component\Cart\Services\CartSessionManager($this->get('session'), 'cart_id', true);
    }

    /**
     * Gets the 'elcodi.shipping_plugins' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_ShippingPluginsService()
    {
        return $this->services['elcodi.shipping_plugins'] = $this->get('elcodi.repository.plugin')->findBy(array('type' => 'plugin', 'category' => 'shipping'));
    }

    /**
     * Gets the 'elcodi.sitemap_builder.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Builder\SitemapBuilder A Elcodi\Component\Sitemap\Builder\SitemapBuilder instance.
     */
    protected function getElcodi_SitemapBuilder_MainService()
    {
        $a = $this->get('elcodi.factory.sitemap_element');

        $this->services['elcodi.sitemap_builder.main'] = $instance = new \Elcodi\Component\Sitemap\Builder\SitemapBuilder($this->get('elcodi.sitemap_renderer.xml'), ($this->targetDirs[2].'/../web/sitemap/sitemap_{_locale}.xml'));

        $instance->addSitemapElementGenerator(new \Elcodi\Component\Sitemap\Element\StaticSitemapElementGenerator($a, $this->get('elcodi.sitemap_transformer.static'), 'store_homepage', NULL, NULL));
        $instance->addSitemapElementGenerator(new \Elcodi\Component\Sitemap\Element\EntitySitemapElementGenerator($a, $this->get('elcodi_store.sitemap_transformer.product'), new \Elcodi\Component\Sitemap\Element\EntitySitemapElementProvider($this->get('elcodi.repository.product'), 'findBy', array('enabled' => true)), 'daily', '0,5'));
        $instance->addSitemapElementGenerator(new \Elcodi\Component\Sitemap\Element\EntitySitemapElementGenerator($a, $this->get('elcodi_store.sitemap_transformer.category'), new \Elcodi\Component\Sitemap\Element\EntitySitemapElementProvider($this->get('elcodi.repository.category'), 'findBy', array('enabled' => true)), 'daily', '0,5'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.sitemap_dumper.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Dumper\FilesystemDumper A Elcodi\Component\Sitemap\Dumper\FilesystemDumper instance.
     */
    protected function getElcodi_SitemapDumper_FilesystemService()
    {
        return $this->services['elcodi.sitemap_dumper.filesystem'] = new \Elcodi\Component\Sitemap\Dumper\FilesystemDumper();
    }

    /**
     * Gets the 'elcodi.sitemap_dumper.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Dumper\SitemapDumper A Elcodi\Component\Sitemap\Dumper\SitemapDumper instance.
     */
    protected function getElcodi_SitemapDumper_MainService()
    {
        return $this->services['elcodi.sitemap_dumper.main'] = new \Elcodi\Component\Sitemap\Dumper\SitemapDumper($this->get('elcodi.sitemap_builder.main'), $this->get('elcodi.sitemap_dumper.filesystem'), ($this->targetDirs[2].'/../web/sitemap/sitemap_{_locale}.xml'));
    }

    /**
     * Gets the 'elcodi.sitemap_profile.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Profile\SitemapProfile A Elcodi\Component\Sitemap\Profile\SitemapProfile instance.
     */
    protected function getElcodi_SitemapProfile_MainService()
    {
        $this->services['elcodi.sitemap_profile.main'] = $instance = new \Elcodi\Component\Sitemap\Profile\SitemapProfile($this->get('elcodi.languages_iso_array'));

        $instance->addSitemapDumper($this->get('elcodi.sitemap_dumper.main'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.sitemap_renderer.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Renderer\XmlRenderer A Elcodi\Component\Sitemap\Renderer\XmlRenderer instance.
     */
    protected function getElcodi_SitemapRenderer_XmlService()
    {
        return $this->services['elcodi.sitemap_renderer.xml'] = new \Elcodi\Component\Sitemap\Renderer\XmlRenderer();
    }

    /**
     * Gets the 'elcodi.sitemap_transformer.static' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Sitemap\Transformer\StaticRouteTransformer A Elcodi\Component\Sitemap\Transformer\StaticRouteTransformer instance.
     */
    protected function getElcodi_SitemapTransformer_StaticService()
    {
        return $this->services['elcodi.sitemap_transformer.static'] = new \Elcodi\Component\Sitemap\Transformer\StaticRouteTransformer($this->get('router'));
    }

    /**
     * Gets the 'elcodi.stock_updater.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockUpdater\ProductStockUpdater A Elcodi\Component\Product\StockUpdater\ProductStockUpdater instance.
     */
    protected function getElcodi_StockUpdater_ProductService()
    {
        return $this->services['elcodi.stock_updater.product'] = new \Elcodi\Component\Product\StockUpdater\ProductStockUpdater($this->get('elcodi.object_manager.product'));
    }

    /**
     * Gets the 'elcodi.stock_updater.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockUpdater\VariantStockUpdater A Elcodi\Component\Product\StockUpdater\VariantStockUpdater instance.
     */
    protected function getElcodi_StockUpdater_ProductVariantService()
    {
        return $this->services['elcodi.stock_updater.product_variant'] = new \Elcodi\Component\Product\StockUpdater\VariantStockUpdater($this->get('elcodi.object_manager.product_variant'));
    }

    /**
     * Gets the 'elcodi.stock_updater.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockUpdater\PurchasableStockUpdater A Elcodi\Component\Product\StockUpdater\PurchasableStockUpdater instance.
     */
    protected function getElcodi_StockUpdater_PurchasableService()
    {
        $this->services['elcodi.stock_updater.purchasable'] = $instance = new \Elcodi\Component\Product\StockUpdater\PurchasableStockUpdater();

        $instance->addPurchasableStockUpdater($this->get('elcodi.stock_updater.product'));
        $instance->addPurchasableStockUpdater($this->get('elcodi.stock_updater.product_variant'));
        $instance->addPurchasableStockUpdater($this->get('elcodi.stock_updater.purchasable_pack'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.stock_updater.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockUpdater\PackStockUpdater A Elcodi\Component\Product\StockUpdater\PackStockUpdater instance.
     */
    protected function getElcodi_StockUpdater_PurchasablePackService()
    {
        $this->services['elcodi.stock_updater.purchasable_pack'] = $instance = new \Elcodi\Component\Product\StockUpdater\PackStockUpdater($this->get('elcodi.object_manager.purchasable_pack'));

        $instance->addPurchasableStockUpdater($this->get('elcodi.stock_updater.product'));
        $instance->addPurchasableStockUpdater($this->get('elcodi.stock_updater.product_variant'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.stock_validator.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockValidator\ProductStockValidator A Elcodi\Component\Product\StockValidator\ProductStockValidator instance.
     */
    protected function getElcodi_StockValidator_ProductService()
    {
        return $this->services['elcodi.stock_validator.product'] = new \Elcodi\Component\Product\StockValidator\ProductStockValidator();
    }

    /**
     * Gets the 'elcodi.stock_validator.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockValidator\VariantStockValidator A Elcodi\Component\Product\StockValidator\VariantStockValidator instance.
     */
    protected function getElcodi_StockValidator_ProductVariantService()
    {
        return $this->services['elcodi.stock_validator.product_variant'] = new \Elcodi\Component\Product\StockValidator\VariantStockValidator();
    }

    /**
     * Gets the 'elcodi.stock_validator.purchasable' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockValidator\PurchasableStockValidator A Elcodi\Component\Product\StockValidator\PurchasableStockValidator instance.
     */
    protected function getElcodi_StockValidator_PurchasableService()
    {
        $this->services['elcodi.stock_validator.purchasable'] = $instance = new \Elcodi\Component\Product\StockValidator\PurchasableStockValidator();

        $instance->addPurchasableStockValidator($this->get('elcodi.stock_validator.product'));
        $instance->addPurchasableStockValidator($this->get('elcodi.stock_validator.product_variant'));
        $instance->addPurchasableStockValidator($this->get('elcodi.stock_validator.purchasable_pack'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.stock_validator.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Product\StockValidator\PackStockValidator A Elcodi\Component\Product\StockValidator\PackStockValidator instance.
     */
    protected function getElcodi_StockValidator_PurchasablePackService()
    {
        $this->services['elcodi.stock_validator.purchasable_pack'] = $instance = new \Elcodi\Component\Product\StockValidator\PackStockValidator();

        $instance->addPurchasableStockValidator($this->get('elcodi.stock_validator.product'));
        $instance->addPurchasableStockValidator($this->get('elcodi.stock_validator.product_variant'));

        return $instance;
    }

    /**
     * Gets the 'elcodi.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Store\Entity\Interfaces\StoreInterface A Elcodi\Component\Store\Entity\Interfaces\StoreInterface instance.
     */
    protected function getElcodi_StoreService($lazyLoad = true)
    {
        return $this->services['elcodi.store'] = $this->get('elcodi.wrapper.store')->get();
    }

    /**
     * Gets the 'elcodi.store_address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Geo\Entity\Address A Elcodi\Component\Geo\Entity\Address instance.
     */
    public function getElcodi_StoreAddressService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.store_address'] = new ElcodiComponentGeoEntityAddress_00000000047384de0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_StoreAddressService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('elcodi.store')->getAddress();
    }

    /**
     * Gets the 'elcodi.store_default_currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Language\Entity\Interfaces\CurrencyInterface A Elcodi\Component\Language\Entity\Interfaces\CurrencyInterface instance.
     */
    protected function getElcodi_StoreDefaultCurrencyService($lazyLoad = true)
    {
        return $this->services['elcodi.store_default_currency'] = $this->get('elcodi.store')->getDefaultCurrency();
    }

    /**
     * Gets the 'elcodi.store_default_currency_iso' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreDefaultCurrencyIsoService()
    {
        return $this->services['elcodi.store_default_currency_iso'] = $this->get('elcodi.store_default_currency')->getIso();
    }

    /**
     * Gets the 'elcodi.store_default_language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Language\Entity\Interfaces\LanguageInterface A Elcodi\Component\Language\Entity\Interfaces\LanguageInterface instance.
     */
    protected function getElcodi_StoreDefaultLanguageService($lazyLoad = true)
    {
        return $this->services['elcodi.store_default_language'] = $this->get('elcodi.store')->getDefaultLanguage();
    }

    /**
     * Gets the 'elcodi.store_default_language_iso' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreDefaultLanguageIsoService()
    {
        return $this->services['elcodi.store_default_language_iso'] = $this->get('elcodi.store_default_language')->getIso();
    }

    /**
     * Gets the 'elcodi.store_routing_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreRoutingStrategyService()
    {
        return $this->services['elcodi.store_routing_strategy'] = $this->get('elcodi.store')->getRoutingStrategy();
    }

    /**
     * Gets the 'elcodi.store_template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    public function getElcodi_StoreTemplateService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.store_template'] = new ElcodiComponentPluginEntityPlugin_00000000047384da0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_StoreTemplateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return $this->get('elcodi.repository.plugin')->findOneBy(array('hash' => $this->get('elcodi.store_template_hash')));
    }

    /**
     * Gets the 'elcodi.store_template_bundle' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreTemplateBundleService()
    {
        return $this->services['elcodi.store_template_bundle'] = $this->get('elcodi.store_template')->getBundleName();
    }

    /**
     * Gets the 'elcodi.store_template_hash' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreTemplateHashService()
    {
        return $this->services['elcodi.store_template_hash'] = $this->get('elcodi.store')->getTemplate();
    }

    /**
     * Gets the 'elcodi.store_tracker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreTrackerService()
    {
        return $this->services['elcodi.store_tracker'] = $this->get('elcodi.store')->getTracker();
    }

    /**
     * Gets the 'elcodi.store_uses_stock' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodi_StoreUsesStockService()
    {
        return $this->services['elcodi.store_uses_stock'] = $this->get('elcodi.store')->getUseStock();
    }

    /**
     * Gets the 'elcodi.transformer.cart_coupon_to_order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Transformer\CartCouponToOrderCouponTransformer A Elcodi\Component\CartCoupon\Transformer\CartCouponToOrderCouponTransformer instance.
     */
    protected function getElcodi_Transformer_CartCouponToOrderCouponService()
    {
        return $this->services['elcodi.transformer.cart_coupon_to_order_coupon'] = new \Elcodi\Component\CartCoupon\Transformer\CartCouponToOrderCouponTransformer($this->get('elcodi.manager.cart_coupon'), $this->get('elcodi.truncator.order_coupon'), $this->get('elcodi.event_dispatcher.order_coupon'));
    }

    /**
     * Gets the 'elcodi.transformer.cart_line_order_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Transformer\CartLineOrderLineTransformer A Elcodi\Component\Cart\Transformer\CartLineOrderLineTransformer instance.
     */
    protected function getElcodi_Transformer_CartLineOrderLineService()
    {
        return $this->services['elcodi.transformer.cart_line_order_line'] = new \Elcodi\Component\Cart\Transformer\CartLineOrderLineTransformer($this->get('elcodi.event_dispatcher.order_line'), $this->get('elcodi.factory.order_line'));
    }

    /**
     * Gets the 'elcodi.transformer.cart_order' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Transformer\CartOrderTransformer A Elcodi\Component\Cart\Transformer\CartOrderTransformer instance.
     */
    protected function getElcodi_Transformer_CartOrderService()
    {
        return $this->services['elcodi.transformer.cart_order'] = new \Elcodi\Component\Cart\Transformer\CartOrderTransformer($this->get('elcodi.event_dispatcher.order'), $this->get('elcodi.transformer.cart_line_order_line'), $this->get('elcodi.factory.order'));
    }

    /**
     * Gets the 'elcodi.transformer.coupon_to_order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Transformer\CouponToOrderCouponTransformer A Elcodi\Component\CartCoupon\Transformer\CouponToOrderCouponTransformer instance.
     */
    protected function getElcodi_Transformer_CouponToOrderCouponService()
    {
        return $this->services['elcodi.transformer.coupon_to_order_coupon'] = new \Elcodi\Component\CartCoupon\Transformer\CouponToOrderCouponTransformer($this->get('elcodi.object_manager.order_coupon'), $this->get('elcodi.event_dispatcher.coupon'), $this->get('elcodi.factory.order_coupon'));
    }

    /**
     * Gets the 'elcodi.transformer.location_to_location_data' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Transformer\LocationToLocationDataTransformer A Elcodi\Component\Geo\Transformer\LocationToLocationDataTransformer instance.
     */
    protected function getElcodi_Transformer_LocationToLocationDataService()
    {
        return $this->services['elcodi.transformer.location_to_location_data'] = new \Elcodi\Component\Geo\Transformer\LocationToLocationDataTransformer($this->get('elcodi.factory.location_data'));
    }

    /**
     * Gets the 'elcodi.transformer.media_file_identifier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Transformer\FileIdentifierTransformer A Elcodi\Component\Media\Transformer\FileIdentifierTransformer instance.
     */
    protected function getElcodi_Transformer_MediaFileIdentifierService()
    {
        return $this->services['elcodi.transformer.media_file_identifier'] = new \Elcodi\Component\Media\Transformer\FileIdentifierTransformer();
    }

    /**
     * Gets the 'elcodi.transformer.media_image_etag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Transformer\ImageEtagTransformer A Elcodi\Component\Media\Transformer\ImageEtagTransformer instance.
     */
    protected function getElcodi_Transformer_MediaImageEtagService()
    {
        return $this->services['elcodi.transformer.media_image_etag'] = new \Elcodi\Component\Media\Transformer\ImageEtagTransformer();
    }

    /**
     * Gets the 'elcodi.transformer.page_response' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Page\Transformer\PageResponseTransformer A Elcodi\Component\Page\Transformer\PageResponseTransformer instance.
     */
    protected function getElcodi_Transformer_PageResponseService()
    {
        return $this->services['elcodi.transformer.page_response'] = new \Elcodi\Component\Page\Transformer\PageResponseTransformer($this->get('request_stack'), $this->get('router'), $this->get('elcodi.page_renderer_chain'), 'elcodi.route.page_render');
    }

    /**
     * Gets the 'elcodi.truncator.order_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\OrderCouponTruncator A Elcodi\Component\CartCoupon\Services\OrderCouponTruncator instance.
     */
    protected function getElcodi_Truncator_OrderCouponService()
    {
        return $this->services['elcodi.truncator.order_coupon'] = new \Elcodi\Component\CartCoupon\Services\OrderCouponTruncator($this->get('elcodi.repository.order_coupon'), $this->get('elcodi.object_manager.order_coupon'));
    }

    /**
     * Gets the 'elcodi.updater.cart_line_stock' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartLineStockUpdater A Elcodi\Component\Cart\Services\CartLineStockUpdater instance.
     */
    protected function getElcodi_Updater_CartLineStockService()
    {
        return $this->services['elcodi.updater.cart_line_stock'] = new \Elcodi\Component\Cart\Services\CartLineStockUpdater($this->get('elcodi.stock_updater.purchasable'));
    }

    /**
     * Gets the 'elcodi.uploader.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Media\Services\ImageUploader A Elcodi\Component\Media\Services\ImageUploader instance.
     */
    protected function getElcodi_Uploader_ImageService()
    {
        return $this->services['elcodi.uploader.image'] = new \Elcodi\Component\Media\Services\ImageUploader($this->get('elcodi.object_manager.image'), $this->get('elcodi.manager.media_file'), $this->get('elcodi.manager.media_image'), $this->get('elcodi.event_dispatcher.media'));
    }

    /**
     * Gets the 'elcodi.validator.cart_amount' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartAmountValidator A Elcodi\Component\Cart\Services\CartAmountValidator instance.
     */
    protected function getElcodi_Validator_CartAmountService()
    {
        return $this->services['elcodi.validator.cart_amount'] = new \Elcodi\Component\Cart\Services\CartAmountValidator();
    }

    /**
     * Gets the 'elcodi.validator.cart_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\CartCouponValidator A Elcodi\Component\CartCoupon\Services\CartCouponValidator instance.
     */
    protected function getElcodi_Validator_CartCouponService()
    {
        return $this->services['elcodi.validator.cart_coupon'] = new \Elcodi\Component\CartCoupon\Services\CartCouponValidator($this->get('elcodi.manager.cart_coupon'), $this->get('elcodi.manager.coupon'), $this->get('elcodi.event_dispatcher.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.validator.cart_coupon_minimum_price' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\CartCouponMinimumPriceValidator A Elcodi\Component\CartCoupon\Services\CartCouponMinimumPriceValidator instance.
     */
    protected function getElcodi_Validator_CartCouponMinimumPriceService()
    {
        return $this->services['elcodi.validator.cart_coupon_minimum_price'] = new \Elcodi\Component\CartCoupon\Services\CartCouponMinimumPriceValidator($this->get('elcodi.converter.currency'));
    }

    /**
     * Gets the 'elcodi.validator.cart_coupon_rule' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\CartCouponRuleValidator A Elcodi\Component\CartCoupon\Services\CartCouponRuleValidator instance.
     */
    protected function getElcodi_Validator_CartCouponRuleService()
    {
        return $this->services['elcodi.validator.cart_coupon_rule'] = new \Elcodi\Component\CartCoupon\Services\CartCouponRuleValidator($this->get('elcodi.manager.rule'));
    }

    /**
     * Gets the 'elcodi.validator.cart_integrity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartIntegrityValidator A Elcodi\Component\Cart\Services\CartIntegrityValidator instance.
     */
    protected function getElcodi_Validator_CartIntegrityService()
    {
        return $this->services['elcodi.validator.cart_integrity'] = new \Elcodi\Component\Cart\Services\CartIntegrityValidator($this->get('elcodi.event_dispatcher.cart'), $this->get('elcodi.stock_validator.purchasable'), $this->get('elcodi.manager.cart'), $this->get('elcodi.store_uses_stock', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'elcodi.validator.cart_shipping_method' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Services\CartShippingAmountValidator A Elcodi\Component\Cart\Services\CartShippingAmountValidator instance.
     */
    protected function getElcodi_Validator_CartShippingMethodService()
    {
        return $this->services['elcodi.validator.cart_shipping_method'] = new \Elcodi\Component\Cart\Services\CartShippingAmountValidator($this->get('elcodi.wrapper.empty_money'));
    }

    /**
     * Gets the 'elcodi.validator.city_exists' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Geo\Validator\Constraints\CityExistsValidator A Elcodi\Component\Geo\Validator\Constraints\CityExistsValidator instance.
     */
    protected function getElcodi_Validator_CityExistsService()
    {
        return $this->services['elcodi.validator.city_exists'] = new \Elcodi\Component\Geo\Validator\Constraints\CityExistsValidator($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi.validator.duplicated_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\DuplicatedCouponValidator A Elcodi\Component\CartCoupon\Services\DuplicatedCouponValidator instance.
     */
    protected function getElcodi_Validator_DuplicatedCouponService()
    {
        return $this->services['elcodi.validator.duplicated_coupon'] = new \Elcodi\Component\CartCoupon\Services\DuplicatedCouponValidator($this->get('elcodi.repository.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.validator.stackable_coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\CartCoupon\Services\StackableCouponValidator A Elcodi\Component\CartCoupon\Services\StackableCouponValidator instance.
     */
    protected function getElcodi_Validator_StackableCouponService()
    {
        return $this->services['elcodi.validator.stackable_coupon'] = new \Elcodi\Component\CartCoupon\Services\StackableCouponValidator($this->get('elcodi.repository.cart_coupon'));
    }

    /**
     * Gets the 'elcodi.wrapper.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Wrapper\AdminUserWrapper A Elcodi\Component\User\Wrapper\AdminUserWrapper instance.
     */
    protected function getElcodi_Wrapper_AdminUserService()
    {
        return $this->services['elcodi.wrapper.admin_user'] = new \Elcodi\Component\User\Wrapper\AdminUserWrapper($this->get('elcodi.factory.admin_user'), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'elcodi.wrapper.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Wrapper\CartWrapper A Elcodi\Component\Cart\Wrapper\CartWrapper instance.
     */
    protected function getElcodi_Wrapper_CartService()
    {
        return $this->services['elcodi.wrapper.cart'] = new \Elcodi\Component\Cart\Wrapper\CartWrapper($this->get('elcodi.event_dispatcher.cart'), $this->get('elcodi.factory.cart'), $this->get('elcodi.wrapper.cart_session'), $this->get('elcodi.wrapper.customer'));
    }

    /**
     * Gets the 'elcodi.wrapper.cart_session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Cart\Wrapper\CartSessionWrapper A Elcodi\Component\Cart\Wrapper\CartSessionWrapper instance.
     */
    protected function getElcodi_Wrapper_CartSessionService()
    {
        return $this->services['elcodi.wrapper.cart_session'] = new \Elcodi\Component\Cart\Wrapper\CartSessionWrapper($this->get('elcodi.session_manager.cart'), $this->get('elcodi.repository.cart'));
    }

    /**
     * Gets the 'elcodi.wrapper.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Wrapper\CurrencyWrapper A Elcodi\Component\Currency\Wrapper\CurrencyWrapper instance.
     */
    protected function getElcodi_Wrapper_CurrencyService()
    {
        return $this->services['elcodi.wrapper.currency'] = new \Elcodi\Component\Currency\Wrapper\CurrencyWrapper($this->get('elcodi.manager.currency_session'), $this->get('elcodi.repository.currency'), $this->get('elcodi.wrapper.default_currency'));
    }

    /**
     * Gets the 'elcodi.wrapper.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\Wrapper\CustomerWrapper A Elcodi\Component\User\Wrapper\CustomerWrapper instance.
     */
    protected function getElcodi_Wrapper_CustomerService()
    {
        return $this->services['elcodi.wrapper.customer'] = new \Elcodi\Component\User\Wrapper\CustomerWrapper($this->get('elcodi.factory.customer'), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'elcodi.wrapper.default_currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Wrapper\DefaultCurrencyWrapper A Elcodi\Component\Currency\Wrapper\DefaultCurrencyWrapper instance.
     */
    protected function getElcodi_Wrapper_DefaultCurrencyService()
    {
        return $this->services['elcodi.wrapper.default_currency'] = new \Elcodi\Component\Currency\Wrapper\DefaultCurrencyWrapper($this->get('elcodi.repository.currency'), $this->get('elcodi.store_default_currency_iso'));
    }

    /**
     * Gets the 'elcodi.wrapper.empty_money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Currency\Wrapper\EmptyMoneyWrapper A Elcodi\Component\Currency\Wrapper\EmptyMoneyWrapper instance.
     */
    protected function getElcodi_Wrapper_EmptyMoneyService()
    {
        return $this->services['elcodi.wrapper.empty_money'] = new \Elcodi\Component\Currency\Wrapper\EmptyMoneyWrapper($this->get('elcodi.wrapper.default_currency'));
    }

    /**
     * Gets the 'elcodi.wrapper.payment_methods' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Payment\Wrapper\PaymentWrapper A Elcodi\Component\Payment\Wrapper\PaymentWrapper instance.
     */
    protected function getElcodi_Wrapper_PaymentMethodsService()
    {
        return $this->services['elcodi.wrapper.payment_methods'] = new \Elcodi\Component\Payment\Wrapper\PaymentWrapper($this->get('elcodi.event_dispatcher.payment'));
    }

    /**
     * Gets the 'elcodi.wrapper.shipping_methods' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Shipping\Wrapper\ShippingWrapper A Elcodi\Component\Shipping\Wrapper\ShippingWrapper instance.
     */
    protected function getElcodi_Wrapper_ShippingMethodsService()
    {
        return $this->services['elcodi.wrapper.shipping_methods'] = new \Elcodi\Component\Shipping\Wrapper\ShippingWrapper($this->get('elcodi.event_dispatcher.shipping'));
    }

    /**
     * Gets the 'elcodi.wrapper.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Store\Wrapper\StoreWrapper A Elcodi\Component\Store\Wrapper\StoreWrapper instance.
     */
    public function getElcodi_Wrapper_StoreService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi.wrapper.store'] = new ElcodiComponentStoreWrapperStoreWrapper_00000000047384c70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodi_Wrapper_StoreService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Store\Wrapper\StoreWrapper($this->get('elcodi.repository.store'));
    }

    /**
     * Gets the 'elcodi_admin.category_sorter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Services\CategorySorter A Elcodi\Admin\ProductBundle\Services\CategorySorter instance.
     */
    protected function getElcodiAdmin_CategorySorterService()
    {
        return $this->services['elcodi_admin.category_sorter'] = new \Elcodi\Admin\ProductBundle\Services\CategorySorter($this->get('elcodi.repository.category'), $this->get('elcodi.object_manager.category'), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'elcodi_admin.event_listener.category_position' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\EventListener\NewCategoryPositionEventListener A Elcodi\Admin\ProductBundle\EventListener\NewCategoryPositionEventListener instance.
     */
    protected function getElcodiAdmin_EventListener_CategoryPositionService()
    {
        return $this->services['elcodi_admin.event_listener.category_position'] = new \Elcodi\Admin\ProductBundle\EventListener\NewCategoryPositionEventListener();
    }

    /**
     * Gets the 'elcodi_admin.form.location_selector_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\GeoBundle\Form\LocationSelectorBuilder A Elcodi\Admin\GeoBundle\Form\LocationSelectorBuilder instance.
     */
    protected function getElcodiAdmin_Form_LocationSelectorBuilderService()
    {
        return $this->services['elcodi_admin.form.location_selector_builder'] = new \Elcodi\Admin\GeoBundle\Form\LocationSelectorBuilder($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi_admin.form_event_listener.permanent_page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PageBundle\Form\EventListener\PermanentPageSubscriber A Elcodi\Admin\PageBundle\Form\EventListener\PermanentPageSubscriber instance.
     */
    protected function getElcodiAdmin_FormEventListener_PermanentPageService()
    {
        return $this->services['elcodi_admin.form_event_listener.permanent_page'] = new \Elcodi\Admin\PageBundle\Form\EventListener\PermanentPageSubscriber();
    }

    /**
     * Gets the 'elcodi_admin.form_type.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\GeoBundle\Form\Type\AddressType A Elcodi\Admin\GeoBundle\Form\Type\AddressType instance.
     */
    protected function getElcodiAdmin_FormType_AddressService()
    {
        $this->services['elcodi_admin.form_type.address'] = $instance = new \Elcodi\Admin\GeoBundle\Form\Type\AddressType();

        $instance->setFactory($this->get('elcodi.factory.address'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.admin_user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\AdminUserType A Elcodi\Admin\UserBundle\Form\Type\AdminUserType instance.
     */
    protected function getElcodiAdmin_FormType_AdminUserService()
    {
        $this->services['elcodi_admin.form_type.admin_user'] = $instance = new \Elcodi\Admin\UserBundle\Form\Type\AdminUserType();

        $instance->setFactory($this->get('elcodi.factory.admin_user'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.attribute' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\AttributeBundle\Form\Type\AttributeType A Elcodi\Admin\AttributeBundle\Form\Type\AttributeType instance.
     */
    protected function getElcodiAdmin_FormType_AttributeService()
    {
        $this->services['elcodi_admin.form_type.attribute'] = $instance = new \Elcodi\Admin\AttributeBundle\Form\Type\AttributeType();

        $instance->setFactory($this->get('elcodi.factory.attribute'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.banner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\BannerBundle\Form\Type\BannerType A Elcodi\Admin\BannerBundle\Form\Type\BannerType instance.
     */
    protected function getElcodiAdmin_FormType_BannerService()
    {
        $this->services['elcodi_admin.form_type.banner'] = $instance = new \Elcodi\Admin\BannerBundle\Form\Type\BannerType('Elcodi\\Component\\Media\\Entity\\Image', 'Elcodi\\Component\\Banner\\Entity\\BannerZone');

        $instance->setFactory($this->get('elcodi.factory.banner'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.banner_zone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\BannerBundle\Form\Type\BannerZoneType A Elcodi\Admin\BannerBundle\Form\Type\BannerZoneType instance.
     */
    protected function getElcodiAdmin_FormType_BannerZoneService()
    {
        $this->services['elcodi_admin.form_type.banner_zone'] = $instance = new \Elcodi\Admin\BannerBundle\Form\Type\BannerZoneType('Elcodi\\Component\\Language\\Entity\\Language', 'Elcodi\\Component\\Banner\\Entity\\Banner');

        $instance->setFactory($this->get('elcodi.factory.banner_zone'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.blog_post' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PageBundle\Form\Type\BlogPostType A Elcodi\Admin\PageBundle\Form\Type\BlogPostType instance.
     */
    protected function getElcodiAdmin_FormType_BlogPostService()
    {
        $this->services['elcodi_admin.form_type.blog_post'] = $instance = new \Elcodi\Admin\PageBundle\Form\Type\BlogPostType();

        $instance->setFactory($this->get('elcodi.factory.page'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Form\Type\CategoryType A Elcodi\Admin\ProductBundle\Form\Type\CategoryType instance.
     */
    protected function getElcodiAdmin_FormType_CategoryService()
    {
        $this->services['elcodi_admin.form_type.category'] = $instance = new \Elcodi\Admin\ProductBundle\Form\Type\CategoryType();

        $instance->setFactory($this->get('elcodi.factory.category'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CouponBundle\Form\Type\CouponType A Elcodi\Admin\CouponBundle\Form\Type\CouponType instance.
     */
    protected function getElcodiAdmin_FormType_CouponService()
    {
        $this->services['elcodi_admin.form_type.coupon'] = $instance = new \Elcodi\Admin\CouponBundle\Form\Type\CouponType('Elcodi\\Component\\Rule\\Entity\\Rule');

        $instance->setFactory($this->get('elcodi.factory.coupon'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CurrencyBundle\Form\Type\CurrencyType A Elcodi\Admin\CurrencyBundle\Form\Type\CurrencyType instance.
     */
    protected function getElcodiAdmin_FormType_CurrencyService()
    {
        $this->services['elcodi_admin.form_type.currency'] = $instance = new \Elcodi\Admin\CurrencyBundle\Form\Type\CurrencyType();

        $instance->setFactory($this->get('elcodi.factory.currency'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\CustomerType A Elcodi\Admin\UserBundle\Form\Type\CustomerType instance.
     */
    protected function getElcodiAdmin_FormType_CustomerService()
    {
        $this->services['elcodi_admin.form_type.customer'] = $instance = new \Elcodi\Admin\UserBundle\Form\Type\CustomerType('Elcodi\\Component\\Language\\Entity\\Language');

        $instance->setFactory($this->get('elcodi.factory.customer'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PageBundle\Form\Type\EmailType A Elcodi\Admin\PageBundle\Form\Type\EmailType instance.
     */
    protected function getElcodiAdmin_FormType_EmailService()
    {
        $this->services['elcodi_admin.form_type.email'] = $instance = new \Elcodi\Admin\PageBundle\Form\Type\EmailType();

        $instance->setFactory($this->get('elcodi.factory.page'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.image' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\MediaBundle\Form\Type\ImageType A Elcodi\Admin\MediaBundle\Form\Type\ImageType instance.
     */
    protected function getElcodiAdmin_FormType_ImageService()
    {
        return $this->services['elcodi_admin.form_type.image'] = new \Elcodi\Admin\MediaBundle\Form\Type\ImageType();
    }

    /**
     * Gets the 'elcodi_admin.form_type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\StoreBundle\Form\Type\StoreSettingsType A Elcodi\Admin\StoreBundle\Form\Type\StoreSettingsType instance.
     */
    protected function getElcodiAdmin_FormType_LanguageService()
    {
        $this->services['elcodi_admin.form_type.language'] = $instance = new \Elcodi\Admin\StoreBundle\Form\Type\StoreSettingsType('Elcodi\\Component\\Currency\\Entity\\Currency', 'Elcodi\\Component\\Language\\Entity\\Language');

        $instance->setFactory($this->get('elcodi.factory.store'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\LoginType A Elcodi\Admin\UserBundle\Form\Type\LoginType instance.
     */
    protected function getElcodiAdmin_FormType_LoginService()
    {
        return $this->services['elcodi_admin.form_type.login'] = new \Elcodi\Admin\UserBundle\Form\Type\LoginType($this->get('router'));
    }

    /**
     * Gets the 'elcodi_admin.form_type.manufacturer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Form\Type\ManufacturerType A Elcodi\Admin\ProductBundle\Form\Type\ManufacturerType instance.
     */
    protected function getElcodiAdmin_FormType_ManufacturerService()
    {
        $this->services['elcodi_admin.form_type.manufacturer'] = $instance = new \Elcodi\Admin\ProductBundle\Form\Type\ManufacturerType('Elcodi\\Component\\Media\\Entity\\Image');

        $instance->setFactory($this->get('elcodi.factory.manufacturer'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CurrencyBundle\Form\Type\MoneyType A Elcodi\Admin\CurrencyBundle\Form\Type\MoneyType instance.
     */
    protected function getElcodiAdmin_FormType_MoneyService()
    {
        return $this->services['elcodi_admin.form_type.money'] = new \Elcodi\Admin\CurrencyBundle\Form\Type\MoneyType($this->get('elcodi.wrapper.default_currency'), 'Elcodi\\Component\\Currency\\Entity\\Currency');
    }

    /**
     * Gets the 'elcodi_admin.form_type.newsletter_subscription' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\NewsletterBundle\Form\Type\NewsletterSubscriptionType A Elcodi\Admin\NewsletterBundle\Form\Type\NewsletterSubscriptionType instance.
     */
    protected function getElcodiAdmin_FormType_NewsletterSubscriptionService()
    {
        $this->services['elcodi_admin.form_type.newsletter_subscription'] = $instance = new \Elcodi\Admin\NewsletterBundle\Form\Type\NewsletterSubscriptionType();

        $instance->setFactory($this->get('elcodi.factory.newsletter_subscription'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PageBundle\Form\Type\PageType A Elcodi\Admin\PageBundle\Form\Type\PageType instance.
     */
    protected function getElcodiAdmin_FormType_PageService()
    {
        $this->services['elcodi_admin.form_type.page'] = $instance = new \Elcodi\Admin\PageBundle\Form\Type\PageType($this->get('elcodi_admin.form_event_listener.permanent_page'));

        $instance->setFactory($this->get('elcodi.factory.page'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.password_recover' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\PasswordRecoverType A Elcodi\Admin\UserBundle\Form\Type\PasswordRecoverType instance.
     */
    protected function getElcodiAdmin_FormType_PasswordRecoverService()
    {
        return $this->services['elcodi_admin.form_type.password_recover'] = new \Elcodi\Admin\UserBundle\Form\Type\PasswordRecoverType();
    }

    /**
     * Gets the 'elcodi_admin.form_type.password_remember' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\PasswordRememberType A Elcodi\Admin\UserBundle\Form\Type\PasswordRememberType instance.
     */
    protected function getElcodiAdmin_FormType_PasswordRememberService()
    {
        return $this->services['elcodi_admin.form_type.password_remember'] = new \Elcodi\Admin\UserBundle\Form\Type\PasswordRememberType();
    }

    /**
     * Gets the 'elcodi_admin.form_type.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Form\Type\ProductType A Elcodi\Admin\ProductBundle\Form\Type\ProductType instance.
     */
    protected function getElcodiAdmin_FormType_ProductService()
    {
        $this->services['elcodi_admin.form_type.product'] = $instance = new \Elcodi\Admin\ProductBundle\Form\Type\ProductType('Elcodi\\Component\\Product\\Entity\\Manufacturer', 'Elcodi\\Component\\Product\\Entity\\Category', 'Elcodi\\Component\\Media\\Entity\\Image');

        $instance->setFactory($this->get('elcodi.factory.product'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.product_variant' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Form\Type\VariantType A Elcodi\Admin\ProductBundle\Form\Type\VariantType instance.
     */
    protected function getElcodiAdmin_FormType_ProductVariantService()
    {
        $this->services['elcodi_admin.form_type.product_variant'] = $instance = new \Elcodi\Admin\ProductBundle\Form\Type\VariantType('Elcodi\\Component\\Attribute\\Entity\\Value', 'Elcodi\\Component\\Media\\Entity\\Image');

        $instance->setFactory($this->get('elcodi.factory.product_variant'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\ProfileType A Elcodi\Admin\UserBundle\Form\Type\ProfileType instance.
     */
    protected function getElcodiAdmin_FormType_ProfileService()
    {
        $this->services['elcodi_admin.form_type.profile'] = $instance = new \Elcodi\Admin\UserBundle\Form\Type\ProfileType();

        $instance->setFactory($this->get('elcodi.factory.customer'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.purchasable_pack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Form\Type\PackType A Elcodi\Admin\ProductBundle\Form\Type\PackType instance.
     */
    protected function getElcodiAdmin_FormType_PurchasablePackService()
    {
        $this->services['elcodi_admin.form_type.purchasable_pack'] = $instance = new \Elcodi\Admin\ProductBundle\Form\Type\PackType($this->get('elcodi.name_resolver.purchasable'), 'Elcodi\\Component\\Product\\Entity\\Purchasable', 'Elcodi\\Component\\Product\\Entity\\Manufacturer', 'Elcodi\\Component\\Product\\Entity\\Category', 'Elcodi\\Component\\Media\\Entity\\Image');

        $instance->setFactory($this->get('elcodi.factory.purchasable_pack'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.register' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Form\Type\RegisterType A Elcodi\Admin\UserBundle\Form\Type\RegisterType instance.
     */
    protected function getElcodiAdmin_FormType_RegisterService()
    {
        return $this->services['elcodi_admin.form_type.register'] = new \Elcodi\Admin\UserBundle\Form\Type\RegisterType('Elcodi\\Component\\User\\Entity\\Customer');
    }

    /**
     * Gets the 'elcodi_admin.form_type.store_address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\StoreBundle\Form\Type\StoreAddressType A Elcodi\Admin\StoreBundle\Form\Type\StoreAddressType instance.
     */
    protected function getElcodiAdmin_FormType_StoreAddressService()
    {
        $this->services['elcodi_admin.form_type.store_address'] = $instance = new \Elcodi\Admin\StoreBundle\Form\Type\StoreAddressType();

        $instance->setFactory($this->get('elcodi.factory.store'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.form_type.store_corporate' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\StoreBundle\Form\Type\StoreCorporateType A Elcodi\Admin\StoreBundle\Form\Type\StoreCorporateType instance.
     */
    protected function getElcodiAdmin_FormType_StoreCorporateService()
    {
        $this->services['elcodi_admin.form_type.store_corporate'] = $instance = new \Elcodi\Admin\StoreBundle\Form\Type\StoreCorporateType('Elcodi\\Component\\Media\\Entity\\Image');

        $instance->setFactory($this->get('elcodi.factory.store'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CartBundle\Builder\MenuBuilder A Elcodi\Admin\CartBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_CartService()
    {
        return $this->services['elcodi_admin.menu_builder.cart'] = new \Elcodi\Admin\CartBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CoreBundle\Builder\MenuBuilder A Elcodi\Admin\CoreBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_CoreService()
    {
        return $this->services['elcodi_admin.menu_builder.core'] = new \Elcodi\Admin\CoreBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.coupon' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CouponBundle\Builder\MenuBuilder A Elcodi\Admin\CouponBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_CouponService()
    {
        return $this->services['elcodi_admin.menu_builder.coupon'] = new \Elcodi\Admin\CouponBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CurrencyBundle\Builder\MenuBuilder A Elcodi\Admin\CurrencyBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_CurrencyService()
    {
        return $this->services['elcodi_admin.menu_builder.currency'] = new \Elcodi\Admin\CurrencyBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\LanguageBundle\Builder\MenuBuilder A Elcodi\Admin\LanguageBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_LanguageService()
    {
        return $this->services['elcodi_admin.menu_builder.language'] = new \Elcodi\Admin\LanguageBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.orders_not_shipped' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\CartBundle\Builder\OrdersNotShippedBuilder A Elcodi\Admin\CartBundle\Builder\OrdersNotShippedBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_OrdersNotShippedService()
    {
        return $this->services['elcodi_admin.menu_builder.orders_not_shipped'] = new \Elcodi\Admin\CartBundle\Builder\OrdersNotShippedBuilder($this->get('elcodi.factory.menu_node'), $this->get('elcodi.repository.order'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.payment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PaymentBundle\Builder\MenuBuilder A Elcodi\Admin\PaymentBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_PaymentService()
    {
        return $this->services['elcodi_admin.menu_builder.payment'] = new \Elcodi\Admin\PaymentBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.plugin_entries' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PluginBundle\Builder\PluginMenuBuilder A Elcodi\Admin\PluginBundle\Builder\PluginMenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_PluginEntriesService()
    {
        return $this->services['elcodi_admin.menu_builder.plugin_entries'] = new \Elcodi\Admin\PluginBundle\Builder\PluginMenuBuilder($this->get('elcodi.factory.menu_node'), $this->get('elcodi.enabled_plugins'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.plugin_list' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\PluginBundle\Builder\MenuBuilder A Elcodi\Admin\PluginBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_PluginListService()
    {
        return $this->services['elcodi_admin.menu_builder.plugin_list'] = new \Elcodi\Admin\PluginBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Builder\MenuBuilder A Elcodi\Admin\ProductBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_ProductService()
    {
        return $this->services['elcodi_admin.menu_builder.product'] = new \Elcodi\Admin\ProductBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.shipping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ShippingBundle\Builder\MenuBuilder A Elcodi\Admin\ShippingBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_ShippingService()
    {
        return $this->services['elcodi_admin.menu_builder.shipping'] = new \Elcodi\Admin\ShippingBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.store' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\StoreBundle\Builder\MenuBuilder A Elcodi\Admin\StoreBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_StoreService()
    {
        return $this->services['elcodi_admin.menu_builder.store'] = new \Elcodi\Admin\StoreBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.template' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\TemplateBundle\Builder\MenuBuilder A Elcodi\Admin\TemplateBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_TemplateService()
    {
        return $this->services['elcodi_admin.menu_builder.template'] = new \Elcodi\Admin\TemplateBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.menu_builder.user' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Builder\MenuBuilder A Elcodi\Admin\UserBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiAdmin_MenuBuilder_UserService()
    {
        return $this->services['elcodi_admin.menu_builder.user'] = new \Elcodi\Admin\UserBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_admin.metric_intervals_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\MetricBundle\Services\MetricIntervalsResolver A Elcodi\Admin\MetricBundle\Services\MetricIntervalsResolver instance.
     */
    protected function getElcodiAdmin_MetricIntervalsResolverService()
    {
        return $this->services['elcodi_admin.metric_intervals_resolver'] = new \Elcodi\Admin\MetricBundle\Services\MetricIntervalsResolver();
    }

    /**
     * Gets the 'elcodi_admin.security.one_time_login_authenticator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\UserBundle\Security\OneTimeLoginAuthenticator A Elcodi\Admin\UserBundle\Security\OneTimeLoginAuthenticator instance.
     */
    protected function getElcodiAdmin_Security_OneTimeLoginAuthenticatorService()
    {
        return $this->services['elcodi_admin.security.one_time_login_authenticator'] = new \Elcodi\Admin\UserBundle\Security\OneTimeLoginAuthenticator($this->get('elcodi.object_manager.admin_user'), $this->get('elcodi.repository.admin_user'));
    }

    /**
     * Gets the 'elcodi_admin.twig_extension.metric_intervals' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\MetricBundle\Twig\MetricIntervalsExtension A Elcodi\Admin\MetricBundle\Twig\MetricIntervalsExtension instance.
     */
    protected function getElcodiAdmin_TwigExtension_MetricIntervalsService()
    {
        return $this->services['elcodi_admin.twig_extension.metric_intervals'] = new \Elcodi\Admin\MetricBundle\Twig\MetricIntervalsExtension($this->get('elcodi_admin.metric_intervals_resolver'));
    }

    /**
     * Gets the 'elcodi_admin.validator.minimum_money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Admin\ProductBundle\Validation\MinimumMoneyValidator A Elcodi\Admin\ProductBundle\Validation\MinimumMoneyValidator instance.
     */
    protected function getElcodiAdmin_Validator_MinimumMoneyService()
    {
        return $this->services['elcodi_admin.validator.minimum_money'] = new \Elcodi\Admin\ProductBundle\Validation\MinimumMoneyValidator();
    }

    /**
     * Gets the 'elcodi_bridge.payment_suite.event_listener.cart_paid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\CartPaidEventListener A Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\CartPaidEventListener instance.
     */
    protected function getElcodiBridge_PaymentSuite_EventListener_CartPaidService()
    {
        return $this->services['elcodi_bridge.payment_suite.event_listener.cart_paid'] = new \Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\CartPaidEventListener($this->get('elcodi.wrapper.cart'), $this->get('elcodi.transformer.cart_order'));
    }

    /**
     * Gets the 'elcodi_bridge.payment_suite.event_listener.order_to_paid' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\OrderToPaidEventListener A Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\OrderToPaidEventListener instance.
     */
    protected function getElcodiBridge_PaymentSuite_EventListener_OrderToPaidService()
    {
        return $this->services['elcodi_bridge.payment_suite.event_listener.order_to_paid'] = new \Elcodi\Bridge\PaymentSuiteBridgeBundle\EventListener\OrderToPaidEventListener($this->get('elcodi.order_payment_states_machine_manager'), $this->get('elcodi.object_manager.order'), $this->get('elcodi.object_manager.state_transition_machine_state_line'));
    }

    /**
     * Gets the 'elcodi_common.event_listener.firewall_store_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Common\FirewallBundle\EventListener\FirewallEventListener A Elcodi\Common\FirewallBundle\EventListener\FirewallEventListener instance.
     */
    protected function getElcodiCommon_EventListener_FirewallStoreAreaService()
    {
        return $this->services['elcodi_common.event_listener.firewall_store_area'] = new \Elcodi\Common\FirewallBundle\EventListener\FirewallEventListener($this->get('debug.event_dispatcher'), array(0 => array('eventName' => 'user.register', 'callback' => array(0 => 'elcodi_elcodi_store.event_listener.autologin_on_register', 1 => 'onUserRegister'), 'priority' => 0)));
    }

    /**
     * Gets the 'elcodi_common.renderer.template_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Page\Renderer\TemplatedPageRenderer A Elcodi\Component\Page\Renderer\TemplatedPageRenderer instance.
     */
    protected function getElcodiCommon_Renderer_TemplateRendererService()
    {
        return $this->services['elcodi_common.renderer.template_renderer'] = new \Elcodi\Component\Page\Renderer\TemplatedPageRenderer($this->get('templating'), 'Layout:_static.html.twig', array(0 => $this->get('elcodi.store_template_bundle')));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.add_order_completed_metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\MetricBundle\EventListener\AddOrderCompletedMetricEventListener A Elcodi\Store\MetricBundle\EventListener\AddOrderCompletedMetricEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_AddOrderCompletedMetricService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.add_order_completed_metric'] = new \Elcodi\Store\MetricBundle\EventListener\AddOrderCompletedMetricEventListener($this->get('elcodi.metric_manager'), $this->get('elcodi.store'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.autologin_on_register' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\User\EventListener\AutologinOnRegisterEventListener A Elcodi\Component\User\EventListener\AutologinOnRegisterEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_AutologinOnRegisterService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.autologin_on_register'] = new \Elcodi\Component\User\EventListener\AutologinOnRegisterEventListener($this->get('request_stack'), $this->get('security.token_storage'), $this->get('debug.event_dispatcher'), 'store_area');
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.password_remember_credentials' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\EventListener\RememberPasswordCredentialsEventListener A Elcodi\Store\UserBundle\EventListener\RememberPasswordCredentialsEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_PasswordRememberCredentialsService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.password_remember_credentials'] = new \Elcodi\Store\UserBundle\EventListener\RememberPasswordCredentialsEventListener($this->get('security.token_storage'), 'store_area');
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.send_customer_registration_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\EventListener\SendRegistrationEmailEventListener A Elcodi\Store\UserBundle\EventListener\SendRegistrationEmailEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_SendCustomerRegistrationEmailService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.send_customer_registration_email'] = new \Elcodi\Store\UserBundle\EventListener\SendRegistrationEmailEventListener($this->get('swiftmailer.mailer.default'), $this->get('twig'), $this->get('elcodi.repository.page'), $this->get('elcodi.store'), $this->get('elcodi_store.template_locator.page'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.send_order_confirmation_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartBundle\EventListener\SendOrderConfirmationEmailEventListener A Elcodi\Store\CartBundle\EventListener\SendOrderConfirmationEmailEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_SendOrderConfirmationEmailService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.send_order_confirmation_email'] = new \Elcodi\Store\CartBundle\EventListener\SendOrderConfirmationEmailEventListener($this->get('swiftmailer.mailer.default'), $this->get('twig'), $this->get('elcodi.repository.page'), $this->get('elcodi.store'), $this->get('elcodi_store.template_locator.page'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.send_order_shipped_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartBundle\EventListener\SendOrderShippedEmailEventListener A Elcodi\Store\CartBundle\EventListener\SendOrderShippedEmailEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_SendOrderShippedEmailService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.send_order_shipped_email'] = new \Elcodi\Store\CartBundle\EventListener\SendOrderShippedEmailEventListener($this->get('swiftmailer.mailer.default'), $this->get('twig'), $this->get('elcodi.repository.page'), $this->get('elcodi.store'), $this->get('elcodi_store.template_locator.page'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.send_password_recover_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\EventListener\SendPasswordRecoverEmailEventListener A Elcodi\Store\UserBundle\EventListener\SendPasswordRecoverEmailEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_SendPasswordRecoverEmailService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.send_password_recover_email'] = new \Elcodi\Store\UserBundle\EventListener\SendPasswordRecoverEmailEventListener($this->get('swiftmailer.mailer.default'), $this->get('twig'), $this->get('elcodi.repository.page'), $this->get('elcodi.store'), $this->get('elcodi_store.template_locator.page'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.event_listener.send_password_remember_email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\EventListener\SendPasswordRememberEmailEventListener A Elcodi\Store\UserBundle\EventListener\SendPasswordRememberEmailEventListener instance.
     */
    protected function getElcodiElcodiStore_EventListener_SendPasswordRememberEmailService()
    {
        return $this->services['elcodi_elcodi_store.event_listener.send_password_remember_email'] = new \Elcodi\Store\UserBundle\EventListener\SendPasswordRememberEmailEventListener($this->get('swiftmailer.mailer.default'), $this->get('twig'), $this->get('elcodi.repository.page'), $this->get('elcodi.store'), $this->get('elcodi_store.template_locator.page'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.form_type.login' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\Form\Type\LoginType A Elcodi\Store\UserBundle\Form\Type\LoginType instance.
     */
    protected function getElcodiElcodiStore_FormType_LoginService()
    {
        return $this->services['elcodi_elcodi_store.form_type.login'] = new \Elcodi\Store\UserBundle\Form\Type\LoginType($this->get('router'));
    }

    /**
     * Gets the 'elcodi_elcodi_store.form_type.password_recover' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\Form\Type\PasswordRecoverType A Elcodi\Store\UserBundle\Form\Type\PasswordRecoverType instance.
     */
    protected function getElcodiElcodiStore_FormType_PasswordRecoverService()
    {
        return $this->services['elcodi_elcodi_store.form_type.password_recover'] = new \Elcodi\Store\UserBundle\Form\Type\PasswordRecoverType();
    }

    /**
     * Gets the 'elcodi_elcodi_store.form_type.password_remember' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\Form\Type\PasswordRememberType A Elcodi\Store\UserBundle\Form\Type\PasswordRememberType instance.
     */
    protected function getElcodiElcodiStore_FormType_PasswordRememberService()
    {
        return $this->services['elcodi_elcodi_store.form_type.password_remember'] = new \Elcodi\Store\UserBundle\Form\Type\PasswordRememberType();
    }

    /**
     * Gets the 'elcodi_elcodi_store.form_type.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\Form\Type\ProfileType A Elcodi\Store\UserBundle\Form\Type\ProfileType instance.
     */
    protected function getElcodiElcodiStore_FormType_ProfileService()
    {
        $this->services['elcodi_elcodi_store.form_type.profile'] = $instance = new \Elcodi\Store\UserBundle\Form\Type\ProfileType();

        $instance->setFactory($this->get('elcodi.factory.customer'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_elcodi_store.form_type.register' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\UserBundle\Form\Type\RegisterType A Elcodi\Store\UserBundle\Form\Type\RegisterType instance.
     */
    protected function getElcodiElcodiStore_FormType_RegisterService()
    {
        $this->services['elcodi_elcodi_store.form_type.register'] = $instance = new \Elcodi\Store\UserBundle\Form\Type\RegisterType();

        $instance->setFactory($this->get('elcodi.factory.customer'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_elcodi_store.twig_extension.store_page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\PageBundle\Twig\PageExtension A Elcodi\Store\PageBundle\Twig\PageExtension instance.
     */
    protected function getElcodiElcodiStore_TwigExtension_StorePageService()
    {
        return $this->services['elcodi_elcodi_store.twig_extension.store_page'] = new \Elcodi\Store\PageBundle\Twig\PageExtension($this->get('elcodi.repository.page'));
    }

    /**
     * Gets the 'elcodi_plugin.bankwire' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_BankwireService()
    {
        return $this->services['elcodi_plugin.bankwire'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\BankwireBundle\\ElcodiBankwireBundle');
    }

    /**
     * Gets the 'elcodi_plugin.bankwire.event_listener.payment_collect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\BankwireBundle\EventListener\PaymentCollectEventListener A Elcodi\Plugin\BankwireBundle\EventListener\PaymentCollectEventListener instance.
     */
    protected function getElcodiPlugin_Bankwire_EventListener_PaymentCollectService()
    {
        return $this->services['elcodi_plugin.bankwire.event_listener.payment_collect'] = new \Elcodi\Plugin\BankwireBundle\EventListener\PaymentCollectEventListener($this->get('router'), $this->get('elcodi_plugin.bankwire'));
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_CustomShippingService()
    {
        return $this->services['elcodi_plugin.custom_shipping'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\CustomShippingBundle\\ElcodiCustomShippingBundle');
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.event_listener.shipping_collect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\EventListener\ShippingCollectEventListener A Elcodi\Plugin\CustomShippingBundle\EventListener\ShippingCollectEventListener instance.
     */
    protected function getElcodiPlugin_CustomShipping_EventListener_ShippingCollectService()
    {
        return $this->services['elcodi_plugin.custom_shipping.event_listener.shipping_collect'] = new \Elcodi\Plugin\CustomShippingBundle\EventListener\ShippingCollectEventListener($this->get('elcodi_plugin.custom_shipping'), $this->get('elcodi_plugin.custom_shipping.provider.shipping_ranges'));
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.factory.carrier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Factory\CarrierFactory A Elcodi\Plugin\CustomShippingBundle\Factory\CarrierFactory instance.
     */
    protected function getElcodiPlugin_CustomShipping_Factory_CarrierService()
    {
        $this->services['elcodi_plugin.custom_shipping.factory.carrier'] = $instance = new \Elcodi\Plugin\CustomShippingBundle\Factory\CarrierFactory();

        $instance->setEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier');

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.factory.shipping_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Factory\ShippingRangeFactory A Elcodi\Plugin\CustomShippingBundle\Factory\ShippingRangeFactory instance.
     */
    protected function getElcodiPlugin_CustomShipping_Factory_ShippingRangeService()
    {
        $this->services['elcodi_plugin.custom_shipping.factory.shipping_range'] = $instance = new \Elcodi\Plugin\CustomShippingBundle\Factory\ShippingRangeFactory($this->get('elcodi.wrapper.default_currency'));

        $instance->setEntityNamespace('Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange');

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.form_type.carrier' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Form\Type\CarrierType A Elcodi\Plugin\CustomShippingBundle\Form\Type\CarrierType instance.
     */
    protected function getElcodiPlugin_CustomShipping_FormType_CarrierService()
    {
        $this->services['elcodi_plugin.custom_shipping.form_type.carrier'] = $instance = new \Elcodi\Plugin\CustomShippingBundle\Form\Type\CarrierType('Elcodi\\Component\\Tax\\Entity\\Tax');

        $instance->setFactory($this->get('elcodi_plugin.custom_shipping.factory.carrier'));
        $instance->setEntityTranslatorFormEventListener($this->get('elcodi.event_listener.entity_translator_form'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.form_type.shipping_range' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Form\Type\ShippingRangeType A Elcodi\Plugin\CustomShippingBundle\Form\Type\ShippingRangeType instance.
     */
    protected function getElcodiPlugin_CustomShipping_FormType_ShippingRangeService()
    {
        $this->services['elcodi_plugin.custom_shipping.form_type.shipping_range'] = $instance = new \Elcodi\Plugin\CustomShippingBundle\Form\Type\ShippingRangeType('Elcodi\\Component\\Zone\\Entity\\Zone');

        $instance->setFactory($this->get('elcodi_plugin.custom_shipping.factory.shipping_range'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.menu_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Builder\MenuBuilder A Elcodi\Plugin\CustomShippingBundle\Builder\MenuBuilder instance.
     */
    protected function getElcodiPlugin_CustomShipping_MenuBuilderService()
    {
        return $this->services['elcodi_plugin.custom_shipping.menu_builder'] = new \Elcodi\Plugin\CustomShippingBundle\Builder\MenuBuilder($this->get('elcodi.factory.menu_node'));
    }

    /**
     * Gets the 'elcodi_plugin.custom_shipping.provider.shipping_ranges' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\CustomShippingBundle\Provider\ShippingRangesProvider A Elcodi\Plugin\CustomShippingBundle\Provider\ShippingRangesProvider instance.
     */
    protected function getElcodiPlugin_CustomShipping_Provider_ShippingRangesService()
    {
        return $this->services['elcodi_plugin.custom_shipping.provider.shipping_ranges'] = new \Elcodi\Plugin\CustomShippingBundle\Provider\ShippingRangesProvider($this->get('elcodi.repository.carrier'), $this->get('elcodi.converter.currency'), $this->get('elcodi.matcher.zone'));
    }

    /**
     * Gets the 'elcodi_plugin.disqus' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_DisqusService()
    {
        return $this->services['elcodi_plugin.disqus'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\DisqusBundle\\ElcodiDisqusBundle');
    }

    /**
     * Gets the 'elcodi_plugin.disqus.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\DisqusBundle\Templating\TwigRenderer A Elcodi\Plugin\DisqusBundle\Templating\TwigRenderer instance.
     */
    protected function getElcodiPlugin_Disqus_RendererService()
    {
        $this->services['elcodi_plugin.disqus.renderer'] = $instance = new \Elcodi\Plugin\DisqusBundle\Templating\TwigRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.disqus'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.event_listener.facebook_username' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FacebookBundle\EventListener\FacebookUsernameEventListener A Elcodi\Plugin\FacebookBundle\EventListener\FacebookUsernameEventListener instance.
     */
    protected function getElcodiPlugin_EventListener_FacebookUsernameService()
    {
        return $this->services['elcodi_plugin.event_listener.facebook_username'] = new \Elcodi\Plugin\FacebookBundle\EventListener\FacebookUsernameEventListener($this->get('elcodi_plugin.service.facebook_username_cleaner'));
    }

    /**
     * Gets the 'elcodi_plugin.event_listener.twitter_username' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\TwitterBundle\EventListener\TwitterUsernameEventListener A Elcodi\Plugin\TwitterBundle\EventListener\TwitterUsernameEventListener instance.
     */
    protected function getElcodiPlugin_EventListener_TwitterUsernameService()
    {
        return $this->services['elcodi_plugin.event_listener.twitter_username'] = new \Elcodi\Plugin\TwitterBundle\EventListener\TwitterUsernameEventListener($this->get('elcodi_plugin.service.twitter_username_cleaner'));
    }

    /**
     * Gets the 'elcodi_plugin.facebook' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_FacebookService()
    {
        return $this->services['elcodi_plugin.facebook'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\FacebookBundle\\ElcodiFacebookBundle');
    }

    /**
     * Gets the 'elcodi_plugin.facebook.follow_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FacebookBundle\Templating\FollowRenderer A Elcodi\Plugin\FacebookBundle\Templating\FollowRenderer instance.
     */
    protected function getElcodiPlugin_Facebook_FollowRendererService()
    {
        $this->services['elcodi_plugin.facebook.follow_renderer'] = $instance = new \Elcodi\Plugin\FacebookBundle\Templating\FollowRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.facebook'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.facebook.javascript_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FacebookBundle\Templating\JavascriptRenderer A Elcodi\Plugin\FacebookBundle\Templating\JavascriptRenderer instance.
     */
    protected function getElcodiPlugin_Facebook_JavascriptRendererService()
    {
        $this->services['elcodi_plugin.facebook.javascript_renderer'] = $instance = new \Elcodi\Plugin\FacebookBundle\Templating\JavascriptRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.facebook'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.facebook.share_post_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FacebookBundle\Templating\SharePostRenderer A Elcodi\Plugin\FacebookBundle\Templating\SharePostRenderer instance.
     */
    protected function getElcodiPlugin_Facebook_SharePostRendererService()
    {
        $this->services['elcodi_plugin.facebook.share_post_renderer'] = $instance = new \Elcodi\Plugin\FacebookBundle\Templating\SharePostRenderer($this->get('router'), $this->get('translator'));

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.facebook'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.free_payment' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_FreePaymentService()
    {
        return $this->services['elcodi_plugin.free_payment'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\FreePaymentBundle\\ElcodiFreePaymentBundle');
    }

    /**
     * Gets the 'elcodi_plugin.free_payment.event_listener.payment_collect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FreePaymentBundle\EventListener\PaymentCollectEventListener A Elcodi\Plugin\FreePaymentBundle\EventListener\PaymentCollectEventListener instance.
     */
    protected function getElcodiPlugin_FreePayment_EventListener_PaymentCollectService()
    {
        return $this->services['elcodi_plugin.free_payment.event_listener.payment_collect'] = new \Elcodi\Plugin\FreePaymentBundle\EventListener\PaymentCollectEventListener($this->get('router'), $this->get('elcodi_plugin.free_payment'));
    }

    /**
     * Gets the 'elcodi_plugin.google_analytics.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\GoogleAnalyticsBundle\Templating\TwigRenderer A Elcodi\Plugin\GoogleAnalyticsBundle\Templating\TwigRenderer instance.
     */
    protected function getElcodiPlugin_GoogleAnalytics_RendererService()
    {
        $this->services['elcodi_plugin.google_analytics.renderer'] = $instance = new \Elcodi\Plugin\GoogleAnalyticsBundle\Templating\TwigRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.plugin.google_analytics'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.paypal.event_listener.payment_collect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\PaypalWebCheckoutBundle\EventListener\PaymentCollectEventListener A Elcodi\Plugin\PaypalWebCheckoutBundle\EventListener\PaymentCollectEventListener instance.
     */
    protected function getElcodiPlugin_Paypal_EventListener_PaymentCollectService()
    {
        return $this->services['elcodi_plugin.paypal.event_listener.payment_collect'] = new \Elcodi\Plugin\PaypalWebCheckoutBundle\EventListener\PaymentCollectEventListener($this->get('router'), $this->get('elcodi_plugin.paypal_web_checkout'));
    }

    /**
     * Gets the 'elcodi_plugin.paypal_web_checkout' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_PaypalWebCheckoutService()
    {
        return $this->services['elcodi_plugin.paypal_web_checkout'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\PaypalWebCheckoutBundle\\ElcodiPaypalWebCheckoutBundle');
    }

    /**
     * Gets the 'elcodi_plugin.paypal_web_checkout.business' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodiPlugin_PaypalWebCheckout_BusinessService()
    {
        return $this->services['elcodi_plugin.paypal_web_checkout.business'] = $this->get('elcodi_plugin.paypal_web_checkout')->getFieldValue('business');
    }

    /**
     * Gets the 'elcodi_plugin.pinterest' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_PinterestService()
    {
        return $this->services['elcodi_plugin.pinterest'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\PinterestBundle\\ElcodiPinterestBundle');
    }

    /**
     * Gets the 'elcodi_plugin.pinterest.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\PinterestBundle\Templating\TwigRenderer A Elcodi\Plugin\PinterestBundle\Templating\TwigRenderer instance.
     */
    protected function getElcodiPlugin_Pinterest_RendererService()
    {
        $this->services['elcodi_plugin.pinterest.renderer'] = $instance = new \Elcodi\Plugin\PinterestBundle\Templating\TwigRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.pinterest'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.plugin.google_analytics' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_Plugin_GoogleAnalyticsService()
    {
        return $this->services['elcodi_plugin.plugin.google_analytics'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\GoogleAnalyticsBundle\\ElcodiGoogleAnalyticsBundle');
    }

    /**
     * Gets the 'elcodi_plugin.product_csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_ProductCsvService()
    {
        return $this->services['elcodi_plugin.product_csv'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\ProductCsvBundle\\ElcodiProductCsvBundle');
    }

    /**
     * Gets the 'elcodi_plugin.product_csv.csv_exporter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Goodby\CSV\Export\Standard\Exporter A Goodby\CSV\Export\Standard\Exporter instance.
     */
    protected function getElcodiPlugin_ProductCsv_CsvExporterService()
    {
        return $this->services['elcodi_plugin.product_csv.csv_exporter'] = new \Goodby\CSV\Export\Standard\Exporter($this->get('elcodi_plugin.product_csv.csv_exporter_config'));
    }

    /**
     * Gets the 'elcodi_plugin.product_csv.csv_exporter_config' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Goodby\CSV\Export\Standard\ExporterConfig A Goodby\CSV\Export\Standard\ExporterConfig instance.
     */
    protected function getElcodiPlugin_ProductCsv_CsvExporterConfigService()
    {
        $this->services['elcodi_plugin.product_csv.csv_exporter_config'] = $instance = new \Goodby\CSV\Export\Standard\ExporterConfig();

        $instance->setDelimiter(',');
        $instance->setNewline('
');

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.product_csv.exporter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\ProductCsvBundle\Services\ProductExporter A Elcodi\Plugin\ProductCsvBundle\Services\ProductExporter instance.
     */
    protected function getElcodiPlugin_ProductCsv_ExporterService()
    {
        return $this->services['elcodi_plugin.product_csv.exporter'] = new \Elcodi\Plugin\ProductCsvBundle\Services\ProductExporter($this->get('elcodi_plugin.product_csv.csv_exporter'));
    }

    /**
     * Gets the 'elcodi_plugin.product_csv.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\ProductCsvBundle\Templating\TwigRenderer A Elcodi\Plugin\ProductCsvBundle\Templating\TwigRenderer instance.
     */
    protected function getElcodiPlugin_ProductCsv_RendererService()
    {
        $this->services['elcodi_plugin.product_csv.renderer'] = $instance = new \Elcodi\Plugin\ProductCsvBundle\Templating\TwigRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.product_csv'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.service.facebook_username_cleaner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\FacebookBundle\Services\FacebookUsernameCleaner A Elcodi\Plugin\FacebookBundle\Services\FacebookUsernameCleaner instance.
     */
    protected function getElcodiPlugin_Service_FacebookUsernameCleanerService()
    {
        return $this->services['elcodi_plugin.service.facebook_username_cleaner'] = new \Elcodi\Plugin\FacebookBundle\Services\FacebookUsernameCleaner();
    }

    /**
     * Gets the 'elcodi_plugin.service.twitter_username_cleaner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\TwitterBundle\Services\TwitterUsernameCleaner A Elcodi\Plugin\TwitterBundle\Services\TwitterUsernameCleaner instance.
     */
    protected function getElcodiPlugin_Service_TwitterUsernameCleanerService()
    {
        return $this->services['elcodi_plugin.service.twitter_username_cleaner'] = new \Elcodi\Plugin\TwitterBundle\Services\TwitterUsernameCleaner();
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_StoreSetupWizardService()
    {
        return $this->services['elcodi_plugin.store_setup_wizard'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\StoreSetupWizardBundle\\ElcodiStoreSetupWizardBundle');
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard.event_listener.dashboard_redirection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DashboardRedirectionEventListener A Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DashboardRedirectionEventListener instance.
     */
    protected function getElcodiPlugin_StoreSetupWizard_EventListener_DashboardRedirectionService()
    {
        $this->services['elcodi_plugin.store_setup_wizard.event_listener.dashboard_redirection'] = $instance = new \Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DashboardRedirectionEventListener($this->get('router'), $this->get('elcodi_plugin.store_setup_wizard.wizard_status'), $this->get('elcodi_plugin.store_setup_wizard.wizard_routes'));

        $instance->setPlugin($this->get('elcodi_plugin.store_setup_wizard'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard.event_listener.disable_wizard' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DisableWizardEventListener A Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DisableWizardEventListener instance.
     */
    protected function getElcodiPlugin_StoreSetupWizard_EventListener_DisableWizardService()
    {
        $this->services['elcodi_plugin.store_setup_wizard.event_listener.disable_wizard'] = $instance = new \Elcodi\Plugin\StoreSetupWizardBundle\EventListener\DisableWizardEventListener($this->get('elcodi_plugin.store_setup_wizard.wizard_status'), $this->get('elcodi.manager.plugin'), $this->get('elcodi.object_manager.plugin'), $this->get('elcodi.store'));

        $instance->setPlugin($this->get('elcodi_plugin.store_setup_wizard'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard.renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StoreSetupWizardBundle\Templating\TwigRenderer A Elcodi\Plugin\StoreSetupWizardBundle\Templating\TwigRenderer instance.
     */
    protected function getElcodiPlugin_StoreSetupWizard_RendererService()
    {
        $this->services['elcodi_plugin.store_setup_wizard.renderer'] = $instance = new \Elcodi\Plugin\StoreSetupWizardBundle\Templating\TwigRenderer($this->get('elcodi_plugin.store_setup_wizard.wizard_status'), $this->get('request_stack'), $this->get('elcodi.store'), $this->get('elcodi_plugin.store_setup_wizard.wizard_routes'), $this->get('elcodi.repository.carrier'));

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.store_setup_wizard'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard.wizard_routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardRoutes A Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardRoutes instance.
     */
    protected function getElcodiPlugin_StoreSetupWizard_WizardRoutesService()
    {
        return $this->services['elcodi_plugin.store_setup_wizard.wizard_routes'] = new \Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardRoutes($this->get('elcodi_plugin.store_setup_wizard.wizard_status'));
    }

    /**
     * Gets the 'elcodi_plugin.store_setup_wizard.wizard_status' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardStatus A Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardStatus instance.
     */
    protected function getElcodiPlugin_StoreSetupWizard_WizardStatusService()
    {
        return $this->services['elcodi_plugin.store_setup_wizard.wizard_status'] = new \Elcodi\Plugin\StoreSetupWizardBundle\Services\WizardStatus($this->get('elcodi.repository.product'), $this->get('elcodi.store'), $this->get('elcodi.enabled_payment_plugins'), $this->get('elcodi.enabled_shipping_plugins'));
    }

    /**
     * Gets the 'elcodi_plugin.stripe' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_StripeService()
    {
        return $this->services['elcodi_plugin.stripe'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\StripeBundle\\ElcodiStripeBundle');
    }

    /**
     * Gets the 'elcodi_plugin.stripe.event_listener.payment_collect' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\StripeBundle\EventListener\PaymentCollectEventListener A Elcodi\Plugin\StripeBundle\EventListener\PaymentCollectEventListener instance.
     */
    protected function getElcodiPlugin_Stripe_EventListener_PaymentCollectService()
    {
        return $this->services['elcodi_plugin.stripe.event_listener.payment_collect'] = new \Elcodi\Plugin\StripeBundle\EventListener\PaymentCollectEventListener($this->get('elcodi_plugin.stripe'), $this->get('paymentsuite.bridge'), $this->get('form.factory'), $this->get('templating'), $this->get('elcodi_plugin.stripe.public_key'));
    }

    /**
     * Gets the 'elcodi_plugin.stripe.private_key' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodiPlugin_Stripe_PrivateKeyService()
    {
        return $this->services['elcodi_plugin.stripe.private_key'] = $this->get('elcodi_plugin.stripe')->getFieldValue('private_key');
    }

    /**
     * Gets the 'elcodi_plugin.stripe.public_key' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \StdClass A StdClass instance.
     */
    protected function getElcodiPlugin_Stripe_PublicKeyService()
    {
        return $this->services['elcodi_plugin.stripe.public_key'] = $this->get('elcodi_plugin.stripe')->getFieldValue('public_key');
    }

    /**
     * Gets the 'elcodi_plugin.twitter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Component\Plugin\Entity\Plugin A Elcodi\Component\Plugin\Entity\Plugin instance.
     */
    protected function getElcodiPlugin_TwitterService()
    {
        return $this->services['elcodi_plugin.twitter'] = $this->get('elcodi.repository.plugin')->find('Elcodi\\Plugin\\TwitterBundle\\ElcodiTwitterBundle');
    }

    /**
     * Gets the 'elcodi_plugin.twitter.follow_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\TwitterBundle\Templating\FollowRenderer A Elcodi\Plugin\TwitterBundle\Templating\FollowRenderer instance.
     */
    protected function getElcodiPlugin_Twitter_FollowRendererService()
    {
        $this->services['elcodi_plugin.twitter.follow_renderer'] = $instance = new \Elcodi\Plugin\TwitterBundle\Templating\FollowRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.twitter'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.twitter.javascript_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\TwitterBundle\Templating\JavascriptRenderer A Elcodi\Plugin\TwitterBundle\Templating\JavascriptRenderer instance.
     */
    protected function getElcodiPlugin_Twitter_JavascriptRendererService()
    {
        $this->services['elcodi_plugin.twitter.javascript_renderer'] = $instance = new \Elcodi\Plugin\TwitterBundle\Templating\JavascriptRenderer();

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.twitter'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_plugin.twitter.share_tweet_renderer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Plugin\TwitterBundle\Templating\ShareTweetRenderer A Elcodi\Plugin\TwitterBundle\Templating\ShareTweetRenderer instance.
     */
    protected function getElcodiPlugin_Twitter_ShareTweetRendererService()
    {
        $this->services['elcodi_plugin.twitter.share_tweet_renderer'] = $instance = new \Elcodi\Plugin\TwitterBundle\Templating\ShareTweetRenderer($this->get('router'), $this->get('translator'));

        $instance->setTemplating($this->get('twig'));
        $instance->setPlugin($this->get('elcodi_plugin.twitter'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.director.authorization' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Elcodi\Component\Core\Services\ObjectDirector A Elcodi\Component\Core\Services\ObjectDirector instance.
     */
    public function getElcodiStore_Director_AuthorizationService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['elcodi_store.director.authorization'] = new ElcodiComponentCoreServicesObjectDirector_00000000047393f50000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getElcodiStore_Director_AuthorizationService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Elcodi\Component\Core\Services\ObjectDirector($this->get('store.connect.object_manager.authorization'), $this->get('store.connect.repository.authorization'), $this->get('elcodi_store.factory.authorization'));
    }

    /**
     * Gets the 'elcodi_store.event_listener.categories_order_change' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ProductBundle\EventListener\CategoriesOrderChangeEventListener A Elcodi\Store\ProductBundle\EventListener\CategoriesOrderChangeEventListener instance.
     */
    protected function getElcodiStore_EventListener_CategoriesOrderChangeService()
    {
        return $this->services['elcodi_store.event_listener.categories_order_change'] = new \Elcodi\Store\ProductBundle\EventListener\CategoriesOrderChangeEventListener($this->get('elcodi_store.store_category_tree'));
    }

    /**
     * Gets the 'elcodi_store.event_listener.just_one_manual' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartCouponBundle\EventListener\JustOneManualCouponEventListener A Elcodi\Store\CartCouponBundle\EventListener\JustOneManualCouponEventListener instance.
     */
    protected function getElcodiStore_EventListener_JustOneManualService()
    {
        return $this->services['elcodi_store.event_listener.just_one_manual'] = new \Elcodi\Store\CartCouponBundle\EventListener\JustOneManualCouponEventListener($this->get('elcodi.repository.cart_coupon'));
    }

    /**
     * Gets the 'elcodi_store.event_listener.shipping_appliance' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartBundle\EventListener\ShippingApplianceEventListener A Elcodi\Store\CartBundle\EventListener\ShippingApplianceEventListener instance.
     */
    protected function getElcodiStore_EventListener_ShippingApplianceService()
    {
        return $this->services['elcodi_store.event_listener.shipping_appliance'] = new \Elcodi\Store\CartBundle\EventListener\ShippingApplianceEventListener($this->get('elcodi.event_dispatcher.cart'), $this->get('elcodi.wrapper.shipping_methods'), $this->get('elcodi.resolver.shipping'));
    }

    /**
     * Gets the 'elcodi_store.event_listener.store_disabled' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CoreBundle\EventListener\StoreUnavailableEventListener A Elcodi\Store\CoreBundle\EventListener\StoreUnavailableEventListener instance.
     */
    protected function getElcodiStore_EventListener_StoreDisabledService()
    {
        return $this->services['elcodi_store.event_listener.store_disabled'] = new \Elcodi\Store\CoreBundle\EventListener\StoreUnavailableEventListener($this->get('elcodi.store'), 'store.error.store_is_disabled');
    }

    /**
     * Gets the 'elcodi_store.factory.authorization' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ConnectBundle\Factory\AuthorizationFactory A Elcodi\Store\ConnectBundle\Factory\AuthorizationFactory instance.
     */
    protected function getElcodiStore_Factory_AuthorizationService()
    {
        $this->services['elcodi_store.factory.authorization'] = $instance = new \Elcodi\Store\ConnectBundle\Factory\AuthorizationFactory();

        $instance->setEntityNamespace('Elcodi\\Store\\ConnectBundle\\Entity\\Authorization');

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.form.location_selector_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\GeoBundle\Form\LocationSelectorBuilder A Elcodi\Store\GeoBundle\Form\LocationSelectorBuilder instance.
     */
    protected function getElcodiStore_Form_LocationSelectorBuilderService()
    {
        return $this->services['elcodi_store.form.location_selector_builder'] = new \Elcodi\Store\GeoBundle\Form\LocationSelectorBuilder($this->get('elcodi.location_provider_adapter.service'));
    }

    /**
     * Gets the 'elcodi_store.form_type.address' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\GeoBundle\Form\Type\AddressType A Elcodi\Store\GeoBundle\Form\Type\AddressType instance.
     */
    protected function getElcodiStore_FormType_AddressService()
    {
        $this->services['elcodi_store.form_type.address'] = $instance = new \Elcodi\Store\GeoBundle\Form\Type\AddressType();

        $instance->setFactory($this->get('elcodi.factory.address'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.form_type.cart' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartBundle\Form\Type\CartType A Elcodi\Store\CartBundle\Form\Type\CartType instance.
     */
    protected function getElcodiStore_FormType_CartService()
    {
        $this->services['elcodi_store.form_type.cart'] = $instance = new \Elcodi\Store\CartBundle\Form\Type\CartType($this->get('router'));

        $instance->setFactory($this->get('elcodi.factory.cart'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.form_type.cart_line' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartBundle\Form\Type\CartLineType A Elcodi\Store\CartBundle\Form\Type\CartLineType instance.
     */
    protected function getElcodiStore_FormType_CartLineService()
    {
        $this->services['elcodi_store.form_type.cart_line'] = $instance = new \Elcodi\Store\CartBundle\Form\Type\CartLineType();

        $instance->setFactory($this->get('elcodi.factory.cart_line'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.form_type.coupon_apply' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CartCouponBundle\Form\Type\CouponApplyType A Elcodi\Store\CartCouponBundle\Form\Type\CouponApplyType instance.
     */
    protected function getElcodiStore_FormType_CouponApplyService()
    {
        return $this->services['elcodi_store.form_type.coupon_apply'] = new \Elcodi\Store\CartCouponBundle\Form\Type\CouponApplyType($this->get('router'));
    }

    /**
     * Gets the 'elcodi_store.provider.oauth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ConnectBundle\Services\OAuthUserProvider A Elcodi\Store\ConnectBundle\Services\OAuthUserProvider instance.
     */
    protected function getElcodiStore_Provider_OauthService()
    {
        return $this->services['elcodi_store.provider.oauth'] = new \Elcodi\Store\ConnectBundle\Services\OAuthUserProvider($this->get('security.user.provider.concrete.customer'), $this->get('elcodi_store.director.authorization'), $this->get('elcodi.director.customer'), $this->get('elcodi.object_manager.customer'), $this->get('elcodi.event_dispatcher.user'));
    }

    /**
     * Gets the 'elcodi_store.sitemap_transformer.category' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ProductBundle\Transformer\CategoryTransformer A Elcodi\Store\ProductBundle\Transformer\CategoryTransformer instance.
     */
    protected function getElcodiStore_SitemapTransformer_CategoryService()
    {
        return $this->services['elcodi_store.sitemap_transformer.category'] = new \Elcodi\Store\ProductBundle\Transformer\CategoryTransformer($this->get('elcodi.entity_translator'), $this->get('router'));
    }

    /**
     * Gets the 'elcodi_store.sitemap_transformer.product' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ProductBundle\Transformer\ProductTransformer A Elcodi\Store\ProductBundle\Transformer\ProductTransformer instance.
     */
    protected function getElcodiStore_SitemapTransformer_ProductService()
    {
        return $this->services['elcodi_store.sitemap_transformer.product'] = new \Elcodi\Store\ProductBundle\Transformer\ProductTransformer($this->get('elcodi.entity_translator'), $this->get('router'));
    }

    /**
     * Gets the 'elcodi_store.store_category_tree' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\ProductBundle\Services\StoreCategoryTree A Elcodi\Store\ProductBundle\Services\StoreCategoryTree instance.
     */
    protected function getElcodiStore_StoreCategoryTreeService()
    {
        $this->services['elcodi_store.store_category_tree'] = $instance = new \Elcodi\Store\ProductBundle\Services\StoreCategoryTree($this->get('elcodi.provider.category_tree'), false, 'categories', $this->get('elcodi.locale'));

        $instance->setCache($this->get('doctrine_cache.providers.elcodi_categories'));
        $instance->setEncoder($this->get('elcodi.json_encoder'));

        return $instance;
    }

    /**
     * Gets the 'elcodi_store.template_locator.core' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CoreBundle\Services\TemplateLocator A Elcodi\Store\CoreBundle\Services\TemplateLocator instance.
     */
    protected function getElcodiStore_TemplateLocator_CoreService()
    {
        return $this->services['elcodi_store.template_locator.core'] = new \Elcodi\Store\CoreBundle\Services\TemplateLocator($this->get('templating'), array(0 => 'StoreOverrideBundle', 1 => $this->get('elcodi.store_template_bundle'), 2 => 'StoreFallbackBundle'));
    }

    /**
     * Gets the 'elcodi_store.template_locator.page' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Store\CoreBundle\Services\TemplateLocator A Elcodi\Store\CoreBundle\Services\TemplateLocator instance.
     */
    protected function getElcodiStore_TemplateLocator_PageService()
    {
        return $this->services['elcodi_store.template_locator.page'] = new \Elcodi\Store\CoreBundle\Services\TemplateLocator($this->get('templating'), array(0 => 'StoreOverrideBundle', 1 => 'StorePageBundle', 2 => 'StoreFallbackBundle'));
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator($this->get('kernel'), ($this->targetDirs[2].'/Resources'));
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter A Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter instance.
     */
    protected function getForm_CsrfProviderService()
    {
        return $this->services['form.csrf_provider'] = new \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter($this->get('security.csrf.token_manager'));
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory($this->get('form.registry'), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension($this, array('stripe_view' => 'paymentsuite.stripe.form_type', 'elcodi_form_type_plugin' => 'elcodi.form_type.plugin', 'form' => 'form.type.form', 'birthday' => 'form.type.birthday', 'checkbox' => 'form.type.checkbox', 'choice' => 'form.type.choice', 'collection' => 'form.type.collection', 'country' => 'form.type.country', 'date' => 'form.type.date', 'datetime' => 'form.type.datetime', 'email' => 'form.type.email', 'file' => 'form.type.file', 'hidden' => 'form.type.hidden', 'integer' => 'form.type.integer', 'language' => 'form.type.language', 'locale' => 'form.type.locale', 'money' => 'form.type.money', 'number' => 'form.type.number', 'password' => 'form.type.password', 'percent' => 'form.type.percent', 'radio' => 'form.type.radio', 'repeated' => 'form.type.repeated', 'search' => 'form.type.search', 'textarea' => 'form.type.textarea', 'text' => 'form.type.text', 'time' => 'form.type.time', 'timezone' => 'form.type.timezone', 'url' => 'form.type.url', 'button' => 'form.type.button', 'submit' => 'form.type.submit', 'reset' => 'form.type.reset', 'currency' => 'form.type.currency', 'entity' => 'form.type.entity', 'store_user_form_type_login' => 'elcodi_elcodi_store.form_type.login', 'store_user_form_type_register' => 'elcodi_elcodi_store.form_type.register', 'store_user_form_type_profile' => 'elcodi_elcodi_store.form_type.profile', 'store_user_form_type_password_remember' => 'elcodi_elcodi_store.form_type.password_remember', 'store_user_form_type_password_recover' => 'elcodi_elcodi_store.form_type.password_recover', 'store_geo_form_type_address' => 'elcodi_store.form_type.address', 'store_cart_form_type_cart' => 'elcodi_store.form_type.cart', 'store_cart_form_type_cart_line' => 'elcodi_store.form_type.cart_line', 'store_cart_coupon_form_type_coupon_apply' => 'elcodi_store.form_type.coupon_apply', 'elcodi_admin_user_form_type_login' => 'elcodi_admin.form_type.login', 'elcodi_admin_user_form_type_register' => 'elcodi_admin.form_type.register', 'elcodi_admin_user_form_type_profile' => 'elcodi_admin.form_type.profile', 'elcodi_admin_user_form_type_password_remember' => 'elcodi_admin.form_type.password_remember', 'elcodi_admin_user_form_type_password_recover' => 'elcodi_admin.form_type.password_recover', 'elcodi_admin_user_form_type_customer' => 'elcodi_admin.form_type.customer', 'elcodi_admin_user_form_type_admin_user' => 'elcodi_admin.form_type.admin_user', 'elcodi_admin_attribute_form_type_attribute' => 'elcodi_admin.form_type.attribute', 'elcodi_admin_banner_form_type_banner' => 'elcodi_admin.form_type.banner', 'elcodi_admin_banner_form_type_banner_zone' => 'elcodi_admin.form_type.banner_zone', 'elcodi_admin_coupon_form_type_coupon' => 'elcodi_admin.form_type.coupon', 'elcodi_admin_currency_form_type_currency' => 'elcodi_admin.form_type.currency', 'money_object' => 'elcodi_admin.form_type.money', 'elcodi_admin_media_form_type_image' => 'elcodi_admin.form_type.image', 'elcodi_admin_newsletter_form_type_newsletter_subscription' => 'elcodi_admin.form_type.newsletter_subscription', 'elcodi_admin_product_form_type_product' => 'elcodi_admin.form_type.product', 'elcodi_admin_product_form_type_product_variant' => 'elcodi_admin.form_type.product_variant', 'elcodi_admin_product_form_type_purchasable_pack' => 'elcodi_admin.form_type.purchasable_pack', 'elcodi_admin_product_form_type_category' => 'elcodi_admin.form_type.category', 'elcodi_admin_product_form_type_manufacturer' => 'elcodi_admin.form_type.manufacturer', 'elcodi_admin_page_form_type_page' => 'elcodi_admin.form_type.page', 'elcodi_admin_page_form_type_blog_post' => 'elcodi_admin.form_type.blog_post', 'elcodi_admin_page_form_type_email' => 'elcodi_admin.form_type.email', 'admin_geo_form_type_address' => 'elcodi_admin.form_type.address', 'elcodi_admin_store_form_type_store_settings' => 'elcodi_admin.form_type.language', 'elcodi_admin_store_form_type_store_address' => 'elcodi_admin.form_type.store_address', 'elcodi_admin_store_form_type_store_corporate' => 'elcodi_admin.form_type.store_corporate', 'elcodi_plugin_custom_shipping_form_type_shipping_range' => 'elcodi_plugin.custom_shipping.form_type.shipping_range', 'elcodi_plugin_custom_shipping_form_type_carrier' => 'elcodi_plugin.custom_shipping.form_type.carrier'), array('form' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.csrf', 3 => 'form.type_extension.form.data_collector'), 'repeated' => array(0 => 'form.type_extension.repeated.validator'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine'))), $this->get('form.resolved_type_factory'));
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy A Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy instance.
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), $this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    protected function getForm_Type_BirthdayService()
    {
        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    protected function getForm_Type_ButtonService()
    {
        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    protected function getForm_Type_CheckboxService()
    {
        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), $this->get('property_accessor'))));
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    protected function getForm_Type_CollectionService()
    {
        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    protected function getForm_Type_CountryService()
    {
        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    protected function getForm_Type_CurrencyService()
    {
        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    protected function getForm_Type_DateService()
    {
        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    protected function getForm_Type_DatetimeService()
    {
        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    protected function getForm_Type_EmailService()
    {
        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance.
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    protected function getForm_Type_FileService()
    {
        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType($this->get('property_accessor'));
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    protected function getForm_Type_HiddenService()
    {
        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    protected function getForm_Type_IntegerService()
    {
        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    protected function getForm_Type_LanguageService()
    {
        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    protected function getForm_Type_LocaleService()
    {
        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    protected function getForm_Type_MoneyService()
    {
        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    protected function getForm_Type_NumberService()
    {
        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    protected function getForm_Type_PasswordService()
    {
        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    protected function getForm_Type_PercentService()
    {
        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    protected function getForm_Type_RadioService()
    {
        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    protected function getForm_Type_RepeatedService()
    {
        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    protected function getForm_Type_ResetService()
    {
        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    protected function getForm_Type_SearchService()
    {
        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    protected function getForm_Type_SubmitService()
    {
        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    protected function getForm_Type_TextService()
    {
        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    protected function getForm_Type_TextareaService()
    {
        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    protected function getForm_Type_TimeService()
    {
        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    protected function getForm_Type_TimezoneService()
    {
        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    protected function getForm_Type_UrlService()
    {
        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension($this->get('security.csrf.token_manager'), true, '_token', $this->get('translator.default'), 'validators');
    }

    /**
     * Gets the 'form.type_extension.form.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension A Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension instance.
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension($this->get('data_collector.form'));
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(new \Symfony\Component\Form\Util\ServerParams($this->get('request_stack'))));
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension($this->get('validator'));
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser($this->get('doctrine'));
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser($this->get('validator'));
    }

    /**
     * Gets the 'fos_rest.body_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener A FOS\RestBundle\EventListener\BodyListener instance.
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->services['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener($this->get('fos_rest.decoder_provider'), false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.decoder.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonDecoder A FOS\RestBundle\Decoder\JsonDecoder instance.
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.jsontoform' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\JsonToFormDecoder A FOS\RestBundle\Decoder\JsonToFormDecoder instance.
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\RestBundle\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder.xml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\XmlDecoder A FOS\RestBundle\Decoder\XmlDecoder instance.
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder();
    }

    /**
     * Gets the 'fos_rest.decoder_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider A FOS\RestBundle\Decoder\ContainerDecoderProvider instance.
     */
    protected function getFosRest_DecoderProviderService()
    {
        $this->services['fos_rest.decoder_provider'] = $instance = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.exception_format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator A FOS\RestBundle\Negotiation\FormatNegotiator instance.
     */
    protected function getFosRest_ExceptionFormatNegotiatorService()
    {
        return $this->services['fos_rest.exception_format_negotiator'] = new \FOS\RestBundle\Negotiation\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.format_negotiator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator A FOS\RestBundle\Negotiation\FormatNegotiator instance.
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        return $this->services['fos_rest.format_negotiator'] = new \FOS\RestBundle\Negotiation\FormatNegotiator();
    }

    /**
     * Gets the 'fos_rest.inflector.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Inflector\DoctrineInflector A FOS\RestBundle\Inflector\DoctrineInflector instance.
     */
    protected function getFosRest_Inflector_DoctrineService()
    {
        return $this->services['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Inflector\DoctrineInflector();
    }

    /**
     * Gets the 'fos_rest.normalizer.camel_keys' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizer A FOS\RestBundle\Normalizer\CamelKeysNormalizer instance.
     */
    protected function getFosRest_Normalizer_CamelKeysService()
    {
        return $this->services['fos_rest.normalizer.camel_keys'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizer();
    }

    /**
     * Gets the 'fos_rest.normalizer.camel_keys_with_leading_underscore' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore A FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore instance.
     */
    protected function getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService()
    {
        return $this->services['fos_rest.normalizer.camel_keys_with_leading_underscore'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore();
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher A FOS\RestBundle\Request\ParamFetcher instance.
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        return $this->services['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this->get('fos_rest.request.param_fetcher.reader'), $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('fos_rest.violation_formatter'), $this->get('validator', ContainerInterface::NULL_ON_INVALID_REFERENCE), false);
    }

    /**
     * Gets the 'fos_rest.request.param_fetcher.reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Request\ParamReader A FOS\RestBundle\Request\ParamReader instance.
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader($this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteLoader A FOS\RestBundle\Routing\Loader\RestRouteLoader instance.
     */
    protected function getFosRest_Routing_Loader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.controller'] = new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $this->get('file_locator'), $this->get('controller_name_converter'), $this->get('fos_rest.routing.loader.reader.controller'), NULL);
    }

    /**
     * Gets the 'fos_rest.routing.loader.processor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestRouteProcessor A FOS\RestBundle\Routing\Loader\RestRouteProcessor instance.
     */
    protected function getFosRest_Routing_Loader_ProcessorService()
    {
        return $this->services['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.action' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestActionReader A FOS\RestBundle\Routing\Loader\Reader\RestActionReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ActionService()
    {
        return $this->services['fos_rest.routing.loader.reader.action'] = new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($this->get('annotation_reader'), $this->get('fos_rest.request.param_fetcher.reader'), $this->get('fos_rest.inflector.doctrine'), true, array('json' => false, 'xml' => false, 'html' => true));
    }

    /**
     * Gets the 'fos_rest.routing.loader.reader.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader A FOS\RestBundle\Routing\Loader\Reader\RestControllerReader instance.
     */
    protected function getFosRest_Routing_Loader_Reader_ControllerService()
    {
        return $this->services['fos_rest.routing.loader.reader.controller'] = new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader($this->get('fos_rest.routing.loader.reader.action'), $this->get('annotation_reader'));
    }

    /**
     * Gets the 'fos_rest.routing.loader.xml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader A FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_XmlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.xml_collection'] = new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'html' => true), NULL);
    }

    /**
     * Gets the 'fos_rest.routing.loader.yaml_collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader A FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader instance.
     */
    protected function getFosRest_Routing_Loader_YamlCollectionService()
    {
        return $this->services['fos_rest.routing.loader.yaml_collection'] = new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($this->get('file_locator'), $this->get('fos_rest.routing.loader.processor'), true, array('json' => false, 'xml' => false, 'html' => true), NULL);
    }

    /**
     * Gets the 'fos_rest.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \FOS\RestBundle\Serializer\JMSSerializerAdapter A FOS\RestBundle\Serializer\JMSSerializerAdapter instance.
     */
    public function getFosRest_SerializerService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['fos_rest.serializer'] = new FOSRestBundleSerializerJMSSerializerAdapter_00000000047398ca0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getFosRest_SerializerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \FOS\RestBundle\Serializer\JMSSerializerAdapter($this->get('jms_serializer'));
    }

    /**
     * Gets the 'fos_rest.serializer.exception_wrapper_normalizer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer A FOS\RestBundle\Serializer\ExceptionWrapperNormalizer instance.
     */
    protected function getFosRest_Serializer_ExceptionWrapperNormalizerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_normalizer'] = new \FOS\RestBundle\Serializer\ExceptionWrapperNormalizer($this->get('translator'));
    }

    /**
     * Gets the 'fos_rest.serializer.exception_wrapper_serialize_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler A FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler instance.
     */
    protected function getFosRest_Serializer_ExceptionWrapperSerializeHandlerService()
    {
        return $this->services['fos_rest.serializer.exception_wrapper_serialize_handler'] = new \FOS\RestBundle\Serializer\ExceptionWrapperSerializeHandler();
    }

    /**
     * Gets the 'fos_rest.view.exception_wrapper_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ExceptionWrapperHandler A FOS\RestBundle\View\ExceptionWrapperHandler instance.
     */
    protected function getFosRest_View_ExceptionWrapperHandlerService()
    {
        return $this->services['fos_rest.view.exception_wrapper_handler'] = new \FOS\RestBundle\View\ExceptionWrapperHandler();
    }

    /**
     * Gets the 'fos_rest.view_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\View\ViewHandler A FOS\RestBundle\View\ViewHandler instance.
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(array('json' => false, 'xml' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setExclusionStrategyGroups(array());
        $instance->setExclusionStrategyVersion('');
        $instance->setSerializeNullStrategy(false);
        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'fos_rest.violation_formatter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \FOS\RestBundle\Util\ViolationFormatter A FOS\RestBundle\Util\ViolationFormatter instance.
     */
    protected function getFosRest_ViolationFormatterService()
    {
        return $this->services['fos_rest.violation_formatter'] = new \FOS\RestBundle\Util\ViolationFormatter(false);
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler A Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler instance.
     */
    protected function getFragment_HandlerService()
    {
        $this->services['fragment.handler'] = $instance = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($this, true, $this->get('request_stack'));

        $instance->addRendererService('inline', 'fragment.renderer.inline');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('hinclude', 'fragment.renderer.hinclude');
        $instance->addRendererService('esi', 'fragment.renderer.esi');
        $instance->addRendererService('ssi', 'fragment.renderer.ssi');

        return $instance;
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener($this->get('uri_signer'), '/_fragment');
    }

    /**
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer instance.
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this->services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer A Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer instance.
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($this->get('twig'), $this->get('uri_signer'), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance.
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($this->get('http_kernel'), $this->get('debug.event_dispatcher'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer instance.
     */
    protected function getFragment_Renderer_SsiService()
    {
        $this->services['fragment.renderer.ssi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer(NULL, $this->get('fragment.renderer.inline'), $this->get('uri_signer'));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the 'gaufrette.local_filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Gaufrette\Filesystem A Gaufrette\Filesystem instance.
     */
    protected function getGaufrette_LocalFilesystemService()
    {
        return $this->services['gaufrette.local_filesystem'] = new \Gaufrette\Filesystem(new \Gaufrette\Adapter\Local(($this->targetDirs[2].'/../web/local'), true));
    }

    /**
     * Gets the 'gravatar.api' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ornicar\GravatarBundle\GravatarApi A Ornicar\GravatarBundle\GravatarApi instance.
     */
    protected function getGravatar_ApiService()
    {
        return $this->services['gravatar.api'] = new \Ornicar\GravatarBundle\GravatarApi(array('size' => '80', 'rating' => 'g', 'default' => 'mm', 'secure' => false));
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel($this->get('debug.event_dispatcher'), $this, $this->get('debug.controller_resolver'), $this->get('request_stack'), false);
    }

    /**
     * Gets the 'hwi_oauth.http_client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Buzz\Client\Curl A Buzz\Client\Curl instance.
     */
    protected function getHwiOauth_HttpClientService()
    {
        $this->services['hwi_oauth.http_client'] = $instance = new \Buzz\Client\Curl();

        $instance->setVerifyPeer(true);
        $instance->setTimeout(5);
        $instance->setMaxRedirects(5);
        $instance->setIgnoreErrors(true);

        return $instance;
    }

    /**
     * Gets the 'hwi_oauth.resource_owner.github' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\GitHubResourceOwner A HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\GitHubResourceOwner instance.
     */
    protected function getHwiOauth_ResourceOwner_GithubService()
    {
        return $this->services['hwi_oauth.resource_owner.github'] = new \HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\GitHubResourceOwner($this->get('hwi_oauth.http_client'), $this->get('security.http_utils'), array('client_id' => 'github-client-id', 'client_secret' => 'github-client-secret', 'paths' => array(), 'options' => array()), 'github', $this->get('hwi_oauth.storage.session'));
    }

    /**
     * Gets the 'hwi_oauth.resource_owner.paypal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\PaypalResourceOwner A HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\PaypalResourceOwner instance.
     */
    protected function getHwiOauth_ResourceOwner_PaypalService()
    {
        return $this->services['hwi_oauth.resource_owner.paypal'] = new \HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\PaypalResourceOwner($this->get('hwi_oauth.http_client'), $this->get('security.http_utils'), array('client_id' => 'paypal-client-id', 'client_secret' => 'paypal-client-secret', 'options' => array('sandbox' => true), 'paths' => array()), 'paypal', $this->get('hwi_oauth.storage.session'));
    }

    /**
     * Gets the 'hwi_oauth.resource_ownermap.store_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap A HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap instance.
     */
    protected function getHwiOauth_ResourceOwnermap_StoreAreaService()
    {
        $this->services['hwi_oauth.resource_ownermap.store_area'] = $instance = new \HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap($this->get('security.http_utils'), array('github' => 'github', 'paypal' => 'paypal'), array('github' => '/login/check-github', 'paypal' => '/login/check-paypal'));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the 'hwi_oauth.security.oauth_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Security\OAuthUtils A HWI\Bundle\OAuthBundle\Security\OAuthUtils instance.
     */
    protected function getHwiOauth_Security_OauthUtilsService()
    {
        $this->services['hwi_oauth.security.oauth_utils'] = $instance = new \HWI\Bundle\OAuthBundle\Security\OAuthUtils($this->get('security.http_utils'), $this->get('security.authorization_checker'), false);

        $instance->setResourceOwnerMap($this->get('hwi_oauth.resource_ownermap.store_area'));

        return $instance;
    }

    /**
     * Gets the 'hwi_oauth.templating.helper.oauth' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper A HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper instance.
     */
    protected function getHwiOauth_Templating_Helper_OauthService()
    {
        $this->services['hwi_oauth.templating.helper.oauth'] = $instance = new \HWI\Bundle\OAuthBundle\Templating\Helper\OAuthHelper($this->get('hwi_oauth.security.oauth_utils'));

        $instance->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        return $instance;
    }

    /**
     * Gets the 'hwi_oauth.user_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker A Symfony\Component\Security\Core\User\UserChecker instance.
     */
    protected function getHwiOauth_UserCheckerService()
    {
        return $this->services['hwi_oauth.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /**
     * Gets the 'jms_i18n_routing.cookie_setting_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\I18nRoutingBundle\EventListener\CookieSettingListener A JMS\I18nRoutingBundle\EventListener\CookieSettingListener instance.
     */
    protected function getJmsI18nRouting_CookieSettingListenerService()
    {
        return $this->services['jms_i18n_routing.cookie_setting_listener'] = new \JMS\I18nRoutingBundle\EventListener\CookieSettingListener('hl', 31536000, NULL, NULL, false, false);
    }

    /**
     * Gets the 'jms_i18n_routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\I18nRoutingBundle\Router\I18nLoader A JMS\I18nRoutingBundle\Router\I18nLoader instance.
     */
    protected function getJmsI18nRouting_LoaderService()
    {
        return $this->services['jms_i18n_routing.loader'] = new \JMS\I18nRoutingBundle\Router\I18nLoader(new \JMS\I18nRoutingBundle\Router\DefaultRouteExclusionStrategy(), $this->get('jms_i18n_routing.pattern_generation_strategy.default'));
    }

    /**
     * Gets the 'jms_i18n_routing.pattern_generation_strategy.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\I18nRoutingBundle\Router\DefaultPatternGenerationStrategy A JMS\I18nRoutingBundle\Router\DefaultPatternGenerationStrategy instance.
     */
    protected function getJmsI18nRouting_PatternGenerationStrategy_DefaultService()
    {
        return $this->services['jms_i18n_routing.pattern_generation_strategy.default'] = new \JMS\I18nRoutingBundle\Router\DefaultPatternGenerationStrategy($this->get('elcodi.store_routing_strategy'), $this->get('translator'), $this->get('elcodi.languages_iso_array'), __DIR__, 'routes', $this->get('elcodi.store_default_language_iso'));
    }

    /**
     * Gets the 'jms_serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Serializer A JMS\Serializer\Serializer instance.
     */
    protected function getJmsSerializerService()
    {
        $a = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);
        $a->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        $b = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher($this);
        $b->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL))));

        return $this->services['jms_serializer'] = new \JMS\Serializer\Serializer($a, $this->get('jms_serializer.handler_registry'), $this->get('jms_serializer.unserialize_object_constructor'), new \PhpCollection\Map(array('json' => $this->get('jms_serializer.json_serialization_visitor'), 'xml' => $this->get('jms_serializer.xml_serialization_visitor'), 'yml' => $this->get('jms_serializer.yaml_serialization_visitor'))), new \PhpCollection\Map(array('json' => $this->get('jms_serializer.json_deserialization_visitor'), 'xml' => $this->get('jms_serializer.xml_deserialization_visitor'))), $b);
    }

    /**
     * Gets the 'jms_serializer.array_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler A JMS\Serializer\Handler\ArrayCollectionHandler instance.
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.constraint_violation_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler A JMS\Serializer\Handler\ConstraintViolationHandler instance.
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the 'jms_serializer.datetime_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\DateHandler A JMS\Serializer\Handler\DateHandler instance.
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sO', 'Pacific/Auckland', true);
    }

    /**
     * Gets the 'jms_serializer.doctrine_proxy_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber A JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber instance.
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber();
    }

    /**
     * Gets the 'jms_serializer.form_error_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler A JMS\Serializer\Handler\FormErrorHandler instance.
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler($this->get('translator'));
    }

    /**
     * Gets the 'jms_serializer.handler_registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry A JMS\Serializer\Handler\LazyHandlerRegistry instance.
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry($this, array(2 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'))), 1 => array('DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')), 'FOS\\RestBundle\\Util\\ExceptionWrapper' => array('json' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToJson'), 'xml' => array(0 => 'fos_rest.serializer.exception_wrapper_serialize_handler', 1 => 'serializeToXml')))));
    }

    /**
     * Gets the 'jms_serializer.json_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor A JMS\Serializer\JsonDeserializationVisitor instance.
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.json_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor A JMS\Serializer\JsonSerializationVisitor instance.
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor($this->get('jms_serializer.naming_strategy'));

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.metadata_driver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver A JMS\Serializer\Metadata\Driver\DoctrineTypeDriver instance.
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = new \Metadata\Driver\FileLocator(array('Elcodi\\Bundle\\CartBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CartBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CouponBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CouponBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\RuleBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/RuleBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CoreBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CoreBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CurrencyBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CurrencyBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\LanguageBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/LanguageBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\MediaBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/MediaBundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineCacheBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-cache-bundle/Resources/config/serializer'), 'Elcodi\\Bundle\\GeoBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/GeoBundle/Resources/config/serializer'), 'Knp\\Bundle\\GaufretteBundle' => ($this->targetDirs[3].'/vendor/knplabs/knp-gaufrette-bundle/Resources/config/serializer'), 'Elcodi\\Bundle\\AttributeBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/AttributeBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\StoreBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/StoreBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\UserBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/UserBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\ProductBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/ProductBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\StateTransitionMachineBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/StateTransitionMachineBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\ShippingBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/ShippingBundle/Resources/config/serializer'), 'PaymentSuite\\PaymentCoreBundle' => ($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/PaymentCoreBundle/Resources/config/serializer'), 'Elcodi\\Bridge\\PaymentSuiteBridgeBundle' => ($this->targetDirs[3].'/src/Elcodi/Bridge/PaymentSuiteBridgeBundle/Resources/config/serializer'), 'PaymentSuite\\PaypalWebCheckoutBundle' => ($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/PaypalWebCheckoutBundle/Resources/config/serializer'), 'PaymentSuite\\FreePaymentBundle' => ($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/FreePaymentBundle/Resources/config/serializer'), 'PaymentSuite\\StripeBundle' => ($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/StripeBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\ZoneBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/ZoneBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\TaxBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/TaxBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\EntityTranslatorBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/EntityTranslatorBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\MenuBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/MenuBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\PluginBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/PluginBundle/Resources/config/serializer'), 'PaymentSuite\\BankwireBundle' => ($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/BankwireBundle/Resources/config/serializer'), 'Symfony\\Bundle\\FrameworkBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/config/serializer'), 'Symfony\\Bundle\\SecurityBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/config/serializer'), 'Symfony\\Bundle\\TwigBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/config/serializer'), 'Symfony\\Bundle\\MonologBundle' => ($this->targetDirs[3].'/vendor/symfony/monolog-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\SwiftmailerBundle' => ($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/config/serializer'), 'Symfony\\Bundle\\AsseticBundle' => ($this->targetDirs[3].'/vendor/symfony/assetic-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\DoctrineBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\FixturesBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-fixtures-bundle/Resources/config/serializer'), 'Doctrine\\Bundle\\MigrationsBundle' => ($this->targetDirs[3].'/vendor/doctrine/doctrine-migrations-bundle/Resources/config/serializer'), 'Sensio\\Bundle\\FrameworkExtraBundle' => ($this->targetDirs[3].'/vendor/sensio/framework-extra-bundle/Resources/config/serializer'), 'Ornicar\\GravatarBundle' => ($this->targetDirs[3].'/vendor/ornicar/gravatar-bundle/Ornicar/GravatarBundle/Resources/config/serializer'), 'HWI\\Bundle\\OAuthBundle' => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/config/serializer'), 'Snc\\RedisBundle' => ($this->targetDirs[3].'/vendor/snc/redis-bundle/Snc/RedisBundle/Resources/config/serializer'), 'JMS\\I18nRoutingBundle' => ($this->targetDirs[3].'/vendor/acasademont/i18n-routing-bundle/JMS/I18nRoutingBundle/Resources/config/serializer'), 'Mmoreram\\ControllerExtraBundle' => ($this->targetDirs[3].'/vendor/mmoreram/controller-extra-bundle/Resources/config/serializer'), 'Mmoreram\\CacheFlushBundle' => ($this->targetDirs[3].'/vendor/mmoreram/cache-flush-bundle/Resources/config/serializer'), 'Mmoreram\\HttpHeadersBundle' => ($this->targetDirs[3].'/vendor/mmoreram/http-headers-bundle/Mmoreram/HttpHeadersBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CartCouponBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CartCouponBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\BannerBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/BannerBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\NewsletterBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/NewsletterBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\PageBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/PageBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\MetricBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/MetricBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CommentBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CommentBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\CartShippingBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/CartShippingBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\SitemapBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/SitemapBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\PaymentBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/PaymentBundle/Resources/config/serializer'), 'Elcodi\\Store\\CoreBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/config/serializer'), 'Elcodi\\Store\\ProductBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/ProductBundle/Resources/config/serializer'), 'Elcodi\\Store\\UserBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/UserBundle/Resources/config/serializer'), 'Elcodi\\Store\\GeoBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/GeoBundle/Resources/config/serializer'), 'Elcodi\\Store\\CartBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/CartBundle/Resources/config/serializer'), 'Elcodi\\Store\\CurrencyBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/CurrencyBundle/Resources/config/serializer'), 'Elcodi\\Store\\CartCouponBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/CartCouponBundle/Resources/config/serializer'), 'Elcodi\\Store\\ConnectBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/ConnectBundle/Resources/config/serializer'), 'Elcodi\\Store\\MetricBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/MetricBundle/Resources/config/serializer'), 'Elcodi\\Store\\PageBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/PageBundle/Resources/config/serializer'), 'Elcodi\\Store\\LanguageBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/LanguageBundle/Resources/config/serializer'), 'Elcodi\\Store\\OverrideBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/OverrideBundle/Resources/config/serializer'), 'Elcodi\\Store\\FallbackBundle' => ($this->targetDirs[3].'/src/Elcodi/Store/FallbackBundle/Resources/config/serializer'), 'Elcodi\\Admin\\CoreBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/config/serializer'), 'Elcodi\\Admin\\UserBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/UserBundle/Resources/config/serializer'), 'Elcodi\\Admin\\AttributeBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/AttributeBundle/Resources/config/serializer'), 'Elcodi\\Admin\\BannerBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/BannerBundle/Resources/config/serializer'), 'Elcodi\\Admin\\CartBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/CartBundle/Resources/config/serializer'), 'Elcodi\\Admin\\CouponBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/CouponBundle/Resources/config/serializer'), 'Elcodi\\Admin\\CurrencyBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/CurrencyBundle/Resources/config/serializer'), 'Elcodi\\Admin\\LanguageBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/LanguageBundle/Resources/config/serializer'), 'Elcodi\\Admin\\MediaBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/MediaBundle/Resources/config/serializer'), 'Elcodi\\Admin\\NewsletterBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/NewsletterBundle/Resources/config/serializer'), 'Elcodi\\Admin\\ProductBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/ProductBundle/Resources/config/serializer'), 'Elcodi\\Admin\\PageBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/PageBundle/Resources/config/serializer'), 'Elcodi\\Admin\\TemplateBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/TemplateBundle/Resources/config/serializer'), 'Elcodi\\Admin\\MetricBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/MetricBundle/Resources/config/serializer'), 'Elcodi\\Admin\\PluginBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/PluginBundle/Resources/config/serializer'), 'Elcodi\\Admin\\ShippingBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/ShippingBundle/Resources/config/serializer'), 'Elcodi\\Admin\\GeoBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/GeoBundle/Resources/config/serializer'), 'Elcodi\\Admin\\PaymentBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/PaymentBundle/Resources/config/serializer'), 'Elcodi\\Admin\\StoreBundle' => ($this->targetDirs[3].'/src/Elcodi/Admin/StoreBundle/Resources/config/serializer'), 'Elcodi\\Common\\FirewallBundle' => ($this->targetDirs[3].'/src/Elcodi/Common/FirewallBundle/Resources/config/serializer'), 'Elcodi\\Common\\CommonBundle' => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\GoogleAnalyticsBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\PinterestBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\ProductCsvBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\StoreSetupWizardBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\DisqusBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\TwitterBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\FacebookBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\StoreTemplateBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\PaypalWebCheckoutBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\FreePaymentBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\StripeBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\CustomShippingBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/CustomShippingBundle/Resources/config/serializer'), 'Elcodi\\Plugin\\BankwireBundle' => ($this->targetDirs[3].'/src/Elcodi/Plugin/BankwireBundle/Resources/config/serializer'), 'JMS\\SerializerBundle' => ($this->targetDirs[3].'/vendor/jms/serializer-bundle/JMS/SerializerBundle/Resources/config/serializer'), 'FOS\\RestBundle' => ($this->targetDirs[3].'/vendor/friendsofsymfony/rest-bundle/FOS/RestBundle/Resources/config/serializer'), 'Sensio\\Bundle\\GeneratorBundle' => ($this->targetDirs[3].'/vendor/sensio/generator-bundle/Resources/config/serializer'), 'Best365\\Store\\UserBundle' => ($this->targetDirs[3].'/src/Best365/Store/UserBundle/Resources/config/serializer'), 'Elcodi\\Bundle\\FixturesBoosterBundle' => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/FixturesBoosterBundle/Resources/config/serializer'), 'Elcodi\\Bridge\\BehatBridgeBundle' => ($this->targetDirs[3].'/src/Elcodi/Bridge/BehatBridgeBundle/Resources/config/serializer'), 'Symfony\\Bundle\\WebProfilerBundle' => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/serializer'), 'Sensio\\Bundle\\DistributionBundle' => ($this->targetDirs[3].'/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/config/serializer'), 'Visithor\\Bundle' => ($this->targetDirs[3].'/vendor/visithor/visithor-bundle/Resources/config/serializer'), 'Elcodi\\Bridge\\VisithorBridgeBundle' => ($this->targetDirs[3].'/src/Elcodi/Bridge/VisithorBridgeBundle/Resources/config/serializer')));

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver($this->get('annotation_reader')))), $this->get('doctrine'));
    }

    /**
     * Gets the 'jms_serializer.naming_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy A JMS\Serializer\Naming\CacheNamingStrategy instance.
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the 'jms_serializer.object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor A JMS\Serializer\Construction\DoctrineObjectConstructor instance.
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor($this->get('doctrine'), $this->get('jms_serializer.unserialize_object_constructor'));
    }

    /**
     * Gets the 'jms_serializer.php_collection_handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler A JMS\Serializer\Handler\PhpCollectionHandler instance.
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the 'jms_serializer.stopwatch_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber A JMS\SerializerBundle\Serializer\StopwatchEventSubscriber instance.
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber($this->get('debug.stopwatch'));
    }

    /**
     * Gets the 'jms_serializer.templating.helper.serializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper A JMS\SerializerBundle\Templating\SerializerHelper instance.
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper($this->get('jms_serializer'));
    }

    /**
     * Gets the 'jms_serializer.xml_deserialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor A JMS\Serializer\XmlDeserializationVisitor instance.
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor($this->get('jms_serializer.naming_strategy'), $this->get('jms_serializer.unserialize_object_constructor'));

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the 'jms_serializer.xml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor A JMS\Serializer\XmlSerializationVisitor instance.
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        return $this->services['jms_serializer.xml_serialization_visitor'] = new \JMS\Serializer\XmlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'jms_serializer.yaml_serialization_visitor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor A JMS\Serializer\YamlSerializationVisitor instance.
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor($this->get('jms_serializer.naming_strategy'));
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getKernelService()
    {
        throw new RuntimeException('You have requested a synthetic service ("kernel"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'knp_gaufrette.filesystem_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Knp\Bundle\GaufretteBundle\FilesystemMap A Knp\Bundle\GaufretteBundle\FilesystemMap instance.
     */
    protected function getKnpGaufrette_FilesystemMapService()
    {
        return $this->services['knp_gaufrette.filesystem_map'] = new \Knp\Bundle\GaufretteBundle\FilesystemMap(array('local' => $this->get('gaufrette.local_filesystem')));
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance.
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener('en', $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'mmoreram.controllerextra.collector.paginator_evaluator_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorEvaluatorCollector A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorEvaluatorCollector instance.
     */
    protected function getMmoreram_Controllerextra_Collector_PaginatorEvaluatorCollectorService()
    {
        $this->services['mmoreram.controllerextra.collector.paginator_evaluator_collector'] = $instance = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorEvaluatorCollector();

        $instance->addPaginatorEvaluator($this->get('mmoreram.controllerextra.evaluator.paginator_innerjoins_evaluator'));
        $instance->addPaginatorEvaluator($this->get('mmoreram.controllerextra.evaluator.paginator_leftjoins_evaluator'));
        $instance->addPaginatorEvaluator($this->get('mmoreram.controllerextra.evaluator.paginator_wheres_evaluator'));
        $instance->addPaginatorEvaluator($this->get('mmoreram.controllerextra.evaluator.paginator_orderby_evaluator'));
        $instance->addPaginatorEvaluator($this->get('mmoreram.controllerextra.evaluator.paginator_notnulls_evaluator'));

        return $instance;
    }

    /**
     * Gets the 'mmoreram.controllerextra.evaluator.paginator_innerjoins_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorInnerJoinsEvaluator A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorInnerJoinsEvaluator instance.
     */
    protected function getMmoreram_Controllerextra_Evaluator_PaginatorInnerjoinsEvaluatorService()
    {
        return $this->services['mmoreram.controllerextra.evaluator.paginator_innerjoins_evaluator'] = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorInnerJoinsEvaluator();
    }

    /**
     * Gets the 'mmoreram.controllerextra.evaluator.paginator_leftjoins_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorLeftJoinsEvaluator A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorLeftJoinsEvaluator instance.
     */
    protected function getMmoreram_Controllerextra_Evaluator_PaginatorLeftjoinsEvaluatorService()
    {
        return $this->services['mmoreram.controllerextra.evaluator.paginator_leftjoins_evaluator'] = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorLeftJoinsEvaluator();
    }

    /**
     * Gets the 'mmoreram.controllerextra.evaluator.paginator_notnulls_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorNotNullsEvaluator A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorNotNullsEvaluator instance.
     */
    protected function getMmoreram_Controllerextra_Evaluator_PaginatorNotnullsEvaluatorService()
    {
        return $this->services['mmoreram.controllerextra.evaluator.paginator_notnulls_evaluator'] = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorNotNullsEvaluator();
    }

    /**
     * Gets the 'mmoreram.controllerextra.evaluator.paginator_orderby_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorOrderByEvaluator A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorOrderByEvaluator instance.
     */
    protected function getMmoreram_Controllerextra_Evaluator_PaginatorOrderbyEvaluatorService()
    {
        return $this->services['mmoreram.controllerextra.evaluator.paginator_orderby_evaluator'] = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorOrderByEvaluator($this->get('mmoreram.controllerextra.provider.request_parameter_provider'));
    }

    /**
     * Gets the 'mmoreram.controllerextra.evaluator.paginator_wheres_evaluator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorWheresEvaluator A Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorWheresEvaluator instance.
     */
    protected function getMmoreram_Controllerextra_Evaluator_PaginatorWheresEvaluatorService()
    {
        return $this->services['mmoreram.controllerextra.evaluator.paginator_wheres_evaluator'] = new \Mmoreram\ControllerExtraBundle\Resolver\Paginator\PaginatorWheresEvaluator($this->get('mmoreram.controllerextra.provider.request_parameter_provider'));
    }

    /**
     * Gets the 'mmoreram.controllerextra.event_listeners.resolver_event_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\EventListener\ResolverEventListener A Mmoreram\ControllerExtraBundle\EventListener\ResolverEventListener instance.
     */
    protected function getMmoreram_Controllerextra_EventListeners_ResolverEventListenerService()
    {
        $this->services['mmoreram.controllerextra.event_listeners.resolver_event_listener'] = $instance = new \Mmoreram\ControllerExtraBundle\EventListener\ResolverEventListener($this->get('kernel'), $this->get('annotation_reader'));

        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.form_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.flush_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.entity_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.log_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.json_resolver_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.paginator_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.object_manager_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.get_annotation_resolver'));
        $instance->addResolver($this->get('mmoreram.controllerextra.resolver.post_annotation_resolver'));

        return $instance;
    }

    /**
     * Gets the 'mmoreram.controllerextra.provider.entity_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Provider\EntityProvider A Mmoreram\ControllerExtraBundle\Provider\EntityProvider instance.
     */
    protected function getMmoreram_Controllerextra_Provider_EntityProviderService()
    {
        return $this->services['mmoreram.controllerextra.provider.entity_provider'] = new \Mmoreram\ControllerExtraBundle\Provider\EntityProvider($this, $this->get('kernel'), 'create', false);
    }

    /**
     * Gets the 'mmoreram.controllerextra.provider.request_parameter_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Provider\RequestParameterProvider A Mmoreram\ControllerExtraBundle\Provider\RequestParameterProvider instance.
     */
    protected function getMmoreram_Controllerextra_Provider_RequestParameterProviderService()
    {
        $this->services['mmoreram.controllerextra.provider.request_parameter_provider'] = $instance = new \Mmoreram\ControllerExtraBundle\Provider\RequestParameterProvider($this->get('request_stack'));

        $instance->setRequestType('current');

        return $instance;
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.entity_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\EntityAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\EntityAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_EntityAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.entity_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\EntityAnnotationResolver($this->get('doctrine'), $this->get('mmoreram.controllerextra.provider.entity_provider'), $this->get('mmoreram.controllerextra.provider.request_parameter_provider'), 'entity', true, false);
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.flush_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\FlushAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\FlushAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_FlushAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.flush_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\FlushAnnotationResolver($this->get('doctrine'), 'default');
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.form_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\FormAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\FormAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_FormAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.form_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\FormAnnotationResolver($this->get('form.registry'), $this->get('form.factory'), 'form');
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.get_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\GetAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\GetAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_GetAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.get_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\GetAnnotationResolver();
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.json_resolver_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\JsonResponseAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\JsonResponseAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_JsonResolverAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.json_resolver_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\JsonResponseAnnotationResolver(200, 500, array());
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.log_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\LogAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\LogAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_LogAnnotationResolverService()
    {
        $this->services['mmoreram.controllerextra.resolver.log_annotation_resolver'] = $instance = new \Mmoreram\ControllerExtraBundle\Resolver\LogAnnotationResolver($this->get('logger'));

        $instance->setDefaultLevel('info');
        $instance->setDefaultExecute('pre');

        return $instance;
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.object_manager_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\ObjectManagerAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\ObjectManagerAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_ObjectManagerAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.object_manager_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\ObjectManagerAnnotationResolver($this->get('doctrine'), $this->get('mmoreram.controllerextra.provider.entity_provider'), 'objectManager');
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.paginator_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\PaginatorAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\PaginatorAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_PaginatorAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.paginator_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\PaginatorAnnotationResolver($this->get('doctrine'), $this->get('mmoreram.controllerextra.provider.entity_provider'), $this->get('mmoreram.controllerextra.provider.request_parameter_provider'), $this->get('mmoreram.controllerextra.collector.paginator_evaluator_collector'), 'paginator', 1, 10);
    }

    /**
     * Gets the 'mmoreram.controllerextra.resolver.post_annotation_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\ControllerExtraBundle\Resolver\PostAnnotationResolver A Mmoreram\ControllerExtraBundle\Resolver\PostAnnotationResolver instance.
     */
    protected function getMmoreram_Controllerextra_Resolver_PostAnnotationResolverService()
    {
        return $this->services['mmoreram.controllerextra.resolver.post_annotation_resolver'] = new \Mmoreram\ControllerExtraBundle\Resolver\PostAnnotationResolver();
    }

    /**
     * Gets the 'mmoreram.headers.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\HttpHeadersBundle\EventListener\Headers A Mmoreram\HttpHeadersBundle\EventListener\Headers instance.
     */
    protected function getMmoreram_Headers_ListenerService()
    {
        return $this->services['mmoreram.headers.listener'] = new \Mmoreram\HttpHeadersBundle\EventListener\Headers(array('X-Elcodi' => array('values' => array(0 => 'This E-commerce is built using Elcodi and Symfony'))));
    }

    /**
     * Gets the 'monolog.handler.console' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->services['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, false, array());
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    protected function getMonolog_Handler_DebugService()
    {
        return $this->services['monolog.handler.debug'] = new \Symfony\Bridge\Monolog\Handler\DebugHandler(100, true);
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    protected function getMonolog_Handler_MainService()
    {
        return $this->services['monolog.handler.main'] = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'/logs/dev.log'), 100, true, NULL);
    }

    /**
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this->services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.paymentsuite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_PaymentsuiteService()
    {
        $this->services['monolog.logger.paymentsuite'] = $instance = new \Symfony\Bridge\Monolog\Logger('paymentsuite');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_RouterService()
    {
        $this->services['monolog.logger.router'] = $instance = new \Symfony\Bridge\Monolog\Logger('router');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.snc_redis' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_SncRedisService()
    {
        $this->services['monolog.logger.snc_redis'] = $instance = new \Symfony\Bridge\Monolog\Logger('snc_redis');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushHandler($this->get('monolog.handler.console'));
        $instance->pushHandler($this->get('monolog.handler.main'));
        $instance->pushHandler($this->get('monolog.handler.debug'));

        return $instance;
    }

    /**
     * Gets the 'paymentsuite.bankwire.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\BankwireBundle\Services\BankwireManager A PaymentSuite\BankwireBundle\Services\BankwireManager instance.
     */
    protected function getPaymentsuite_Bankwire_ManagerService()
    {
        return $this->services['paymentsuite.bankwire.manager'] = new \PaymentSuite\BankwireBundle\Services\BankwireManager($this->get('paymentsuite.bankwire.method_factory'), $this->get('paymentsuite.bridge'), $this->get('paymentsuite.event_dispatcher'));
    }

    /**
     * Gets the 'paymentsuite.bankwire.method_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\BankwireBundle\Services\BankwireMethodFactory A PaymentSuite\BankwireBundle\Services\BankwireMethodFactory instance.
     */
    protected function getPaymentsuite_Bankwire_MethodFactoryService()
    {
        return $this->services['paymentsuite.bankwire.method_factory'] = new \PaymentSuite\BankwireBundle\Services\BankwireMethodFactory();
    }

    /**
     * Gets the 'paymentsuite.bankwire.payment_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\BankwireBundle\Controller\PaymentController A PaymentSuite\BankwireBundle\Controller\PaymentController instance.
     */
    protected function getPaymentsuite_Bankwire_PaymentControllerService()
    {
        return $this->services['paymentsuite.bankwire.payment_controller'] = new \PaymentSuite\BankwireBundle\Controller\PaymentController($this->get('paymentsuite.bankwire.manager'), $this->get('paymentsuite.bankwire.route_success'), $this->get('paymentsuite.bridge'), $this->get('router'));
    }

    /**
     * Gets the 'paymentsuite.bankwire.route_success' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_Bankwire_RouteSuccessService()
    {
        return $this->services['paymentsuite.bankwire.route_success'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_order_thanks', true, 'id');
    }

    /**
     * Gets the 'paymentsuite.bankwire.routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection instance.
     */
    protected function getPaymentsuite_Bankwire_RoutesService()
    {
        $this->services['paymentsuite.bankwire.routes'] = $instance = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection();

        $instance->addRedirectionRoute($this->get('paymentsuite.bankwire.route_success'), 'success');

        return $instance;
    }

    /**
     * Gets the 'paymentsuite.bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Bridge\PaymentSuiteBridgeBundle\Services\PaymentBridge A Elcodi\Bridge\PaymentSuiteBridgeBundle\Services\PaymentBridge instance.
     */
    protected function getPaymentsuite_BridgeService()
    {
        return $this->services['paymentsuite.bridge'] = new \Elcodi\Bridge\PaymentSuiteBridgeBundle\Services\PaymentBridge($this->get('elcodi.repository.order'), $this->get('elcodi.wrapper.cart'), $this->get('elcodi.converter.currency'), $this->get('elcodi.name_resolver.purchasable'));
    }

    /**
     * Gets the 'paymentsuite.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\Services\PaymentEventDispatcher A PaymentSuite\PaymentCoreBundle\Services\PaymentEventDispatcher instance.
     */
    protected function getPaymentsuite_EventDispatcherService()
    {
        return $this->services['paymentsuite.event_dispatcher'] = new \PaymentSuite\PaymentCoreBundle\Services\PaymentEventDispatcher($this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'paymentsuite.freepayment.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\FreePaymentBundle\Services\FreePaymentManager A PaymentSuite\FreePaymentBundle\Services\FreePaymentManager instance.
     */
    protected function getPaymentsuite_Freepayment_ManagerService()
    {
        return $this->services['paymentsuite.freepayment.manager'] = new \PaymentSuite\FreePaymentBundle\Services\FreePaymentManager($this->get('paymentsuite.freepayment.method_factory'), $this->get('paymentsuite.bridge'), $this->get('paymentsuite.event_dispatcher'));
    }

    /**
     * Gets the 'paymentsuite.freepayment.method_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\FreePaymentBundle\Services\FreePaymentMethodFactory A PaymentSuite\FreePaymentBundle\Services\FreePaymentMethodFactory instance.
     */
    protected function getPaymentsuite_Freepayment_MethodFactoryService()
    {
        return $this->services['paymentsuite.freepayment.method_factory'] = new \PaymentSuite\FreePaymentBundle\Services\FreePaymentMethodFactory();
    }

    /**
     * Gets the 'paymentsuite.freepayment.payment_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\FreePaymentBundle\Controller\PaymentController A PaymentSuite\FreePaymentBundle\Controller\PaymentController instance.
     */
    protected function getPaymentsuite_Freepayment_PaymentControllerService()
    {
        return $this->services['paymentsuite.freepayment.payment_controller'] = new \PaymentSuite\FreePaymentBundle\Controller\PaymentController($this->get('paymentsuite.freepayment.manager'), $this->get('paymentsuite.freepayment.route_success'), $this->get('paymentsuite.bridge'), $this->get('router'));
    }

    /**
     * Gets the 'paymentsuite.freepayment.route_success' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_Freepayment_RouteSuccessService()
    {
        return $this->services['paymentsuite.freepayment.route_success'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_order_thanks', true, 'id');
    }

    /**
     * Gets the 'paymentsuite.freepayment.routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection instance.
     */
    protected function getPaymentsuite_Freepayment_RoutesService()
    {
        $this->services['paymentsuite.freepayment.routes'] = $instance = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection();

        $instance->addRedirectionRoute($this->get('paymentsuite.freepayment.route_success'), 'success');

        return $instance;
    }

    /**
     * Gets the 'paymentsuite.logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\Services\PaymentLogger A PaymentSuite\PaymentCoreBundle\Services\PaymentLogger instance.
     */
    protected function getPaymentsuite_LoggerService()
    {
        return $this->services['paymentsuite.logger'] = new \PaymentSuite\PaymentCoreBundle\Services\PaymentLogger($this->get('monolog.logger.paymentsuite'), true);
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.form_type_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeBuilder A PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeBuilder instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_FormTypeBuilderService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.form_type_builder'] = new \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeBuilder($this->get('paymentsuite.paypal_web_checkout.url_factory'), $this->get('paymentsuite.bridge'), $this->get('form.factory'), $this->get('router'), $this->get('elcodi_plugin.paypal_web_checkout.business'));
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.form_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeFactory A PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeFactory instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_FormTypeFactoryService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.form_type_factory'] = new \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutFormTypeFactory($this->get('paymentsuite.paypal_web_checkout.url_factory'), $this->get('paymentsuite.bridge'), $this->get('form.factory'), 'default');
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutManager A PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutManager instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_ManagerService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.manager'] = new \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutManager($this->get('paymentsuite.paypal_web_checkout.url_factory'), $this->get('paymentsuite.paypal_web_checkout.form_type_factory'), $this->get('paymentsuite.paypal_web_checkout.method_factory'), $this->get('paymentsuite.bridge'), $this->get('paymentsuite.event_dispatcher'));
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.method_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutMethodFactory A PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutMethodFactory instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_MethodFactoryService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.method_factory'] = new \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutMethodFactory();
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.payment_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Controller\PaymentController A PaymentSuite\PaypalWebCheckoutBundle\Controller\PaymentController instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_PaymentControllerService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.payment_controller'] = new \PaymentSuite\PaypalWebCheckoutBundle\Controller\PaymentController($this->get('paymentsuite.paypal_web_checkout.manager'), $this->get('templating'));
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.process_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Controller\ProcessController A PaymentSuite\PaypalWebCheckoutBundle\Controller\ProcessController instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_ProcessControllerService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.process_controller'] = new \PaymentSuite\PaypalWebCheckoutBundle\Controller\ProcessController($this->get('paymentsuite.paypal_web_checkout.manager'), $this->get('paymentsuite.logger'));
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.route_cancel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_RouteCancelService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.route_cancel'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_homepage', false, 'order_id');
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.route_success' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_RouteSuccessService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.route_success'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_order_thanks', true, 'id');
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_RoutesService()
    {
        $this->services['paymentsuite.paypal_web_checkout.routes'] = $instance = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection();

        $instance->addRedirectionRoute($this->get('paymentsuite.paypal_web_checkout.route_success'), 'success');
        $instance->addRedirectionRoute($this->get('paymentsuite.paypal_web_checkout.route_cancel'), 'cancel');

        return $instance;
    }

    /**
     * Gets the 'paymentsuite.paypal_web_checkout.url_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutUrlFactory A PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutUrlFactory instance.
     */
    protected function getPaymentsuite_PaypalWebCheckout_UrlFactoryService()
    {
        return $this->services['paymentsuite.paypal_web_checkout.url_factory'] = new \PaymentSuite\PaypalWebCheckoutBundle\Services\PaypalWebCheckoutUrlFactory($this->get('paymentsuite.paypal_web_checkout.routes'), $this->get('router'), 'https://www.sandbox.paypal.com/cgi-bin/webscr');
    }

    /**
     * Gets the 'paymentsuite.stripe.form_type' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Form\Type\StripeType A PaymentSuite\StripeBundle\Form\Type\StripeType instance.
     */
    protected function getPaymentsuite_Stripe_FormTypeService()
    {
        return $this->services['paymentsuite.stripe.form_type'] = new \PaymentSuite\StripeBundle\Form\Type\StripeType($this->get('paymentsuite.bridge'));
    }

    /**
     * Gets the 'paymentsuite.stripe.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Services\StripeManager A PaymentSuite\StripeBundle\Services\StripeManager instance.
     */
    protected function getPaymentsuite_Stripe_ManagerService()
    {
        return $this->services['paymentsuite.stripe.manager'] = new \PaymentSuite\StripeBundle\Services\StripeManager($this->get('paymentsuite.stripe.transaction_factory'), $this->get('paymentsuite.bridge'), $this->get('paymentsuite.event_dispatcher'));
    }

    /**
     * Gets the 'paymentsuite.stripe.method_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Services\StripeMethodFactory A PaymentSuite\StripeBundle\Services\StripeMethodFactory instance.
     */
    protected function getPaymentsuite_Stripe_MethodFactoryService()
    {
        return $this->services['paymentsuite.stripe.method_factory'] = new \PaymentSuite\StripeBundle\Services\StripeMethodFactory();
    }

    /**
     * Gets the 'paymentsuite.stripe.payment_controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Controller\PaymentController A PaymentSuite\StripeBundle\Controller\PaymentController instance.
     */
    protected function getPaymentsuite_Stripe_PaymentControllerService()
    {
        return $this->services['paymentsuite.stripe.payment_controller'] = new \PaymentSuite\StripeBundle\Controller\PaymentController($this->get('paymentsuite.stripe.manager'), $this->get('paymentsuite.stripe.method_factory'), $this->get('paymentsuite.stripe.routes'), $this->get('paymentsuite.bridge'), $this->get('router'), $this->get('form.factory'));
    }

    /**
     * Gets the 'paymentsuite.stripe.route_failure' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_Stripe_RouteFailureService()
    {
        return $this->services['paymentsuite.stripe.route_failure'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_checkout_payment_fail', true, 'id');
    }

    /**
     * Gets the 'paymentsuite.stripe.route_success' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute instance.
     */
    protected function getPaymentsuite_Stripe_RouteSuccessService()
    {
        return $this->services['paymentsuite.stripe.route_success'] = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRoute('store_order_thanks', true, 'id');
    }

    /**
     * Gets the 'paymentsuite.stripe.routes' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection A PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection instance.
     */
    protected function getPaymentsuite_Stripe_RoutesService()
    {
        $this->services['paymentsuite.stripe.routes'] = $instance = new \PaymentSuite\PaymentCoreBundle\ValueObject\RedirectionRouteCollection();

        $instance->addRedirectionRoute($this->get('paymentsuite.stripe.route_success'), 'success');
        $instance->addRedirectionRoute($this->get('paymentsuite.stripe.route_failure'), 'failure');

        return $instance;
    }

    /**
     * Gets the 'paymentsuite.stripe.template_render' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Services\StripeTemplateRender A PaymentSuite\StripeBundle\Services\StripeTemplateRender instance.
     */
    protected function getPaymentsuite_Stripe_TemplateRenderService()
    {
        return $this->services['paymentsuite.stripe.template_render'] = new \PaymentSuite\StripeBundle\Services\StripeTemplateRender($this->get('paymentsuite.bridge'), $this->get('form.factory'), '@elcodi_plugin.stripe.public_key', 'StripeBundle:Stripe:view.html.twig', 'StripeBundle:Stripe:scripts.html.twig');
    }

    /**
     * Gets the 'paymentsuite.stripe.transaction_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Services\StripeTransactionFactory A PaymentSuite\StripeBundle\Services\StripeTransactionFactory instance.
     */
    protected function getPaymentsuite_Stripe_TransactionFactoryService()
    {
        return $this->services['paymentsuite.stripe.transaction_factory'] = new \PaymentSuite\StripeBundle\Services\StripeTransactionFactory($this->get('elcodi_plugin.stripe.private_key'));
    }

    /**
     * Gets the 'paymentsuite.stripe.twig_extension' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \PaymentSuite\StripeBundle\Twig\StripeExtension A PaymentSuite\StripeBundle\Twig\StripeExtension instance.
     */
    protected function getPaymentsuite_Stripe_TwigExtensionService()
    {
        return $this->services['paymentsuite.stripe.twig_extension'] = new \PaymentSuite\StripeBundle\Twig\StripeExtension($this->get('paymentsuite.bridge'), $this->get('form.factory'), $this->get('elcodi_plugin.stripe.private_key'), 'StripeBundle:Stripe:view.html.twig', 'StripeBundle:Stripe:scripts.html.twig');
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    protected function getProfilerService()
    {
        $a = $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $b = $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        $c = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $c->setKernel($b);
        }

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector($this->get('doctrine'));
        $d->addLogger('default', $this->get('doctrine.dbal.logger.profiling.default'));

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler'), '', '', 86400), $a);

        $instance->add($c);
        $instance->add($this->get('data_collector.request'));
        $instance->add(new \Symfony\Bundle\FrameworkBundle\DataCollector\AjaxDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector($this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add($this->get('data_collector.router'));
        $instance->add($this->get('data_collector.form'));
        $instance->add($this->get('data_collector.translation'));
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector($this->get('twig.profile')));
        $instance->add($d);
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.role_hierarchy')));
        $instance->add(new \Snc\RedisBundle\DataCollector\RedisDataCollector($this->get('snc_redis.logger')));

        return $instance;
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener($this->get('profiler'), NULL, false, false, $this->get('request_stack'));
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false);
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    protected function getRequestService()
    {
        if (!isset($this->scopedServices['request'])) {
            throw new InactiveScopeException('request', 'request');
        }

        throw new RuntimeException('You have requested a synthetic service ("request"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance.
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \JMS\I18nRoutingBundle\Router\I18nRouter A JMS\I18nRoutingBundle\Router\I18nRouter instance.
     */
    protected function getRouterService()
    {
        $this->services['router'] = $instance = new \JMS\I18nRoutingBundle\Router\I18nRouter($this, ($this->targetDirs[2].'/config/routing/routing_dev.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevUrlMatcher', 'strict_requirements' => true), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->setLocaleResolver(new \JMS\I18nRoutingBundle\Router\DefaultLocaleResolver('hl'));
        $instance->setI18nLoaderId('jms_i18n_routing.loader');
        $instance->setDefaultLocale('en');
        $instance->setRedirectToHost(true);

        return $instance;
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener($this->get('router'), $this->get('router.request_context', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('request_stack'));
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    protected function getRouting_LoaderService()
    {
        $a = $this->get('file_locator');
        $b = $this->get('annotation_reader');

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader($this->get('elcodi.loader.plugin_routes'));
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader($c);
        $d->addLoader(new \FOS\RestBundle\Routing\Loader\DirectoryRouteLoader($a, $this->get('fos_rest.routing.loader.processor')));
        $d->addLoader($this->get('fos_rest.routing.loader.controller'));
        $d->addLoader($this->get('fos_rest.routing.loader.yaml_collection'));
        $d->addLoader($this->get('fos_rest.routing.loader.xml_collection'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($this->get('controller_name_converter'), $this->get('monolog.logger.router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $d);
    }

    /**
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance.
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils($this->get('request_stack'));
    }

    /**
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance.
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($this->get('security.token_storage'), $this->get('security.authentication.manager'), $this->get('security.access.decision_manager'), false);
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     */
    protected function getSecurity_ContextService()
    {
        return $this->services['security.context'] = new \Symfony\Component\Security\Core\SecurityContext($this->get('security.token_storage'), $this->get('security.authorization_checker'));
    }

    /**
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance.
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator($this->get('security.secure_random')), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage($this->get('session')));
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('Elcodi\\Component\\User\\Entity\\Customer' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder', 'arguments' => array(0 => 15)), 'Elcodi\\Component\\User\\Entity\\AdminUser' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder', 'arguments' => array(0 => 15))));
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Component\Security\Http\Firewall(new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($this, array('security.firewall.map.context.dev_area' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/_(?:profiler|wdt|error)/'), 'security.firewall.map.context.public_area' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/(?:css|images|js)/'), 'security.firewall.map.context.api_area' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/'), 'security.firewall.map.context.admin_area' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin(?:$|/)'), 'security.firewall.map.context.store_area' => new \Symfony\Component\HttpFoundation\RequestMatcher('^/'))), $this->get('debug.event_dispatcher'));
    }

    /**
     * Gets the 'security.firewall.map.context.admin_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_AdminAreaService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $c = $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.http_utils');
        $e = $this->get('security.authentication.manager');
        $f = $this->get('http_kernel');

        $g = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($d, array());
        $g->setOptions(array('login_path' => 'admin_login', 'default_target_path' => 'admin_homepage', 'always_use_default_target_path' => false, 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $g->setProviderKey('admin_area');

        $h = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($f, $d, array(), $b);
        $h->setOptions(array('login_path' => 'admin_login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        return $this->services['security.firewall.map.context.admin_area'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.customer'), 1 => $this->get('security.user.provider.concrete.adminuser')), 'admin_area', $b, $c), 2 => new \Symfony\Component\Security\Http\Firewall\LogoutListener($a, $d, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($d, 'admin_login'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => 'admin_logout')), 3 => new \Symfony\Component\Security\Http\Firewall\SimplePreAuthenticationListener($a, $e, 'admin_area', $this->get('elcodi_admin.security.one_time_login_authenticator'), $b, $c), 4 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $e, $this->get('security.authentication.session_strategy'), $d, 'admin_area', $g, $h, array('check_path' => 'admin_login_check', 'username_parameter' => 'elcodi_admin_user_form_type_login[email]', 'password_parameter' => 'elcodi_admin_user_form_type_login[password]', 'use_forward' => false, 'require_previous_session' => true, 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $b, $c, NULL), 5 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '57d4e442284ec5.72256132', $b, $e), 6 => $this->get('security.access_listener'), 7 => $this->get('elcodi_plugin.store_setup_wizard.event_listener.dashboard_redirection'), 8 => $this->get('elcodi_plugin.store_setup_wizard.event_listener.disable_wizard')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $d, 'admin_area', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($f, $d, 'admin_login', false), NULL, NULL, $b, false));
    }

    /**
     * Gets the 'security.firewall.map.context.api_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_ApiAreaService()
    {
        return $this->services['security.firewall.map.context.api_area'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.dev_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_DevAreaService()
    {
        return $this->services['security.firewall.map.context.dev_area'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.public_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_PublicAreaService()
    {
        return $this->services['security.firewall.map.context.public_area'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL);
    }

    /**
     * Gets the 'security.firewall.map.context.store_area' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    protected function getSecurity_Firewall_Map_Context_StoreAreaService()
    {
        $a = $this->get('security.token_storage');
        $b = $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $c = $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $d = $this->get('security.http_utils');
        $e = $this->get('http_kernel');
        $f = $this->get('security.authentication.manager');
        $g = $this->get('security.authentication.session_strategy');

        $h = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($d, array());
        $h->setOptions(array('login_path' => 'store_login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $h->setProviderKey('store_area');

        $i = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $d, array(), $b);
        $i->setOptions(array('login_path' => 'store_login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        $j = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($d, array());
        $j->setOptions(array('login_path' => 'store_login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $j->setProviderKey('store_area');

        $k = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($e, $d, array(), $b);
        $k->setOptions(array('login_path' => 'store_login', 'failure_path' => 'store_login', 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        $l = new \HWI\Bundle\OAuthBundle\Security\Http\Firewall\OAuthListener($a, $f, $g, $d, 'store_area', $j, $k, array('use_forward' => false, 'check_path' => '/login_check', 'require_previous_session' => true), $b, $c);
        $l->setResourceOwnerMap($this->get('hwi_oauth.resource_ownermap.store_area'));
        $l->setCheckPaths(array(0 => '/login/check-github', 1 => '/login/check-paypal'));

        return $this->services['security.firewall.map.context.store_area'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => $this->get('security.channel_listener'), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => $this->get('security.user.provider.concrete.customer'), 1 => $this->get('security.user.provider.concrete.adminuser')), 'store_area', $b, $c), 2 => new \Symfony\Component\Security\Http\Firewall\LogoutListener($a, $d, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($d, 'store_homepage'), array('csrf_parameter' => '_csrf_token', 'intention' => 'logout', 'logout_path' => 'store_logout')), 3 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $f, $g, $d, 'store_area', $h, $i, array('check_path' => 'store_login_check', 'username_parameter' => 'store_user_form_type_login[email]', 'password_parameter' => 'store_user_form_type_login[password]', 'use_forward' => false, 'require_previous_session' => true, 'csrf_parameter' => '_csrf_token', 'intention' => 'authenticate', 'post_only' => true), $b, $c, NULL), 4 => $l, 5 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '57d4e442284ec5.72256132', $b, $f), 6 => $this->get('security.access_listener'), 7 => $this->get('elcodi_common.event_listener.firewall_store_area'), 8 => $this->get('elcodi_store.event_listener.store_disabled')), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $this->get('security.authentication.trust_resolver'), $d, 'store_area', new \HWI\Bundle\OAuthBundle\Security\Http\EntryPoint\OAuthEntryPoint($e, $d, 'store_login', false), NULL, NULL, $b, false));
    }

    /**
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance.
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder($this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     */
    protected function getSecurity_SecureRandomService()
    {
        return $this->services['security.secure_random'] = new \Symfony\Component\Security\Core\Util\SecureRandom((__DIR__.'/secure_random.seed'), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance.
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator($this->get('security.token_storage'), $this->get('security.encoder_factory'));
    }

    /**
     * Gets the 'sensio_distribution.security_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\SecurityChecker A SensioLabs\Security\SecurityChecker instance.
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the 'sensio_distribution.security_checker.command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand A SensioLabs\Security\Command\SecurityCheckerCommand instance.
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand($this->get('sensio_distribution.security_checker'));
    }

    /**
     * Gets the 'sensio_distribution.webconfigurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\DistributionBundle\Configurator\Configurator A Sensio\Bundle\DistributionBundle\Configurator\Configurator instance.
     */
    protected function getSensioDistribution_WebconfiguratorService()
    {
        $this->services['sensio_distribution.webconfigurator'] = $instance = new \Sensio\Bundle\DistributionBundle\Configurator\Configurator($this->targetDirs[2]);

        $instance->addStep(new \Sensio\Bundle\DistributionBundle\Configurator\Step\DoctrineStep(), 10);
        $instance->addStep(new \Sensio\Bundle\DistributionBundle\Configurator\Step\SecretStep(), 0);

        return $instance;
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance.
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener($this->get('annotation_reader'));
    }

    /**
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance.
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), $this->get('security.authentication.trust_resolver', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser($this->get('kernel'));
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    protected function getServiceContainerService()
    {
        throw new RuntimeException('You have requested a synthetic service ("service_container"). The DIC does not know how to construct this service.');
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session($this->get('session.storage.native'), new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance.
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('gc_probability' => 1), NULL, $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(NULL, $this->get('session.storage.metadata_bag'));
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener($this);
    }

    /**
     * Gets the 'simple_doctrine_mapping.locator_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Mmoreram\SimpleDoctrineMapping\Configurator\LocatorConfigurator A Mmoreram\SimpleDoctrineMapping\Configurator\LocatorConfigurator instance.
     */
    protected function getSimpleDoctrineMapping_LocatorConfiguratorService()
    {
        return $this->services['simple_doctrine_mapping.locator_configurator'] = new \Mmoreram\SimpleDoctrineMapping\Configurator\LocatorConfigurator($this->get('kernel'));
    }

    /**
     * Gets the 'snc_redis.logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Snc\RedisBundle\Logger\RedisLogger A Snc\RedisBundle\Logger\RedisLogger instance.
     */
    protected function getSncRedis_LoggerService()
    {
        return $this->services['snc_redis.logger'] = new \Snc\RedisBundle\Logger\RedisLogger($this->get('monolog.logger.snc_redis', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'snc_redis.metric' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Predis\Client A Predis\Client instance.
     */
    protected function getSncRedis_MetricService()
    {
        return $this->services['snc_redis.metric'] = new \Predis\Client(new \Predis\Connection\Parameters(array('profile' => '2.8', 'read_write_timeout' => NULL, 'iterable_multibulk' => false, 'prefix' => NULL, 'replication' => false, 'async_connect' => false, 'timeout' => 5, 'persistent' => false, 'exceptions' => true, 'logging' => false, 'alias' => 'metric', 'scheme' => 'tcp', 'host' => 'localhost', 'port' => 6379, 'password' => NULL, 'weight' => NULL)), new \Predis\Configuration\Options(array('profile' => new \Predis\Profile\RedisVersion280(), 'read_write_timeout' => NULL, 'iterable_multibulk' => false, 'prefix' => NULL, 'replication' => false, 'async_connect' => false, 'timeout' => 5, 'persistent' => false, 'exceptions' => true)));
    }

    /**
     * Gets the 'store.connect.object_manager.authorization' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager A Doctrine\Common\Persistence\ObjectManager instance.
     */
    protected function getStore_Connect_ObjectManager_AuthorizationService()
    {
        return $this->services['store.connect.object_manager.authorization'] = $this->get('elcodi.provider.manager')->getManagerByEntityNamespace('Elcodi\\Store\\ConnectBundle\\Entity\\Authorization');
    }

    /**
     * Gets the 'store.connect.repository.authorization' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Persistence\ObjectRepository A Doctrine\Common\Persistence\ObjectRepository instance.
     */
    protected function getStore_Connect_Repository_AuthorizationService()
    {
        return $this->services['store.connect.repository.authorization'] = $this->get('elcodi.provider.repository')->getRepositoryByEntityNamespace('Elcodi\\Store\\ConnectBundle\\Entity\\Authorization');
    }

    /**
     * Gets the 'store.fixtures_booster.command.load_fixtures' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Bundle\FixturesBoosterBundle\Command\LoadDataFixturesDoctrineCommand A Elcodi\Bundle\FixturesBoosterBundle\Command\LoadDataFixturesDoctrineCommand instance.
     */
    protected function getStore_FixturesBooster_Command_LoadFixturesService()
    {
        return $this->services['store.fixtures_booster.command.load_fixtures'] = new \Elcodi\Bundle\FixturesBoosterBundle\Command\LoadDataFixturesDoctrineCommand($this->get('kernel'), NULL);
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance.
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer($this->get('swiftmailer.mailer.default.transport'));
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance.
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'), $this->get('swiftmailer.mailer.default.spool'));

        $instance->registerPlugin($this->get('swiftmailer.mailer.default.plugin.messagelogger'));

        return $instance;
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_NullTransport A Swift_Transport_NullTransport instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        return $this->services['swiftmailer.mailer.default.transport.real'] = new \Swift_Transport_NullTransport($this->get('swiftmailer.mailer.default.transport.eventdispatcher'));
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine A Symfony\Bundle\TwigBundle\TwigEngine instance.
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine($this->get('twig'), $this->get('templating.name_parser'), $this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper instance.
     */
    protected function getTemplating_Helper_AssetsService()
    {
        return $this->services['templating.helper.assets'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\AssetsHelper($this->get('assets.packages'), array());
    }

    /**
     * Gets the 'templating.helper.gravatar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ornicar\GravatarBundle\Templating\Helper\GravatarHelper A Ornicar\GravatarBundle\Templating\Helper\GravatarHelper instance.
     */
    protected function getTemplating_Helper_GravatarService()
    {
        return $this->services['templating.helper.gravatar'] = new \Ornicar\GravatarBundle\Templating\Helper\GravatarHelper($this->get('gravatar.api'), $this);
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper($this->get('security.logout_url_generator'));
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    protected function getTemplating_Helper_RouterService()
    {
        return $this->services['templating.helper.router'] = new \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper($this->get('router'));
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader($this->get('templating.locator'));
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance.
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance.
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', $this->get('translation.extractor.php'));
        $instance->addExtractor('twig', $this->get('twig.translation.extractor'));

        return $instance;
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    protected function getTranslation_LoaderService()
    {
        $a = $this->get('translation.loader.xliff');

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', $this->get('translation.loader.php'));
        $instance->addLoader('yml', $this->get('translation.loader.yml'));
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', $this->get('translation.loader.po'));
        $instance->addLoader('mo', $this->get('translation.loader.mo'));
        $instance->addLoader('ts', $this->get('translation.loader.qt'));
        $instance->addLoader('csv', $this->get('translation.loader.csv'));
        $instance->addLoader('res', $this->get('translation.loader.res'));
        $instance->addLoader('dat', $this->get('translation.loader.dat'));
        $instance->addLoader('ini', $this->get('translation.loader.ini'));
        $instance->addLoader('json', $this->get('translation.loader.json'));

        return $instance;
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance.
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance.
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', $this->get('translation.dumper.php'));
        $instance->addDumper('xlf', $this->get('translation.dumper.xliff'));
        $instance->addDumper('po', $this->get('translation.dumper.po'));
        $instance->addDumper('mo', $this->get('translation.dumper.mo'));
        $instance->addDumper('yml', $this->get('translation.dumper.yml'));
        $instance->addDumper('ts', $this->get('translation.dumper.qt'));
        $instance->addDumper('csv', $this->get('translation.dumper.csv'));
        $instance->addDumper('ini', $this->get('translation.dumper.ini'));
        $instance->addDumper('json', $this->get('translation.dumper.json'));
        $instance->addDumper('res', $this->get('translation.dumper.res'));

        return $instance;
    }

    /**
     * Gets the 'translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator A Symfony\Component\Translation\DataCollectorTranslator instance.
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator($this->get('translator.default'), $this->get('monolog.logger.translation')));
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance.
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator($this, new \Symfony\Component\Translation\MessageSelector(), array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('af' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.af.xlf')), 'ar' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ar.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ar.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ar.xlf')), 'az' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.az.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.az.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.az.xlf')), 'bg' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.bg.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.bg.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.bg.xlf')), 'ca' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ca.xlf'), 3 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.ca.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.ca.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.ca.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.ca.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.ca.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/translations/messages.ca.yml'), 9 => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/translations/messages.ca.yml'), 10 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/translations/messages.ca.yml'), 11 => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/translations/messages.ca.yml'), 12 => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/translations/messages.ca.yml'), 13 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/translations/messages.ca.yml'), 14 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.ca.yml'), 15 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/translations/messages.ca.yml'), 16 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/translations/messages.ca.yml'), 17 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/translations/messages.ca.yml'), 18 => ($this->targetDirs[3].'/src/Elcodi/Plugin/BankwireBundle/Resources/translations/messages.ca.yml')), 'cs' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.cs.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.cs.xlf')), 'cy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.cy.xlf')), 'da' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.da.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.da.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.da.xlf')), 'de' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.de.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.de.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.de.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.de.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.de.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.de.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.de.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.de.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.de.yml'), 9 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/translations/messages.de.yml'), 10 => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/translations/messages.de.yml'), 11 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/translations/messages.de.yml'), 12 => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/translations/messages.de.yml'), 13 => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/translations/messages.de.yml'), 14 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/translations/messages.de.yml'), 15 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.de.yml'), 16 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/translations/messages.de.yml'), 17 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/translations/messages.de.yml'), 18 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/translations/messages.de.yml')), 'el' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.el.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.el.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.el.xlf')), 'en' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.en.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.en.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.en.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.en.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.en.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.en.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.en.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.en.yml'), 9 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/translations/messages.en.yml'), 10 => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/translations/messages.en.yml'), 11 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/translations/messages.en.yml'), 12 => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/translations/messages.en.yml'), 13 => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/translations/messages.en.yml'), 14 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/translations/messages.en.yml'), 15 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.en.yml'), 16 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/translations/messages.en.yml'), 17 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/translations/messages.en.yml'), 18 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/translations/messages.en.yml'), 19 => ($this->targetDirs[3].'/src/Elcodi/Plugin/BankwireBundle/Resources/translations/messages.en.yml')), 'es' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.es.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.es.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.es.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.es.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.es.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.es.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.es.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.es.yml'), 9 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/translations/messages.es.yml'), 10 => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/translations/messages.es.yml'), 11 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/translations/messages.es.yml'), 12 => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/translations/messages.es.yml'), 13 => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/translations/messages.es.yml'), 14 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/translations/messages.es.yml'), 15 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.es.yml'), 16 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/translations/messages.es.yml'), 17 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/translations/messages.es.yml'), 18 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/translations/messages.es.yml'), 19 => ($this->targetDirs[3].'/src/Elcodi/Plugin/BankwireBundle/Resources/translations/messages.es.yml')), 'et' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.et.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.et.xlf')), 'eu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.eu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.eu.xlf')), 'fa' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fa.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fa.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fa.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fa.yml')), 'fi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fi.xlf'), 2 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.fi.yml'), 3 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.fi.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.fi.yml')), 'fr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.fr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.fr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.fr.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.fr.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.fr.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.fr.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.fr.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.fr.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.fr.yml')), 'gl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.gl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.gl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.gl.xlf'), 3 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.gl.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.gl.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.gl.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Common/CommonBundle/Resources/translations/messages.gl.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.gl.yml'), 8 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/translations/messages.gl.yml'), 9 => ($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/translations/messages.gl.yml'), 10 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/translations/messages.gl.yml'), 11 => ($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/translations/messages.gl.yml'), 12 => ($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/translations/messages.gl.yml'), 13 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/translations/messages.gl.yml'), 14 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/translations/messages.gl.yml'), 15 => ($this->targetDirs[3].'/src/Elcodi/Plugin/PaypalWebCheckoutBundle/Resources/translations/messages.gl.yml'), 16 => ($this->targetDirs[3].'/src/Elcodi/Plugin/FreePaymentBundle/Resources/translations/messages.gl.yml'), 17 => ($this->targetDirs[3].'/src/Elcodi/Plugin/StripeBundle/Resources/translations/messages.gl.yml'), 18 => ($this->targetDirs[3].'/src/Elcodi/Plugin/BankwireBundle/Resources/translations/messages.gl.yml')), 'he' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.he.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.he.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.he.xlf')), 'hr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hr.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hr.xlf')), 'hu' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hu.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.hu.xlf')), 'hy' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.hy.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.hy.xlf')), 'id' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.id.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.id.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.id.xlf')), 'it' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.it.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.it.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.it.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.it.yml'), 4 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.it.yml'), 5 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.it.yml'), 6 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.it.yml'), 7 => ($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/translations/messages.it.yml')), 'ja' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ja.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ja.xlf')), 'lb' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lb.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lb.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lb.xlf')), 'lt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lt.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.lt.xlf')), 'mn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.mn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.mn.xlf')), 'nb' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nb.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nb.xlf')), 'nl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.nl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.nl.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.nl.yml')), 'no' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.no.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.no.xlf')), 'pl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pl.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.pl.yml')), 'pt' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt.xlf')), 'pt_BR' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_BR.xlf')), 'ro' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ro.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ro.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ro.xlf')), 'ru' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.ru.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ru.xlf'), 3 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.ru.yml')), 'sk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sk.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sk.xlf')), 'sl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sl.xlf')), 'sq' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sq.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Cyrl.xlf')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sr_Latn.xlf')), 'sv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.sv.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.sv.xlf')), 'th' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.th.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.th.xlf')), 'tr' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.tr.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.tr.xlf'), 2 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.tr.yml')), 'uk' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.uk.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.uk.xlf'), 2 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.uk.yml')), 'vi' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.vi.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.vi.xlf')), 'zh_CN' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.zh_CN.xlf')), 'zh_TW' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.zh_TW.xlf')), 'lv' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/translations/validators.lv.xlf')), 'pt_PT' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Exception/../Resources/translations/security.ua.xlf')), 'zh' => array(0 => ($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/translations/HWIOAuthBundle.zh.yml')), 'sr' => array(0 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/messages.sr.yml'), 1 => ($this->targetDirs[3].'/src/Elcodi/Store/CoreBundle/Resources/translations/routes.sr.yml'), 2 => ($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/translations/messages.sr.yml')))), array());

        $instance->setFallbackLocales(array(0 => 'en'));

        return $instance;
    }

    /**
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance.
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener($this->get('translator'), $this->get('request_stack'));
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance.
     */
    protected function getTwigService()
    {
        $a = $this->get('router');
        $b = $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $c = $this->get('request_stack');
        $d = $this->get('fragment.handler');

        $e = new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($c);

        $f = new \Symfony\Bridge\Twig\AppVariable();
        $f->setEnvironment('dev');
        $f->setDebug(true);
        if ($this->has('security.token_storage')) {
            $f->setTokenStorage($this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
        if ($this->has('request_stack')) {
            $f->setRequestStack($c);
        }
        $f->setContainer($this);

        $this->services['twig'] = $instance = new \Twig_Environment($this->get('twig.loader'), array('debug' => true, 'strict_variables' => false, 'exception_controller' => 'twig.controller.exception:showAction', 'form_themes' => array(0 => 'form_div_layout.html.twig'), 'autoescape' => 'filename', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension($this->get('twig.extension.text'));
        $instance->addExtension(new \Elcodi\Component\Currency\Twig\MoneyPrinterExtension($this->get('elcodi.money_printer')));
        $instance->addExtension(new \Elcodi\Component\Media\Twig\ImageExtension($a, 'elcodi.route.image_resize', 'elcodi.route.image_view', ''));
        $instance->addExtension(new \Elcodi\Component\Product\Twig\ProductOptionsResolverExtension($this->get('elcodi.resolver.product_options')));
        $instance->addExtension(new \Elcodi\Component\Product\Twig\PurchasableNameResolverExtension($this->get('elcodi.name_resolver.purchasable')));
        $instance->addExtension(new \Elcodi\Component\Product\Twig\PurchasableImageResolverExtension($this->get('elcodi.image_resolver.purchasable')));
        $instance->addExtension(new \Elcodi\Component\Shipping\Twig\ShippingExtension($this->get('elcodi.wrapper.shipping_methods')));
        $instance->addExtension(new \Elcodi\Component\Menu\Twig\PrintRouteExtension($a));
        $instance->addExtension(new \Elcodi\Component\Plugin\Twig\HookExtension($this->get('elcodi.event_dispatcher.hook_system')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension($this->get('security.logout_url_generator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension($this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension($this->get('twig.profile'), $b));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($this->get('translator')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension($this->get('assets.packages'), $e));
        $instance->addExtension(new \Symfony\Bundle\TwigBundle\Extension\ActionsExtension($d));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(NULL, $this->targetDirs[2], 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($b, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension($d));
        $instance->addExtension($e);
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => 'form_div_layout.html.twig')), $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE))));
        $instance->addExtension(new \Twig_Extension_Debug());
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension($this->get('assetic.asset_factory'), $this->get('templating.name_parser'), false, array(), array(0 => 'AdminCoreBundle', 1 => 'StoreCoreBundle', 2 => 'StoreTemplateBundle', 3 => 'AdminGeoBundle', 4 => 'AdminStoreBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension($this->get('twig.extension.gravatar'));
        $instance->addExtension(new \HWI\Bundle\OAuthBundle\Twig\Extension\OAuthExtension($this->get('hwi_oauth.templating.helper.oauth')));
        $instance->addExtension(new \Elcodi\Component\Metric\API\Twig\APIMetricExtension($this->get('elcodi.redis_metrics_bucket')));
        $instance->addExtension(new \Elcodi\Component\Payment\Twig\PaymentExtension($this->get('elcodi.wrapper.payment_methods')));
        $instance->addExtension(new \Elcodi\Store\CoreBundle\Twig\EncryptExtension());
        $instance->addExtension(new \Elcodi\Store\CoreBundle\Twig\ReferrerExtension($this->get('elcodi.referrer_provider')));
        $instance->addExtension(new \Elcodi\Store\CoreBundle\Twig\TemplateLocatorExtension($this));
        $instance->addExtension($this->get('twig.stringloader'));
        $instance->addExtension($this->get('elcodi_elcodi_store.twig_extension.store_page'));
        $instance->addExtension($this->get('elcodi_admin.twig_extension.metric_intervals'));
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerExtension($this->get('jms_serializer')));
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension());
        $instance->addGlobal('app', $f);
        $instance->addGlobal('elcodi_context', array());
        $instance->addGlobal('currency_wrapper', $this->get('elcodi.wrapper.currency'));
        $instance->addGlobal('store', $this->get('elcodi.store'));
        $instance->addGlobal('store_tracker', $this->get('elcodi.store_tracker'));
        $instance->addGlobal('elcodi_languages', $this->get('elcodi.languages_with_master_promoted'));
        call_user_func(array(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','), 'configure'), $instance);

        return $instance;
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController($this->get('twig'), true);
    }

    /**
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance.
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController($this->get('http_kernel'), 'twig.controller.exception:showAction');
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'twig.extension.gravatar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Ornicar\GravatarBundle\Twig\GravatarExtension A Ornicar\GravatarBundle\Twig\GravatarExtension instance.
     */
    protected function getTwig_Extension_GravatarService()
    {
        return $this->services['twig.extension.gravatar'] = new \Ornicar\GravatarBundle\Twig\GravatarExtension($this->get('templating.helper.gravatar'));
    }

    /**
     * Gets the 'twig.extension.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extensions_Extension_Text A Twig_Extensions_Extension_Text instance.
     */
    protected function getTwig_Extension_TextService()
    {
        return $this->services['twig.extension.text'] = new \Twig_Extensions_Extension_Text();
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader($this->get('templating.locator'), $this->get('templating.name_parser'));

        $instance->addPath(($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/PaypalWebCheckoutBundle/Resources/views'), 'PaypalWebCheckout');
        $instance->addPath(($this->targetDirs[3].'/vendor/paymentsuite/paymentsuite/src/PaymentSuite/StripeBundle/Resources/views'), 'Stripe');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/Resources/views'), 'Security');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[3].'/vendor/hwi/oauth-bundle/Resources/views'), 'HWIOAuth');
        $instance->addPath(($this->targetDirs[3].'/vendor/snc/redis-bundle/Snc/RedisBundle/Resources/views'), 'SncRedis');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Store/PageBundle/Resources/views'), 'StorePage');
        $instance->addPath(($this->targetDirs[2].'/Resources/StoreOverrideBundle/views'), 'StoreOverride');
        $instance->addPath(($this->targetDirs[2].'/Resources/StoreFallbackBundle/views'), 'StoreFallback');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/CoreBundle/Resources/views'), 'AdminCore');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/UserBundle/Resources/views'), 'AdminUser');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/AttributeBundle/Resources/views'), 'AdminAttribute');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/BannerBundle/Resources/views'), 'AdminBanner');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/CartBundle/Resources/views'), 'AdminCart');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/CouponBundle/Resources/views'), 'AdminCoupon');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/CurrencyBundle/Resources/views'), 'AdminCurrency');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/LanguageBundle/Resources/views'), 'AdminLanguage');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/MediaBundle/Resources/views'), 'AdminMedia');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/NewsletterBundle/Resources/views'), 'AdminNewsletter');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/ProductBundle/Resources/views'), 'AdminProduct');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/PageBundle/Resources/views'), 'AdminPage');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/TemplateBundle/Resources/views'), 'AdminTemplate');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/MetricBundle/Resources/views'), 'AdminMetric');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/PluginBundle/Resources/views'), 'AdminPlugin');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/GeoBundle/Resources/views'), 'AdminGeo');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Admin/StoreBundle/Resources/views'), 'AdminStore');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/GoogleAnalyticsBundle/Resources/views'), 'ElcodiGoogleAnalytics');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/PinterestBundle/Resources/views'), 'ElcodiPinterest');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/ProductCsvBundle/Resources/views'), 'ElcodiProductCsv');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/StoreSetupWizardBundle/Resources/views'), 'ElcodiStoreSetupWizard');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/DisqusBundle/Resources/views'), 'ElcodiDisqus');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/TwitterBundle/Resources/views'), 'ElcodiTwitter');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/FacebookBundle/Resources/views'), 'ElcodiFacebook');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/StoreTemplateBundle/Resources/views'), 'StoreTemplate');
        $instance->addPath(($this->targetDirs[3].'/src/Elcodi/Plugin/CustomShippingBundle/Resources/views'), 'ElcodiCustomShipping');
        $instance->addPath(($this->targetDirs[3].'/src/Best365/Store/UserBundle/Resources/views'), 'User');
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath(($this->targetDirs[3].'/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/views'), 'SensioDistribution');
        $instance->addPath(($this->targetDirs[2].'/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Bridge/Twig/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the 'twig.profile' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Profiler_Profile A Twig_Profiler_Profile instance.
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig_Profiler_Profile();
    }

    /**
     * Gets the 'twig.stringloader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Extension_StringLoader A Twig_Extension_StringLoader instance.
     */
    protected function getTwig_StringloaderService()
    {
        return $this->services['twig.stringloader'] = new \Twig_Extension_StringLoader();
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor($this->get('twig'));
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('4acbc300e57d46cb58ac0c629945c17b727f99c8');
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface A Symfony\Component\Validator\Validator\ValidatorInterface instance.
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = $this->get('validator.builder')->getValidator();
    }

    /**
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance.
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(new \Symfony\Bundle\FrameworkBundle\Validator\ConstraintValidatorFactory($this, array('city_exists' => 'elcodi.validator.city_exists', 'validator.expression' => 'validator.expression', 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => 'validator.email', 'security.validator.user_password' => 'security.validator.user_password', 'doctrine.orm.validator.unique' => 'doctrine.orm.validator.unique', 'minimum_money' => 'elcodi_admin.validator.minimum_money')));
        $instance->setTranslator($this->get('translator'));
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'/vendor/symfony/symfony/src/Symfony/Component/Form/Resources/config/validation.xml')));
        $instance->addYamlMappings(array(0 => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/GeoBundle/Resources/config/validation.yml'), 1 => ($this->targetDirs[3].'/vendor/elcodi/elcodi/src/Elcodi/Bundle/UserBundle/Resources/config/validation.yml')));
        $instance->enableAnnotationMapping($this->get('annotation_reader'));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => $this->get('doctrine.orm.validator_initializer')));

        return $instance;
    }

    /**
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance.
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance.
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator($this->get('property_accessor'));
    }

    /**
     * Gets the 'visithor.client' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Bundle\Client\SymfonyClient A Visithor\Bundle\Client\SymfonyClient instance.
     */
    protected function getVisithor_ClientService()
    {
        return $this->services['visithor.client'] = new \Visithor\Bundle\Client\SymfonyClient($this->get('session'), $this->get('visitor.environment_builder'), new \AppKernel('dev', true));
    }

    /**
     * Gets the 'visithor.command.go' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Bundle\Command\GoCommand A Visithor\Bundle\Command\GoCommand instance.
     */
    protected function getVisithor_Command_GoService()
    {
        return $this->services['visithor.command.go'] = new \Visithor\Bundle\Command\GoCommand($this->get('visithor.url_generator'), $this->get('visithor.renderer_factory'), $this->get('visithor.executor'));
    }

    /**
     * Gets the 'visithor.executor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Visithor\Executor\Executor A Visithor\Executor\Executor instance.
     */
    public function getVisithor_ExecutorService($lazyLoad = true)
    {
        if ($lazyLoad) {
            $container = $this;

            return $this->services['visithor.executor'] = new VisithorExecutorExecutor_0000000004738bb20000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = $container->getVisithor_ExecutorService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \Visithor\Executor\Executor($this->get('visithor.client'));
    }

    /**
     * Gets the 'visithor.factory.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Factory\UrlFactory A Visithor\Factory\UrlFactory instance.
     */
    protected function getVisithor_Factory_UrlService()
    {
        return $this->services['visithor.factory.url'] = new \Visithor\Factory\UrlFactory();
    }

    /**
     * Gets the 'visithor.factory.url_chain' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Factory\UrlChainFactory A Visithor\Factory\UrlChainFactory instance.
     */
    protected function getVisithor_Factory_UrlChainService()
    {
        return $this->services['visithor.factory.url_chain'] = new \Visithor\Factory\UrlChainFactory();
    }

    /**
     * Gets the 'visithor.renderer_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Renderer\RendererFactory A Visithor\Renderer\RendererFactory instance.
     */
    protected function getVisithor_RendererFactoryService()
    {
        return $this->services['visithor.renderer_factory'] = new \Visithor\Renderer\RendererFactory();
    }

    /**
     * Gets the 'visithor.url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Visithor\Bundle\Generator\SymfonyUrlGenerator A Visithor\Bundle\Generator\SymfonyUrlGenerator instance.
     */
    protected function getVisithor_UrlGeneratorService()
    {
        return $this->services['visithor.url_generator'] = new \Visithor\Bundle\Generator\SymfonyUrlGenerator($this->get('visithor.factory.url'), $this->get('visithor.factory.url_chain'), $this->get('router'));
    }

    /**
     * Gets the 'visitor.environment_builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Elcodi\Bridge\VisithorBridgeBundle\Environment\EnvironmentBuilder A Elcodi\Bridge\VisithorBridgeBundle\Environment\EnvironmentBuilder instance.
     */
    protected function getVisitor_EnvironmentBuilderService()
    {
        return $this->services['visitor.environment_builder'] = new \Elcodi\Bridge\VisithorBridgeBundle\Environment\EnvironmentBuilder($this->get('elcodi.repository.customer'), $this->get('elcodi.repository.admin_user'));
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), true);
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController($this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), array('data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig'), 'data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => '@Security/Collector/security.html.twig'), 'snc_redis.data_collector' => array(0 => 'redis', 1 => 'SncRedisBundle:Collector:redis')), 'bottom');
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController($this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('twig'), $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener($this->get('twig'), false, 2, 'bottom', $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), '^/(app(_[\\w]+)?\\.php/)?_wdt');
    }

    /**
     * Updates the 'request' service.
     */
    protected function synchronizeRequestService()
    {
        if ($this->initialized('hwi_oauth.templating.helper.oauth')) {
            $this->get('hwi_oauth.templating.helper.oauth')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));
        }
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance.
     */
    protected function getAssetic_AssetFactoryService()
    {
        return $this->services['assetic.asset_factory'] = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory($this->get('kernel'), $this, $this->getParameterBag(), ($this->targetDirs[2].'/../web'), true);
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser($this->get('kernel'));
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the 'hwi_oauth.storage.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \HWI\Bundle\OAuthBundle\OAuth\RequestDataStorage\SessionStorage A HWI\Bundle\OAuthBundle\OAuth\RequestDataStorage\SessionStorage instance.
     */
    protected function getHwiOauth_Storage_SessionService()
    {
        return $this->services['hwi_oauth.storage.session'] = new \HWI\Bundle\OAuthBundle\OAuth\RequestDataStorage\SessionStorage($this->get('session'));
    }

    /**
     * Gets the 'jms_serializer.unserialize_object_constructor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor A JMS\Serializer\Construction\UnserializeObjectConstructor instance.
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        $a = $this->get('security.role_hierarchy');
        $b = $this->get('security.authentication.trust_resolver');

        return $this->services['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter($a), 1 => new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), $b, $a), 2 => new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter($b)), 'affirmative', false, true);
    }

    /**
     * Gets the 'security.access_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener A Symfony\Component\Security\Http\Firewall\AccessListener instance.
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener($this->get('security.token_storage'), $this->get('security.access.decision_manager'), $this->get('security.access_map'), $this->get('security.authentication.manager'));
    }

    /**
     * Gets the 'security.access_map' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\AccessMap A Symfony\Component\Security\Http\AccessMap instance.
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/login.*'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/password.*'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/.*'), array(0 => 'ROLE_ADMIN'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/.*'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);

        return $instance;
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $a = $this->get('security.user.provider.concrete.adminuser');
        $b = $this->get('hwi_oauth.user_checker');
        $c = $this->get('security.encoder_factory');

        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(array(0 => new \Symfony\Component\Security\Core\Authentication\Provider\SimpleAuthenticationProvider($this->get('elcodi_admin.security.one_time_login_authenticator'), $a, 'admin_area'), 1 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($a, $b, 'admin_area', $c, true), 2 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('57d4e442284ec5.72256132'), 3 => new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider($this->get('security.user.provider.concrete.customer'), $b, 'store_area', $c, true), 4 => new \HWI\Bundle\OAuthBundle\Security\Core\Authentication\Provider\OAuthProvider($this->get('elcodi_store.provider.oauth'), $this->get('hwi_oauth.resource_ownermap.store_area'), $b), 5 => new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('57d4e442284ec5.72256132')), true);

        $instance->setEventDispatcher($this->get('debug.event_dispatcher'));

        return $instance;
    }

    /**
     * Gets the 'security.authentication.session_strategy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy A Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy instance.
     */
    protected function getSecurity_Authentication_SessionStrategyService()
    {
        return $this->services['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate');
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the 'security.channel_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener A Symfony\Component\Security\Http\Firewall\ChannelListener instance.
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener($this->get('security.access_map'), new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE));
    }

    /**
     * Gets the 'security.http_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\HttpUtils A Symfony\Component\Security\Http\HttpUtils instance.
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE);

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a);
    }

    /**
     * Gets the 'security.logout_url_generator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator A Symfony\Component\Security\Http\Logout\LogoutUrlGenerator instance.
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator($this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE), $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        $instance->registerListener('admin_area', 'admin_logout', 'logout', '_csrf_token', NULL);
        $instance->registerListener('store_area', 'store_logout', 'logout', '_csrf_token', NULL);

        return $instance;
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array('ROLE_CUSTOMER' => array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), 'ROLE_ADMIN' => array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY')));
    }

    /**
     * Gets the 'security.user.provider.concrete.adminuser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider A Symfony\Bridge\Doctrine\Security\User\EntityUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_AdminuserService()
    {
        return $this->services['security.user.provider.concrete.adminuser'] = new \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider($this->get('doctrine'), 'Elcodi\\Component\\User\\Entity\\AdminUser', 'email', NULL);
    }

    /**
     * Gets the 'security.user.provider.concrete.customer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider A Symfony\Bridge\Doctrine\Security\User\EntityUserProvider instance.
     */
    protected function getSecurity_User_Provider_Concrete_CustomerService()
    {
        return $this->services['security.user.provider.concrete.customer'] = new \Symfony\Bridge\Doctrine\Security\User\EntityUserProvider($this->get('doctrine'), 'Elcodi\\Component\\User\\Entity\\Customer', 'email', NULL);
    }

    /**
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance.
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator($this->get('file_locator'), __DIR__);
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $this->parameterBag = new FrozenParameterBag($this->parameters);
        }

        return $this->parameterBag;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.root_dir' => $this->targetDirs[2],
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.logs_dir' => ($this->targetDirs[2].'/logs'),
            'kernel.bundles' => array(
                'ElcodiCartBundle' => 'Elcodi\\Bundle\\CartBundle\\ElcodiCartBundle',
                'ElcodiCouponBundle' => 'Elcodi\\Bundle\\CouponBundle\\ElcodiCouponBundle',
                'ElcodiRuleBundle' => 'Elcodi\\Bundle\\RuleBundle\\ElcodiRuleBundle',
                'ElcodiCoreBundle' => 'Elcodi\\Bundle\\CoreBundle\\ElcodiCoreBundle',
                'ElcodiCurrencyBundle' => 'Elcodi\\Bundle\\CurrencyBundle\\ElcodiCurrencyBundle',
                'ElcodiLanguageBundle' => 'Elcodi\\Bundle\\LanguageBundle\\ElcodiLanguageBundle',
                'ElcodiMediaBundle' => 'Elcodi\\Bundle\\MediaBundle\\ElcodiMediaBundle',
                'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle',
                'ElcodiGeoBundle' => 'Elcodi\\Bundle\\GeoBundle\\ElcodiGeoBundle',
                'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle',
                'ElcodiAttributeBundle' => 'Elcodi\\Bundle\\AttributeBundle\\ElcodiAttributeBundle',
                'ElcodiStoreBundle' => 'Elcodi\\Bundle\\StoreBundle\\ElcodiStoreBundle',
                'ElcodiUserBundle' => 'Elcodi\\Bundle\\UserBundle\\ElcodiUserBundle',
                'ElcodiProductBundle' => 'Elcodi\\Bundle\\ProductBundle\\ElcodiProductBundle',
                'ElcodiStateTransitionMachineBundle' => 'Elcodi\\Bundle\\StateTransitionMachineBundle\\ElcodiStateTransitionMachineBundle',
                'ElcodiShippingBundle' => 'Elcodi\\Bundle\\ShippingBundle\\ElcodiShippingBundle',
                'PaymentCoreBundle' => 'PaymentSuite\\PaymentCoreBundle\\PaymentCoreBundle',
                'ElcodiPaymentSuiteBridgeBundle' => 'Elcodi\\Bridge\\PaymentSuiteBridgeBundle\\ElcodiPaymentSuiteBridgeBundle',
                'PaypalWebCheckoutBundle' => 'PaymentSuite\\PaypalWebCheckoutBundle\\PaypalWebCheckoutBundle',
                'FreePaymentBundle' => 'PaymentSuite\\FreePaymentBundle\\FreePaymentBundle',
                'StripeBundle' => 'PaymentSuite\\StripeBundle\\StripeBundle',
                'ElcodiZoneBundle' => 'Elcodi\\Bundle\\ZoneBundle\\ElcodiZoneBundle',
                'ElcodiTaxBundle' => 'Elcodi\\Bundle\\TaxBundle\\ElcodiTaxBundle',
                'ElcodiEntityTranslatorBundle' => 'Elcodi\\Bundle\\EntityTranslatorBundle\\ElcodiEntityTranslatorBundle',
                'ElcodiMenuBundle' => 'Elcodi\\Bundle\\MenuBundle\\ElcodiMenuBundle',
                'ElcodiPluginBundle' => 'Elcodi\\Bundle\\PluginBundle\\ElcodiPluginBundle',
                'BankwireBundle' => 'PaymentSuite\\BankwireBundle\\BankwireBundle',
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'OrnicarGravatarBundle' => 'Ornicar\\GravatarBundle\\OrnicarGravatarBundle',
                'HWIOAuthBundle' => 'HWI\\Bundle\\OAuthBundle\\HWIOAuthBundle',
                'SncRedisBundle' => 'Snc\\RedisBundle\\SncRedisBundle',
                'JMSI18nRoutingBundle' => 'JMS\\I18nRoutingBundle\\JMSI18nRoutingBundle',
                'ControllerExtraBundle' => 'Mmoreram\\ControllerExtraBundle\\ControllerExtraBundle',
                'CacheFlushBundle' => 'Mmoreram\\CacheFlushBundle\\CacheFlushBundle',
                'HttpHeadersBundle' => 'Mmoreram\\HttpHeadersBundle\\HttpHeadersBundle',
                'ElcodiCartCouponBundle' => 'Elcodi\\Bundle\\CartCouponBundle\\ElcodiCartCouponBundle',
                'ElcodiBannerBundle' => 'Elcodi\\Bundle\\BannerBundle\\ElcodiBannerBundle',
                'ElcodiNewsletterBundle' => 'Elcodi\\Bundle\\NewsletterBundle\\ElcodiNewsletterBundle',
                'ElcodiPageBundle' => 'Elcodi\\Bundle\\PageBundle\\ElcodiPageBundle',
                'ElcodiMetricBundle' => 'Elcodi\\Bundle\\MetricBundle\\ElcodiMetricBundle',
                'ElcodiCommentBundle' => 'Elcodi\\Bundle\\CommentBundle\\ElcodiCommentBundle',
                'ElcodiCartShippingBundle' => 'Elcodi\\Bundle\\CartShippingBundle\\ElcodiCartShippingBundle',
                'ElcodiSitemapBundle' => 'Elcodi\\Bundle\\SitemapBundle\\ElcodiSitemapBundle',
                'ElcodiPaymentBundle' => 'Elcodi\\Bundle\\PaymentBundle\\ElcodiPaymentBundle',
                'StoreCoreBundle' => 'Elcodi\\Store\\CoreBundle\\StoreCoreBundle',
                'StoreProductBundle' => 'Elcodi\\Store\\ProductBundle\\StoreProductBundle',
                'StoreUserBundle' => 'Elcodi\\Store\\UserBundle\\StoreUserBundle',
                'StoreGeoBundle' => 'Elcodi\\Store\\GeoBundle\\StoreGeoBundle',
                'StoreCartBundle' => 'Elcodi\\Store\\CartBundle\\StoreCartBundle',
                'StoreCurrencyBundle' => 'Elcodi\\Store\\CurrencyBundle\\StoreCurrencyBundle',
                'StoreCartCouponBundle' => 'Elcodi\\Store\\CartCouponBundle\\StoreCartCouponBundle',
                'StoreConnectBundle' => 'Elcodi\\Store\\ConnectBundle\\StoreConnectBundle',
                'StoreMetricBundle' => 'Elcodi\\Store\\MetricBundle\\StoreMetricBundle',
                'StorePageBundle' => 'Elcodi\\Store\\PageBundle\\StorePageBundle',
                'StoreLanguageBundle' => 'Elcodi\\Store\\LanguageBundle\\StoreLanguageBundle',
                'StoreOverrideBundle' => 'Elcodi\\Store\\OverrideBundle\\StoreOverrideBundle',
                'StoreFallbackBundle' => 'Elcodi\\Store\\FallbackBundle\\StoreFallbackBundle',
                'AdminCoreBundle' => 'Elcodi\\Admin\\CoreBundle\\AdminCoreBundle',
                'AdminUserBundle' => 'Elcodi\\Admin\\UserBundle\\AdminUserBundle',
                'AdminAttributeBundle' => 'Elcodi\\Admin\\AttributeBundle\\AdminAttributeBundle',
                'AdminBannerBundle' => 'Elcodi\\Admin\\BannerBundle\\AdminBannerBundle',
                'AdminCartBundle' => 'Elcodi\\Admin\\CartBundle\\AdminCartBundle',
                'AdminCouponBundle' => 'Elcodi\\Admin\\CouponBundle\\AdminCouponBundle',
                'AdminCurrencyBundle' => 'Elcodi\\Admin\\CurrencyBundle\\AdminCurrencyBundle',
                'AdminLanguageBundle' => 'Elcodi\\Admin\\LanguageBundle\\AdminLanguageBundle',
                'AdminMediaBundle' => 'Elcodi\\Admin\\MediaBundle\\AdminMediaBundle',
                'AdminNewsletterBundle' => 'Elcodi\\Admin\\NewsletterBundle\\AdminNewsletterBundle',
                'AdminProductBundle' => 'Elcodi\\Admin\\ProductBundle\\AdminProductBundle',
                'AdminPageBundle' => 'Elcodi\\Admin\\PageBundle\\AdminPageBundle',
                'AdminTemplateBundle' => 'Elcodi\\Admin\\TemplateBundle\\AdminTemplateBundle',
                'AdminMetricBundle' => 'Elcodi\\Admin\\MetricBundle\\AdminMetricBundle',
                'AdminPluginBundle' => 'Elcodi\\Admin\\PluginBundle\\AdminPluginBundle',
                'AdminShippingBundle' => 'Elcodi\\Admin\\ShippingBundle\\AdminShippingBundle',
                'AdminGeoBundle' => 'Elcodi\\Admin\\GeoBundle\\AdminGeoBundle',
                'AdminPaymentBundle' => 'Elcodi\\Admin\\PaymentBundle\\AdminPaymentBundle',
                'AdminStoreBundle' => 'Elcodi\\Admin\\StoreBundle\\AdminStoreBundle',
                'ElcodiFirewallBundle' => 'Elcodi\\Common\\FirewallBundle\\ElcodiFirewallBundle',
                'ElcodiCommonBundle' => 'Elcodi\\Common\\CommonBundle\\ElcodiCommonBundle',
                'ElcodiGoogleAnalyticsBundle' => 'Elcodi\\Plugin\\GoogleAnalyticsBundle\\ElcodiGoogleAnalyticsBundle',
                'ElcodiPinterestBundle' => 'Elcodi\\Plugin\\PinterestBundle\\ElcodiPinterestBundle',
                'ElcodiProductCsvBundle' => 'Elcodi\\Plugin\\ProductCsvBundle\\ElcodiProductCsvBundle',
                'ElcodiStoreSetupWizardBundle' => 'Elcodi\\Plugin\\StoreSetupWizardBundle\\ElcodiStoreSetupWizardBundle',
                'ElcodiDisqusBundle' => 'Elcodi\\Plugin\\DisqusBundle\\ElcodiDisqusBundle',
                'ElcodiTwitterBundle' => 'Elcodi\\Plugin\\TwitterBundle\\ElcodiTwitterBundle',
                'ElcodiFacebookBundle' => 'Elcodi\\Plugin\\FacebookBundle\\ElcodiFacebookBundle',
                'StoreTemplateBundle' => 'Elcodi\\Plugin\\StoreTemplateBundle\\StoreTemplateBundle',
                'ElcodiPaypalWebCheckoutBundle' => 'Elcodi\\Plugin\\PaypalWebCheckoutBundle\\ElcodiPaypalWebCheckoutBundle',
                'ElcodiFreePaymentBundle' => 'Elcodi\\Plugin\\FreePaymentBundle\\ElcodiFreePaymentBundle',
                'ElcodiStripeBundle' => 'Elcodi\\Plugin\\StripeBundle\\ElcodiStripeBundle',
                'ElcodiCustomShippingBundle' => 'Elcodi\\Plugin\\CustomShippingBundle\\ElcodiCustomShippingBundle',
                'ElcodiBankwireBundle' => 'Elcodi\\Plugin\\BankwireBundle\\ElcodiBankwireBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
                'UserBundle' => 'Best365\\Store\\UserBundle\\UserBundle',
                'ElcodiFixturesBoosterBundle' => 'Elcodi\\Bundle\\FixturesBoosterBundle\\ElcodiFixturesBoosterBundle',
                'BehatBridgeBundle' => 'Elcodi\\Bridge\\BehatBridgeBundle\\BehatBridgeBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'VisithorBundle' => 'Visithor\\Bundle\\VisithorBundle',
                'ElcodiVisithorBridgeBundle' => 'Elcodi\\Bridge\\VisithorBridgeBundle\\ElcodiVisithorBridgeBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'locale' => 'en',
            'database_driver' => 'pdo_mysql',
            'database_host' => '127.0.0.1',
            'database_port' => NULL,
            'database_name' => 'bamboo',
            'database_user' => 'root',
            'database_password' => 123456,
            'mailer_transport' => 'smtp',
            'mailer_host' => '127.0.0.1',
            'mailer_user' => NULL,
            'mailer_password' => NULL,
            'mailer_port' => NULL,
            'secret' => '4acbc300e57d46cb58ac0c629945c17b727f99c8',
            'use_assetic_controller' => false,
            'debug_toolbar' => true,
            'debug_redirects' => false,
            'paypal_web_checkout_recipient' => 'payment-test-facilitator@elcodi.com',
            'bamboo_social_github_client_id' => 'github-client-id',
            'bamboo_social_github_client_secret' => 'github-client-secret',
            'bamboo_social_paypal_client_id' => 'paypal-client-id',
            'bamboo_social_paypal_client_secret' => 'paypal-client-secret',
            'bamboo_social_paypal_client_is_sandbox' => true,
            'bamboo_admin_prefix' => 'admin',
            'bamboo_api_prefix' => 'api',
            'bamboo_store_firewall' => 'store_area',
            'database_path' => NULL,
            'elcodi.entity.cart.class' => 'Elcodi\\Component\\Cart\\Entity\\Cart',
            'elcodi.entity.cart.mapping_file' => '@ElcodiCartBundle/Resources/config/doctrine/Cart.orm.yml',
            'elcodi.entity.cart.manager' => 'default',
            'elcodi.entity.cart.enabled' => true,
            'elcodi.entity.order.class' => 'Elcodi\\Component\\Cart\\Entity\\Order',
            'elcodi.entity.order.mapping_file' => '@ElcodiCartBundle/Resources/config/doctrine/Order.orm.yml',
            'elcodi.entity.order.manager' => 'default',
            'elcodi.entity.order.enabled' => true,
            'elcodi.entity.cart_line.class' => 'Elcodi\\Component\\Cart\\Entity\\CartLine',
            'elcodi.entity.cart_line.mapping_file' => '@ElcodiCartBundle/Resources/config/doctrine/CartLine.orm.yml',
            'elcodi.entity.cart_line.manager' => 'default',
            'elcodi.entity.cart_line.enabled' => true,
            'elcodi.entity.order_line.class' => 'Elcodi\\Component\\Cart\\Entity\\OrderLine',
            'elcodi.entity.order_line.mapping_file' => '@ElcodiCartBundle/Resources/config/doctrine/OrderLine.orm.yml',
            'elcodi.entity.order_line.manager' => 'default',
            'elcodi.entity.order_line.enabled' => true,
            'elcodi.cart_save_in_session' => true,
            'elcodi.cart_session_field_name' => 'cart_id',
            'elcodi.order_payment_states_machine_states' => array(
                0 => array(
                    0 => 'unpaid',
                    1 => 'pay',
                    2 => 'paid',
                ),
                1 => array(
                    0 => 'paid',
                    1 => 'refund',
                    2 => 'refunded',
                ),
            ),
            'elcodi.order_payment_states_machine_identifier' => 'order_payment_states_machine',
            'elcodi.order_payment_states_machine_point_of_entry' => 'unpaid',
            'elcodi.order_shipping_states_machine_states' => array(
                0 => array(
                    0 => 'preparing',
                    1 => 'order ready',
                    2 => 'processed',
                ),
                1 => array(
                    0 => 'processed',
                    1 => 'picked up by carrier',
                    2 => 'in delivery',
                ),
                2 => array(
                    0 => 'processed',
                    1 => 'picked up on store',
                    2 => 'delivered',
                ),
                3 => array(
                    0 => 'in delivery',
                    1 => 'delivered',
                    2 => 'delivered',
                ),
                4 => array(
                    0 => 'preparing',
                    1 => 'cancel',
                    2 => 'cancelled',
                ),
                5 => array(
                    0 => 'processed',
                    1 => 'cancel',
                    2 => 'cancelled',
                ),
                6 => array(
                    0 => 'in delivery',
                    1 => 'cancel',
                    2 => 'cancelled',
                ),
                7 => array(
                    0 => 'in delivery',
                    1 => 'return',
                    2 => 'returned',
                ),
                8 => array(
                    0 => 'delivered',
                    1 => 'return',
                    2 => 'returned',
                ),
            ),
            'elcodi.order_shipping_states_machine_identifier' => 'order_shipping_states_machine',
            'elcodi.order_shipping_states_machine_point_of_entry' => 'preparing',
            'elcodi.entity.coupon.class' => 'Elcodi\\Component\\Coupon\\Entity\\Coupon',
            'elcodi.entity.coupon.mapping_file' => '@ElcodiCouponBundle/Resources/config/doctrine/Coupon.orm.yml',
            'elcodi.entity.coupon.manager' => 'default',
            'elcodi.entity.coupon.enabled' => true,
            'elcodi.entity.rule.class' => 'Elcodi\\Component\\Rule\\Entity\\Rule',
            'elcodi.entity.rule.mapping_file' => '@ElcodiRuleBundle/Resources/config/doctrine/Rule.orm.yml',
            'elcodi.entity.rule.manager' => 'default',
            'elcodi.entity.rule.enabled' => true,
            'elcodi.mapping_implementations' => array(
                'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier',
                'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\ShippingRangeInterface' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange',
                'Elcodi\\Store\\ConnectBundle\\Entity\\AuthorizationInterface' => 'Elcodi\\Store\\ConnectBundle\\Entity\\Authorization',
                'Elcodi\\Component\\Comment\\Entity\\Interfaces\\CommentInterface' => 'Elcodi\\Component\\Comment\\Entity\\Comment',
                'Elcodi\\Component\\Comment\\Entity\\Interfaces\\VoteInterface' => 'Elcodi\\Component\\Comment\\Entity\\Vote',
                'Elcodi\\Component\\Metric\\Core\\Entity\\Interfaces\\EntryInterface' => 'Elcodi\\Component\\Metric\\Core\\Entity\\Entry',
                'Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface' => 'Elcodi\\Component\\Page\\Entity\\Page',
                'Elcodi\\Component\\Newsletter\\Entity\\Interfaces\\NewsletterSubscriptionInterface' => 'Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription',
                'Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerInterface' => 'Elcodi\\Component\\Banner\\Entity\\Banner',
                'Elcodi\\Component\\Banner\\Entity\\Interfaces\\BannerZoneInterface' => 'Elcodi\\Component\\Banner\\Entity\\BannerZone',
                'Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\CartCouponInterface' => 'Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon',
                'Elcodi\\Component\\CartCoupon\\Entity\\Interfaces\\OrderCouponInterface' => 'Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon',
                'Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\NodeInterface' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Node',
                'Elcodi\\Component\\Menu\\Entity\\Menu\\Interfaces\\MenuInterface' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Menu',
                'Elcodi\\Component\\EntityTranslator\\Entity\\Interfaces\\EntityTranslationInterface' => 'Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation',
                'Elcodi\\Component\\Tax\\Entity\\Interfaces\\TaxInterface' => 'Elcodi\\Component\\Tax\\Entity\\Tax',
                'Elcodi\\Component\\Zone\\Entity\\Interfaces\\ZoneInterface' => 'Elcodi\\Component\\Zone\\Entity\\Zone',
                'Elcodi\\Component\\StateTransitionMachine\\Entity\\Interfaces\\StateLineInterface' => 'Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface' => 'Elcodi\\Component\\Product\\Entity\\Purchasable',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\ProductInterface' => 'Elcodi\\Component\\Product\\Entity\\Product',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\VariantInterface' => 'Elcodi\\Component\\Product\\Entity\\Variant',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\PackInterface' => 'Elcodi\\Component\\Product\\Entity\\Pack',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface' => 'Elcodi\\Component\\Product\\Entity\\Manufacturer',
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface' => 'Elcodi\\Component\\Product\\Entity\\Category',
                'Elcodi\\Component\\User\\Entity\\Interfaces\\CustomerInterface' => 'Elcodi\\Component\\User\\Entity\\Customer',
                'Elcodi\\Component\\User\\Entity\\Interfaces\\AdminUserInterface' => 'Elcodi\\Component\\User\\Entity\\AdminUser',
                'Elcodi\\Component\\Store\\Entity\\Interfaces\\StoreInterface' => 'Elcodi\\Component\\Store\\Entity\\Store',
                'Elcodi\\Component\\Attribute\\Entity\\Interfaces\\AttributeInterface' => 'Elcodi\\Component\\Attribute\\Entity\\Attribute',
                'Elcodi\\Component\\Attribute\\Entity\\Interfaces\\ValueInterface' => 'Elcodi\\Component\\Attribute\\Entity\\Value',
                'Elcodi\\Component\\Geo\\Entity\\Interfaces\\AddressInterface' => 'Elcodi\\Component\\Geo\\Entity\\Address',
                'Elcodi\\Component\\Geo\\Entity\\Interfaces\\LocationInterface' => 'Elcodi\\Component\\Geo\\Entity\\Location',
                'Elcodi\\Component\\Media\\Entity\\Interfaces\\ImageInterface' => 'Elcodi\\Component\\Media\\Entity\\Image',
                'Elcodi\\Component\\Language\\Entity\\Interfaces\\LanguageInterface' => 'Elcodi\\Component\\Language\\Entity\\Language',
                'Elcodi\\Component\\Currency\\Entity\\Interfaces\\CurrencyInterface' => 'Elcodi\\Component\\Currency\\Entity\\Currency',
                'Elcodi\\Component\\Rule\\Entity\\Interfaces\\RuleInterface' => 'Elcodi\\Component\\Rule\\Entity\\Rule',
                'Elcodi\\Component\\Coupon\\Entity\\Interfaces\\CouponInterface' => 'Elcodi\\Component\\Coupon\\Entity\\Coupon',
                'Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartInterface' => 'Elcodi\\Component\\Cart\\Entity\\Cart',
                'Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderInterface' => 'Elcodi\\Component\\Cart\\Entity\\Order',
                'Elcodi\\Component\\Cart\\Entity\\Interfaces\\CartLineInterface' => 'Elcodi\\Component\\Cart\\Entity\\CartLine',
                'Elcodi\\Component\\Cart\\Entity\\Interfaces\\OrderLineInterface' => 'Elcodi\\Component\\Cart\\Entity\\OrderLine',
            ),
            'elcodi.entity.currency.class' => 'Elcodi\\Component\\Currency\\Entity\\Currency',
            'elcodi.entity.currency.mapping_file' => '@ElcodiCurrencyBundle/Resources/config/doctrine/Currency.orm.yml',
            'elcodi.entity.currency.manager' => 'default',
            'elcodi.entity.currency.enabled' => true,
            'elcodi.entity.currency_exchange_rate.class' => 'Elcodi\\Component\\Currency\\Entity\\CurrencyExchangeRate',
            'elcodi.entity.currency_exchange_rate.mapping_file' => '@ElcodiCurrencyBundle/Resources/config/doctrine/CurrencyExchangeRate.orm.yml',
            'elcodi.entity.currency_exchange_rate.manager' => 'default',
            'elcodi.entity.currency_exchange_rate.enabled' => true,
            'elcodi.default_currency' => 'USD',
            'elcodi.currency_session_field_name' => 'currency_id',
            'elcodi.entity.language.class' => 'Elcodi\\Component\\Language\\Entity\\Language',
            'elcodi.entity.language.mapping_file' => '@ElcodiLanguageBundle/Resources/config/doctrine/Language.orm.yml',
            'elcodi.entity.language.manager' => 'default',
            'elcodi.entity.language.enabled' => true,
            'elcodi.entity.image.class' => 'Elcodi\\Component\\Media\\Entity\\Image',
            'elcodi.entity.image.mapping_file' => '@ElcodiMediaBundle/Resources/config/doctrine/Image.orm.yml',
            'elcodi.entity.image.manager' => 'default',
            'elcodi.entity.image.enabled' => true,
            'elcodi.media_filesystem_service' => 'gaufrette.local_filesystem',
            'elcodi.image_generated_route_host' => '',
            'elcodi.image_view_max_age' => 7884000,
            'elcodi.image_view_shared_max_age' => 7884000,
            'elcodi.image_upload_field_name' => 'file',
            'elcodi.image_resize_converter_bin_path' => '/usr/bin/convert',
            'elcodi.image_resize_converter_default_profile' => '/usr/share/color/icc/colord/sRGB.icc',
            'elcodi.entity.address.class' => 'Elcodi\\Component\\Geo\\Entity\\Address',
            'elcodi.entity.address.mapping_file' => '@ElcodiGeoBundle/Resources/config/doctrine/Address.orm.yml',
            'elcodi.entity.address.manager' => 'default',
            'elcodi.entity.address.enabled' => true,
            'elcodi.entity.location.class' => 'Elcodi\\Component\\Geo\\Entity\\Location',
            'elcodi.entity.location.mapping_file' => '@ElcodiGeoBundle/Resources/config/doctrine/Location.orm.yml',
            'elcodi.entity.location.manager' => 'default',
            'elcodi.entity.location.enabled' => true,
            'elcodi.location_api_host' => NULL,
            'elcodi.entity.attribute.class' => 'Elcodi\\Component\\Attribute\\Entity\\Attribute',
            'elcodi.entity.attribute.mapping_file' => '@ElcodiAttributeBundle/Resources/config/doctrine/Attribute.orm.yml',
            'elcodi.entity.attribute.manager' => 'default',
            'elcodi.entity.attribute.enabled' => true,
            'elcodi.entity.attribute_value.class' => 'Elcodi\\Component\\Attribute\\Entity\\Value',
            'elcodi.entity.attribute_value.mapping_file' => '@ElcodiAttributeBundle/Resources/config/doctrine/Value.orm.yml',
            'elcodi.entity.attribute_value.manager' => 'default',
            'elcodi.entity.attribute_value.enabled' => true,
            'elcodi.entity.store.class' => 'Elcodi\\Component\\Store\\Entity\\Store',
            'elcodi.entity.store.mapping_file' => '@ElcodiStoreBundle/Resources/config/doctrine/Store.orm.yml',
            'elcodi.entity.store.manager' => 'default',
            'elcodi.entity.store.enabled' => true,
            'elcodi.entity.abstract_user.class' => 'Elcodi\\Component\\User\\Entity\\Abstracts\\AbstractUser',
            'elcodi.entity.abstract_user.mapping_file' => '@ElcodiUserBundle/Resources/config/doctrine/AbstractUser.orm.yml',
            'elcodi.entity.abstract_user.manager' => 'default',
            'elcodi.entity.abstract_user.enabled' => true,
            'elcodi.entity.admin_user.class' => 'Elcodi\\Component\\User\\Entity\\AdminUser',
            'elcodi.entity.admin_user.mapping_file' => '@ElcodiUserBundle/Resources/config/doctrine/AdminUser.orm.yml',
            'elcodi.entity.admin_user.manager' => 'default',
            'elcodi.entity.admin_user.enabled' => true,
            'elcodi.entity.customer.class' => 'Elcodi\\Component\\User\\Entity\\Customer',
            'elcodi.entity.customer.mapping_file' => '@ElcodiUserBundle/Resources/config/doctrine/Customer.orm.yml',
            'elcodi.entity.customer.manager' => 'default',
            'elcodi.entity.customer.enabled' => true,
            'elcodi.entity.purchasable.class' => 'Elcodi\\Component\\Product\\Entity\\Purchasable',
            'elcodi.entity.purchasable.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Purchasable.orm.yml',
            'elcodi.entity.purchasable.manager' => 'default',
            'elcodi.entity.purchasable.enabled' => true,
            'elcodi.entity.product.class' => 'Elcodi\\Component\\Product\\Entity\\Product',
            'elcodi.entity.product.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Product.orm.yml',
            'elcodi.entity.product.manager' => 'default',
            'elcodi.entity.product.enabled' => true,
            'elcodi.entity.product_variant.class' => 'Elcodi\\Component\\Product\\Entity\\Variant',
            'elcodi.entity.product_variant.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Variant.orm.yml',
            'elcodi.entity.product_variant.manager' => 'default',
            'elcodi.entity.product_variant.enabled' => true,
            'elcodi.entity.purchasable_pack.class' => 'Elcodi\\Component\\Product\\Entity\\Pack',
            'elcodi.entity.purchasable_pack.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Pack.orm.yml',
            'elcodi.entity.purchasable_pack.manager' => 'default',
            'elcodi.entity.purchasable_pack.enabled' => true,
            'elcodi.entity.category.class' => 'Elcodi\\Component\\Product\\Entity\\Category',
            'elcodi.entity.category.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Category.orm.yml',
            'elcodi.entity.category.manager' => 'default',
            'elcodi.entity.category.enabled' => true,
            'elcodi.entity.manufacturer.class' => 'Elcodi\\Component\\Product\\Entity\\Manufacturer',
            'elcodi.entity.manufacturer.mapping_file' => '@ElcodiProductBundle/Resources/config/doctrine/Manufacturer.orm.yml',
            'elcodi.entity.manufacturer.manager' => 'default',
            'elcodi.entity.manufacturer.enabled' => true,
            'elcodi.core.product.use_stock' => false,
            'elcodi.core.product.load_only_categories_with_products' => false,
            'elcodi.core.product.cache_key' => 'categories',
            'elcodi.entity.state_transition_machine.state_line.class' => 'Elcodi\\Component\\StateTransitionMachine\\Entity\\StateLine',
            'elcodi.entity.state_transition_machine.state_line.mapping_file' => '@ElcodiStateTransitionMachineBundle/Resources/config/doctrine/StateLine.orm.yml',
            'elcodi.entity.state_transition_machine.state_line.manager' => 'default',
            'elcodi.entity.state_transition_machine.state_line.enabled' => true,
            'elcodi.entity.zone.class' => 'Elcodi\\Component\\Zone\\Entity\\Zone',
            'elcodi.entity.zone.mapping_file' => '@ElcodiZoneBundle/Resources/config/doctrine/Zone.orm.yml',
            'elcodi.entity.zone.manager' => 'default',
            'elcodi.entity.zone.enabled' => true,
            'elcodi.entity.tax.class' => 'Elcodi\\Component\\Tax\\Entity\\Tax',
            'elcodi.entity.tax.mapping_file' => '@ElcodiTaxBundle/Resources/config/doctrine/Tax.orm.yml',
            'elcodi.entity.tax.manager' => 'default',
            'elcodi.entity.tax.enabled' => true,
            'elcodi.entity.entity_translation.class' => 'Elcodi\\Component\\EntityTranslator\\Entity\\EntityTranslation',
            'elcodi.entity.entity_translation.mapping_file' => '@ElcodiEntityTranslatorBundle/Resources/config/doctrine/EntityTranslation.orm.yml',
            'elcodi.entity.entity_translation.manager' => 'default',
            'elcodi.entity.entity_translation.enabled' => true,
            'elcodi.entity_translator_configuration' => array(
                'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Interfaces\\CarrierInterface' => array(
                    'alias' => 'carrier',
                    'fields' => array(
                        'name' => array(
                            'getter' => 'getName',
                            'setter' => 'setName',
                        ),
                        'description' => array(
                            'getter' => 'getDescription',
                            'setter' => 'setDescription',
                        ),
                    ),
                    'idGetter' => 'getId',
                ),
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\PurchasableInterface' => array(
                    'alias' => 'purchasable',
                    'fields' => array(
                        'name' => array(
                            'getter' => 'getName',
                            'setter' => 'setName',
                        ),
                        'slug' => array(
                            'getter' => 'getSlug',
                            'setter' => 'setSlug',
                        ),
                        'description' => array(
                            'getter' => 'getDescription',
                            'setter' => 'setDescription',
                        ),
                        'shortDescription' => array(
                            'getter' => 'getShortDescription',
                            'setter' => 'setShortDescription',
                        ),
                        'metaTitle' => array(
                            'getter' => 'getMetaTitle',
                            'setter' => 'setMetaTitle',
                        ),
                        'metaDescription' => array(
                            'getter' => 'getMetaDescription',
                            'setter' => 'setMetaDescription',
                        ),
                        'metaKeywords' => array(
                            'getter' => 'getMetaKeywords',
                            'setter' => 'setMetaKeywords',
                        ),
                    ),
                    'idGetter' => 'getId',
                ),
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\CategoryInterface' => array(
                    'alias' => 'category',
                    'fields' => array(
                        'name' => array(
                            'getter' => 'getName',
                            'setter' => 'setName',
                        ),
                        'slug' => array(
                            'getter' => 'getSlug',
                            'setter' => 'setSlug',
                        ),
                        'metaTitle' => array(
                            'getter' => 'getMetaTitle',
                            'setter' => 'setMetaTitle',
                        ),
                        'metaDescription' => array(
                            'getter' => 'getMetaDescription',
                            'setter' => 'setMetaDescription',
                        ),
                        'metaKeywords' => array(
                            'getter' => 'getMetaKeywords',
                            'setter' => 'setMetaKeywords',
                        ),
                    ),
                    'idGetter' => 'getId',
                ),
                'Elcodi\\Component\\Product\\Entity\\Interfaces\\ManufacturerInterface' => array(
                    'alias' => 'manufacturer',
                    'fields' => array(
                        'name' => array(
                            'getter' => 'getName',
                            'setter' => 'setName',
                        ),
                        'slug' => array(
                            'getter' => 'getSlug',
                            'setter' => 'setSlug',
                        ),
                        'description' => array(
                            'getter' => 'getDescription',
                            'setter' => 'setDescription',
                        ),
                        'metaTitle' => array(
                            'getter' => 'getMetaTitle',
                            'setter' => 'setMetaTitle',
                        ),
                        'metaDescription' => array(
                            'getter' => 'getMetaDescription',
                            'setter' => 'setMetaDescription',
                        ),
                        'metaKeywords' => array(
                            'getter' => 'getMetaKeywords',
                            'setter' => 'setMetaKeywords',
                        ),
                    ),
                    'idGetter' => 'getId',
                ),
                'Elcodi\\Component\\Page\\Entity\\Interfaces\\PageInterface' => array(
                    'alias' => 'page',
                    'fields' => array(
                        'title' => array(
                            'getter' => 'getTitle',
                            'setter' => 'setTitle',
                        ),
                        'content' => array(
                            'getter' => 'getContent',
                            'setter' => 'setContent',
                        ),
                        'path' => array(
                            'getter' => 'getPath',
                            'setter' => 'setPath',
                        ),
                        'metaTitle' => array(
                            'getter' => 'getMetaTitle',
                            'setter' => 'setMetaTitle',
                        ),
                        'metaDescription' => array(
                            'getter' => 'getMetaDescription',
                            'setter' => 'setMetaDescription',
                        ),
                        'metaKeywords' => array(
                            'getter' => 'getMetaKeywords',
                            'setter' => 'setMetaKeywords',
                        ),
                    ),
                    'idGetter' => 'getId',
                ),
            ),
            'elcodi.entity_translator_cache_prefix' => 'translation',
            'elcodi.entity_translator_auto_translate' => true,
            'elcodi.entity_translator_language_master_locale' => 'en',
            'elcodi.entity_translator_language_fallback' => true,
            'elcodi.entity.menu.class' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Menu',
            'elcodi.entity.menu.mapping_file' => '@ElcodiMenuBundle/Resources/config/doctrine/Menu.orm.yml',
            'elcodi.entity.menu.manager' => 'default',
            'elcodi.entity.menu.enabled' => true,
            'elcodi.entity.menu_node.class' => 'Elcodi\\Component\\Menu\\Entity\\Menu\\Node',
            'elcodi.entity.menu_node.mapping_file' => '@ElcodiMenuBundle/Resources/config/doctrine/MenuNode.orm.yml',
            'elcodi.entity.menu_node.manager' => 'default',
            'elcodi.entity.menu_node.enabled' => true,
            'elcodi.menu_cache_key' => 'menus',
            'elcodi.entity.plugin.class' => 'Elcodi\\Component\\Plugin\\Entity\\Plugin',
            'elcodi.entity.plugin.mapping_file' => '@ElcodiPluginBundle/Resources/config/doctrine/Plugin.orm.yml',
            'elcodi.entity.plugin.manager' => 'default',
            'elcodi.entity.plugin.enabled' => true,
            'elcodi.entity.plugin_configuration.class' => 'Elcodi\\Component\\Plugin\\Entity\\PluginConfiguration',
            'elcodi.entity.plugin_configuration.mapping_file' => '@ElcodiPluginBundle/Resources/config/doctrine/PluginConfiguration.orm.yml',
            'elcodi.entity.plugin_configuration.manager' => 'default',
            'elcodi.entity.plugin_configuration.enabled' => true,
            'elcodi.entity.cart_coupon.class' => 'Elcodi\\Component\\CartCoupon\\Entity\\CartCoupon',
            'elcodi.entity.cart_coupon.mapping_file' => '@ElcodiCartCouponBundle/Resources/config/doctrine/CartCoupon.orm.yml',
            'elcodi.entity.cart_coupon.manager' => 'default',
            'elcodi.entity.cart_coupon.enabled' => true,
            'elcodi.entity.order_coupon.class' => 'Elcodi\\Component\\CartCoupon\\Entity\\OrderCoupon',
            'elcodi.entity.order_coupon.mapping_file' => '@ElcodiCartCouponBundle/Resources/config/doctrine/OrderCoupon.orm.yml',
            'elcodi.entity.order_coupon.manager' => 'default',
            'elcodi.entity.order_coupon.enabled' => true,
            'elcodi.entity.banner.class' => 'Elcodi\\Component\\Banner\\Entity\\Banner',
            'elcodi.entity.banner.mapping_file' => '@ElcodiBannerBundle/Resources/config/doctrine/Banner.orm.yml',
            'elcodi.entity.banner.manager' => 'default',
            'elcodi.entity.banner.enabled' => true,
            'elcodi.entity.banner_zone.class' => 'Elcodi\\Component\\Banner\\Entity\\BannerZone',
            'elcodi.entity.banner_zone.mapping_file' => '@ElcodiBannerBundle/Resources/config/doctrine/BannerZone.orm.yml',
            'elcodi.entity.banner_zone.manager' => 'default',
            'elcodi.entity.banner_zone.enabled' => true,
            'elcodi.entity.newsletter_subscription.class' => 'Elcodi\\Component\\Newsletter\\Entity\\NewsletterSubscription',
            'elcodi.entity.newsletter_subscription.mapping_file' => '@ElcodiNewsletterBundle/Resources/config/doctrine/NewsletterSubscription.orm.yml',
            'elcodi.entity.newsletter_subscription.manager' => 'default',
            'elcodi.entity.newsletter_subscription.enabled' => true,
            'elcodi.entity.page.class' => 'Elcodi\\Component\\Page\\Entity\\Page',
            'elcodi.entity.page.mapping_file' => '@ElcodiPageBundle/Resources/config/doctrine/Page.orm.yml',
            'elcodi.entity.page.manager' => 'default',
            'elcodi.entity.page.enabled' => true,
            'elcodi.entity.metric_entry.class' => 'Elcodi\\Component\\Metric\\Core\\Entity\\Entry',
            'elcodi.entity.metric_entry.mapping_file' => '@ElcodiMetricBundle/Resources/config/doctrine/Entry.orm.yml',
            'elcodi.entity.metric_entry.manager' => 'default',
            'elcodi.entity.metric_entry.enabled' => true,
            'elcodi.core.metric.bucket_client' => 'elcodi.redis_metrics_bucket',
            'elcodi.entity.comment.class' => 'Elcodi\\Component\\Comment\\Entity\\Comment',
            'elcodi.entity.comment.mapping_file' => '@ElcodiCommentBundle/Resources/config/doctrine/Comment.orm.yml',
            'elcodi.entity.comment.manager' => 'default',
            'elcodi.entity.comment.enabled' => true,
            'elcodi.entity.comment_vote.class' => 'Elcodi\\Component\\Comment\\Entity\\Vote',
            'elcodi.entity.comment_vote.mapping_file' => '@ElcodiCommentBundle/Resources/config/doctrine/Vote.orm.yml',
            'elcodi.entity.comment_vote.manager' => 'default',
            'elcodi.entity.comment_vote.enabled' => true,
            'elcodi.comment.cache_key' => 'comments',
            'store.product.menu_cache_key' => 'tree',
            'store.connect.entity.authorization.class' => 'Elcodi\\Store\\ConnectBundle\\Entity\\Authorization',
            'store.connect.entity.authorization.mapping_file' => '@StoreConnectBundle/Resources/config/doctrine/Authorization.orm.yml',
            'store.connect.entity.authorization.manager' => 'default',
            'store.connect.entity.authorization.enabled' => true,
            'store.page.blog_posts_per_page' => 5,
            'elcodi.core.bamboo.cache_prefix' => '',
            'elcodi.entity.carrier.class' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\Carrier',
            'elcodi.entity.carrier.mapping_file' => '@ElcodiCustomShippingBundle/Resources/config/doctrine/Carrier.orm.yml',
            'elcodi.entity.carrier.manager' => 'default',
            'elcodi.entity.carrier.enabled' => true,
            'elcodi.entity.shipping_range.class' => 'Elcodi\\Plugin\\CustomShippingBundle\\Entity\\ShippingRange',
            'elcodi.entity.shipping_range.mapping_file' => '@ElcodiCustomShippingBundle/Resources/config/doctrine/ShippingRange.orm.yml',
            'elcodi.entity.shipping_range.manager' => 'default',
            'elcodi.entity.shipping_range.enabled' => true,
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'knp_gaufrette.filesystem_map.class' => 'Knp\\Bundle\\GaufretteBundle\\FilesystemMap',
            'paymentsuite.logger' => true,
            'paymentsuite.paypal_web_checkout.business' => 'default',
            'paymentsuite.paypal_web_checkout.debug' => true,
            'paymentsuite.paypal_web_checkout.api_endpoint' => 'https://www.sandbox.paypal.com/cgi-bin/webscr',
            'paymentsuite.stripe.private_key' => '@elcodi_plugin.stripe.private_key',
            'paymentsuite.stripe.public_key' => '@elcodi_plugin.stripe.public_key',
            'paymentsuite.stripe.api_endpoint' => 'https://api.stripe.com/',
            'paymentsuite.stripe.view_template' => 'StripeBundle:Stripe:view.html.twig',
            'paymentsuite.stripe.scripts_template' => 'StripeBundle:Stripe:scripts.html.twig',
            'controller_resolver.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerResolver',
            'controller_name_converter.class' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser',
            'response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener',
            'streamed_response_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\StreamedResponseListener',
            'locale_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener',
            'event_dispatcher.class' => 'Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher',
            'http_kernel.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel',
            'filesystem.class' => 'Symfony\\Component\\Filesystem\\Filesystem',
            'cache_warmer.class' => 'Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerAggregate',
            'cache_clearer.class' => 'Symfony\\Component\\HttpKernel\\CacheClearer\\ChainCacheClearer',
            'file_locator.class' => 'Symfony\\Component\\HttpKernel\\Config\\FileLocator',
            'uri_signer.class' => 'Symfony\\Component\\HttpKernel\\UriSigner',
            'request_stack.class' => 'Symfony\\Component\\HttpFoundation\\RequestStack',
            'fragment.handler.class' => 'Symfony\\Component\\HttpKernel\\DependencyInjection\\LazyLoadingFragmentHandler',
            'fragment.renderer.inline.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\InlineFragmentRenderer',
            'fragment.renderer.hinclude.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\HIncludeFragmentRenderer',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.renderer.esi.class' => 'Symfony\\Component\\HttpKernel\\Fragment\\EsiFragmentRenderer',
            'fragment.path' => '/_fragment',
            'translator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\Translator',
            'translator.identity.class' => 'Symfony\\Component\\Translation\\IdentityTranslator',
            'translator.selector.class' => 'Symfony\\Component\\Translation\\MessageSelector',
            'translation.loader.php.class' => 'Symfony\\Component\\Translation\\Loader\\PhpFileLoader',
            'translation.loader.yml.class' => 'Symfony\\Component\\Translation\\Loader\\YamlFileLoader',
            'translation.loader.xliff.class' => 'Symfony\\Component\\Translation\\Loader\\XliffFileLoader',
            'translation.loader.po.class' => 'Symfony\\Component\\Translation\\Loader\\PoFileLoader',
            'translation.loader.mo.class' => 'Symfony\\Component\\Translation\\Loader\\MoFileLoader',
            'translation.loader.qt.class' => 'Symfony\\Component\\Translation\\Loader\\QtFileLoader',
            'translation.loader.csv.class' => 'Symfony\\Component\\Translation\\Loader\\CsvFileLoader',
            'translation.loader.res.class' => 'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader',
            'translation.loader.dat.class' => 'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader',
            'translation.loader.ini.class' => 'Symfony\\Component\\Translation\\Loader\\IniFileLoader',
            'translation.loader.json.class' => 'Symfony\\Component\\Translation\\Loader\\JsonFileLoader',
            'translation.dumper.php.class' => 'Symfony\\Component\\Translation\\Dumper\\PhpFileDumper',
            'translation.dumper.xliff.class' => 'Symfony\\Component\\Translation\\Dumper\\XliffFileDumper',
            'translation.dumper.po.class' => 'Symfony\\Component\\Translation\\Dumper\\PoFileDumper',
            'translation.dumper.mo.class' => 'Symfony\\Component\\Translation\\Dumper\\MoFileDumper',
            'translation.dumper.yml.class' => 'Symfony\\Component\\Translation\\Dumper\\YamlFileDumper',
            'translation.dumper.qt.class' => 'Symfony\\Component\\Translation\\Dumper\\QtFileDumper',
            'translation.dumper.csv.class' => 'Symfony\\Component\\Translation\\Dumper\\CsvFileDumper',
            'translation.dumper.ini.class' => 'Symfony\\Component\\Translation\\Dumper\\IniFileDumper',
            'translation.dumper.json.class' => 'Symfony\\Component\\Translation\\Dumper\\JsonFileDumper',
            'translation.dumper.res.class' => 'Symfony\\Component\\Translation\\Dumper\\IcuResFileDumper',
            'translation.extractor.php.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\PhpExtractor',
            'translation.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader',
            'translation.extractor.class' => 'Symfony\\Component\\Translation\\Extractor\\ChainExtractor',
            'translation.writer.class' => 'Symfony\\Component\\Translation\\Writer\\TranslationWriter',
            'property_accessor.class' => 'Symfony\\Component\\PropertyAccess\\PropertyAccessor',
            'kernel.secret' => '4acbc300e57d46cb58ac0c629945c17b727f99c8',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.trusted_proxies' => array(

            ),
            'kernel.default_locale' => 'en',
            'session.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Session',
            'session.flashbag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag',
            'session.attribute_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag',
            'session.storage.metadata_bag.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag',
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.native.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage',
            'session.storage.php_bridge.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\PhpBridgeSessionStorage',
            'session.storage.mock_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockFileSessionStorage',
            'session.handler.native_file.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\NativeFileSessionHandler',
            'session.handler.write_check.class' => 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\WriteCheckSessionHandler',
            'session_listener.class' => 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SessionListener',
            'session.storage.options' => array(
                'gc_probability' => 1,
            ),
            'session.save_path' => (__DIR__.'/sessions'),
            'session.metadata.update_threshold' => '0',
            'security.secure_random.class' => 'Symfony\\Component\\Security\\Core\\Util\\SecureRandom',
            'form.resolved_type_factory.class' => 'Symfony\\Component\\Form\\ResolvedFormTypeFactory',
            'form.registry.class' => 'Symfony\\Component\\Form\\FormRegistry',
            'form.factory.class' => 'Symfony\\Component\\Form\\FormFactory',
            'form.extension.class' => 'Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension',
            'form.type_guesser.validator.class' => 'Symfony\\Component\\Form\\Extension\\Validator\\ValidatorTypeGuesser',
            'form.type_extension.form.request_handler.class' => 'Symfony\\Component\\Form\\Extension\\HttpFoundation\\HttpFoundationRequestHandler',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'security.csrf.token_generator.class' => 'Symfony\\Component\\Security\\Csrf\\TokenGenerator\\UriSafeTokenGenerator',
            'security.csrf.token_storage.class' => 'Symfony\\Component\\Security\\Csrf\\TokenStorage\\SessionTokenStorage',
            'security.csrf.token_manager.class' => 'Symfony\\Component\\Security\\Csrf\\CsrfTokenManager',
            'templating.engine.delegating.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\DelegatingEngine',
            'templating.name_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateNameParser',
            'templating.filename_parser.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\TemplateFilenameParser',
            'templating.cache_warmer.template_paths.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplatePathsCacheWarmer',
            'templating.locator.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\TemplateLocator',
            'templating.loader.filesystem.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Loader\\FilesystemLoader',
            'templating.loader.cache.class' => 'Symfony\\Component\\Templating\\Loader\\CacheLoader',
            'templating.loader.chain.class' => 'Symfony\\Component\\Templating\\Loader\\ChainLoader',
            'templating.finder.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\TemplateFinder',
            'templating.helper.assets.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\AssetsHelper',
            'templating.helper.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Templating\\Helper\\RouterHelper',
            'templating.helper.code.file_link_format' => NULL,
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.class' => 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface',
            'validator.builder.class' => 'Symfony\\Component\\Validator\\ValidatorBuilderInterface',
            'validator.builder.factory.class' => 'Symfony\\Component\\Validator\\Validation',
            'validator.mapping.cache.apc.class' => 'Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache',
            'validator.mapping.cache.prefix' => '',
            'validator.validator_factory.class' => 'Symfony\\Bundle\\FrameworkBundle\\Validator\\ConstraintValidatorFactory',
            'validator.expression.class' => 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator',
            'validator.email.class' => 'Symfony\\Component\\Validator\\Constraints\\EmailValidator',
            'validator.translation_domain' => 'validators',
            'validator.api' => '2.5-bc',
            'fragment.listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener',
            'translator.logging' => true,
            'profiler.class' => 'Symfony\\Component\\HttpKernel\\Profiler\\Profiler',
            'profiler_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ProfilerListener',
            'data_collector.config.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ConfigDataCollector',
            'data_collector.request.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector',
            'data_collector.exception.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\ExceptionDataCollector',
            'data_collector.events.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\EventDataCollector',
            'data_collector.logger.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\LoggerDataCollector',
            'data_collector.time.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\TimeDataCollector',
            'data_collector.memory.class' => 'Symfony\\Component\\HttpKernel\\DataCollector\\MemoryDataCollector',
            'data_collector.router.class' => 'Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RouterDataCollector',
            'form.resolved_type_factory.data_collector_proxy.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\Proxy\\ResolvedTypeFactoryDataCollectorProxy',
            'form.type_extension.form.data_collector.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\Type\\DataCollectorTypeExtension',
            'data_collector.form.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataCollector',
            'data_collector.form.extractor.class' => 'Symfony\\Component\\Form\\Extension\\DataCollector\\FormDataExtractor',
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'profiler.storage.username' => '',
            'profiler.storage.password' => '',
            'profiler.storage.lifetime' => 86400,
            'router.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\Router',
            'router.request_context.class' => 'Symfony\\Component\\Routing\\RequestContext',
            'routing.loader.class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\DelegatingLoader',
            'routing.resolver.class' => 'Symfony\\Component\\Config\\Loader\\LoaderResolver',
            'routing.loader.xml.class' => 'Symfony\\Component\\Routing\\Loader\\XmlFileLoader',
            'routing.loader.yml.class' => 'Symfony\\Component\\Routing\\Loader\\YamlFileLoader',
            'routing.loader.php.class' => 'Symfony\\Component\\Routing\\Loader\\PhpFileLoader',
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.cache_warmer.class' => 'Symfony\\Bundle\\FrameworkBundle\\CacheWarmer\\RouterCacheWarmer',
            'router.options.matcher.cache_class' => 'appDevUrlMatcher',
            'router.options.generator.cache_class' => 'appDevUrlGenerator',
            'router_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => ($this->targetDirs[2].'/config/routing/routing_dev.yml'),
            'router.cache_class_prefix' => 'appDev',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'annotations.reader.class' => 'Doctrine\\Common\\Annotations\\AnnotationReader',
            'annotations.cached_reader.class' => 'Doctrine\\Common\\Annotations\\CachedReader',
            'annotations.file_cache_reader.class' => 'Doctrine\\Common\\Annotations\\FileCacheReader',
            'debug.debug_handlers_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener',
            'debug.stopwatch.class' => 'Symfony\\Component\\Stopwatch\\Stopwatch',
            'debug.error_handler.throw_at' => -1,
            'debug.event_dispatcher.class' => 'Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher',
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'debug.controller_resolver.class' => 'Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver',
            'security.context.class' => 'Symfony\\Component\\Security\\Core\\SecurityContext',
            'security.user_checker.class' => 'Symfony\\Component\\Security\\Core\\User\\UserChecker',
            'security.encoder_factory.generic.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory',
            'security.encoder.digest.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\MessageDigestPasswordEncoder',
            'security.encoder.plain.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\PlaintextPasswordEncoder',
            'security.encoder.pbkdf2.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\Pbkdf2PasswordEncoder',
            'security.encoder.bcrypt.class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder',
            'security.user.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider',
            'security.user.provider.in_memory.user.class' => 'Symfony\\Component\\Security\\Core\\User\\User',
            'security.user.provider.chain.class' => 'Symfony\\Component\\Security\\Core\\User\\ChainUserProvider',
            'security.authentication.trust_resolver.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver',
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.authentication.manager.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager',
            'security.authentication.session_strategy.class' => 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy',
            'security.access.decision_manager.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager',
            'security.access.simple_role_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter',
            'security.access.authenticated_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter',
            'security.access.role_hierarchy_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter',
            'security.access.expression_voter.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter',
            'security.firewall.class' => 'Symfony\\Component\\Security\\Http\\Firewall',
            'security.firewall.map.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap',
            'security.firewall.context.class' => 'Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext',
            'security.matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'security.expression_matcher.class' => 'Symfony\\Component\\HttpFoundation\\ExpressionRequestMatcher',
            'security.role_hierarchy.class' => 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy',
            'security.http_utils.class' => 'Symfony\\Component\\Security\\Http\\HttpUtils',
            'security.validator.user_password.class' => 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator',
            'security.expression_language.class' => 'Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage',
            'security.authentication.retry_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\RetryAuthenticationEntryPoint',
            'security.channel_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ChannelListener',
            'security.authentication.form_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\FormAuthenticationEntryPoint',
            'security.authentication.listener.form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\UsernamePasswordFormAuthenticationListener',
            'security.authentication.listener.simple_form.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimpleFormAuthenticationListener',
            'security.authentication.listener.simple_preauth.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SimplePreAuthenticationListener',
            'security.authentication.listener.basic.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\BasicAuthenticationListener',
            'security.authentication.basic_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\BasicAuthenticationEntryPoint',
            'security.authentication.listener.digest.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\DigestAuthenticationListener',
            'security.authentication.digest_entry_point.class' => 'Symfony\\Component\\Security\\Http\\EntryPoint\\DigestAuthenticationEntryPoint',
            'security.authentication.listener.x509.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\X509AuthenticationListener',
            'security.authentication.listener.anonymous.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AnonymousAuthenticationListener',
            'security.authentication.switchuser_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\SwitchUserListener',
            'security.logout_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\LogoutListener',
            'security.logout.handler.session.class' => 'Symfony\\Component\\Security\\Http\\Logout\\SessionLogoutHandler',
            'security.logout.handler.cookie_clearing.class' => 'Symfony\\Component\\Security\\Http\\Logout\\CookieClearingLogoutHandler',
            'security.logout.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Logout\\DefaultLogoutSuccessHandler',
            'security.access_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\AccessListener',
            'security.access_map.class' => 'Symfony\\Component\\Security\\Http\\AccessMap',
            'security.exception_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ExceptionListener',
            'security.context_listener.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\ContextListener',
            'security.authentication.provider.dao.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\DaoAuthenticationProvider',
            'security.authentication.provider.simple.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\SimpleAuthenticationProvider',
            'security.authentication.provider.pre_authenticated.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\PreAuthenticatedAuthenticationProvider',
            'security.authentication.provider.anonymous.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\AnonymousAuthenticationProvider',
            'security.authentication.success_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationSuccessHandler',
            'security.authentication.failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\DefaultAuthenticationFailureHandler',
            'security.authentication.simple_success_failure_handler.class' => 'Symfony\\Component\\Security\\Http\\Authentication\\SimpleAuthenticationHandler',
            'security.authentication.provider.rememberme.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Provider\\RememberMeAuthenticationProvider',
            'security.authentication.listener.rememberme.class' => 'Symfony\\Component\\Security\\Http\\Firewall\\RememberMeListener',
            'security.rememberme.token.provider.in_memory.class' => 'Symfony\\Component\\Security\\Core\\Authentication\\RememberMe\\InMemoryTokenProvider',
            'security.authentication.rememberme.services.persistent.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices',
            'security.authentication.rememberme.services.simplehash.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\TokenBasedRememberMeServices',
            'security.rememberme.response_listener.class' => 'Symfony\\Component\\Security\\Http\\RememberMe\\ResponseListener',
            'templating.helper.logout_url.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\LogoutUrlHelper',
            'templating.helper.security.class' => 'Symfony\\Bundle\\SecurityBundle\\Templating\\Helper\\SecurityHelper',
            'twig.extension.logout_url.class' => 'Symfony\\Bridge\\Twig\\Extension\\LogoutUrlExtension',
            'twig.extension.security.class' => 'Symfony\\Bridge\\Twig\\Extension\\SecurityExtension',
            'data_collector.security.class' => 'Symfony\\Bundle\\SecurityBundle\\DataCollector\\SecurityDataCollector',
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'hwi_oauth.resource_ownermap.configured.store_area' => array(
                'github' => '/login/check-github',
                'paypal' => '/login/check-paypal',
            ),
            'security.role_hierarchy.roles' => array(
                'ROLE_CUSTOMER' => array(
                    0 => 'IS_AUTHENTICATED_ANONYMOUSLY',
                ),
                'ROLE_ADMIN' => array(
                    0 => 'IS_AUTHENTICATED_ANONYMOUSLY',
                ),
            ),
            'twig.class' => 'Twig_Environment',
            'twig.loader.filesystem.class' => 'Symfony\\Bundle\\TwigBundle\\Loader\\FilesystemLoader',
            'twig.loader.chain.class' => 'Twig_Loader_Chain',
            'templating.engine.twig.class' => 'Symfony\\Bundle\\TwigBundle\\TwigEngine',
            'twig.cache_warmer.class' => 'Symfony\\Bundle\\TwigBundle\\CacheWarmer\\TemplateCacheCacheWarmer',
            'twig.extension.trans.class' => 'Symfony\\Bridge\\Twig\\Extension\\TranslationExtension',
            'twig.extension.actions.class' => 'Symfony\\Bundle\\TwigBundle\\Extension\\ActionsExtension',
            'twig.extension.code.class' => 'Symfony\\Bridge\\Twig\\Extension\\CodeExtension',
            'twig.extension.routing.class' => 'Symfony\\Bridge\\Twig\\Extension\\RoutingExtension',
            'twig.extension.yaml.class' => 'Symfony\\Bridge\\Twig\\Extension\\YamlExtension',
            'twig.extension.form.class' => 'Symfony\\Bridge\\Twig\\Extension\\FormExtension',
            'twig.extension.httpkernel.class' => 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelExtension',
            'twig.extension.debug.stopwatch.class' => 'Symfony\\Bridge\\Twig\\Extension\\StopwatchExtension',
            'twig.extension.expression.class' => 'Symfony\\Bridge\\Twig\\Extension\\ExpressionExtension',
            'twig.form.engine.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRendererEngine',
            'twig.form.renderer.class' => 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer',
            'twig.translation.extractor.class' => 'Symfony\\Bridge\\Twig\\Translation\\TwigExtractor',
            'twig.exception_listener.class' => 'Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener',
            'twig.controller.exception.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\ExceptionController',
            'twig.controller.preview_error.class' => 'Symfony\\Bundle\\TwigBundle\\Controller\\PreviewErrorController',
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => 'form_div_layout.html.twig',
            ),
            'monolog.logger.class' => 'Symfony\\Bridge\\Monolog\\Logger',
            'monolog.gelf.publisher.class' => 'Gelf\\MessagePublisher',
            'monolog.gelfphp.publisher.class' => 'Gelf\\Publisher',
            'monolog.handler.stream.class' => 'Monolog\\Handler\\StreamHandler',
            'monolog.handler.console.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler',
            'monolog.handler.group.class' => 'Monolog\\Handler\\GroupHandler',
            'monolog.handler.buffer.class' => 'Monolog\\Handler\\BufferHandler',
            'monolog.handler.rotating_file.class' => 'Monolog\\Handler\\RotatingFileHandler',
            'monolog.handler.syslog.class' => 'Monolog\\Handler\\SyslogHandler',
            'monolog.handler.syslogudp.class' => 'Monolog\\Handler\\SyslogUdpHandler',
            'monolog.handler.null.class' => 'Monolog\\Handler\\NullHandler',
            'monolog.handler.test.class' => 'Monolog\\Handler\\TestHandler',
            'monolog.handler.gelf.class' => 'Monolog\\Handler\\GelfHandler',
            'monolog.handler.rollbar.class' => 'Monolog\\Handler\\RollbarHandler',
            'monolog.handler.flowdock.class' => 'Monolog\\Handler\\FlowdockHandler',
            'monolog.handler.browser_console.class' => 'Monolog\\Handler\\BrowserConsoleHandler',
            'monolog.handler.firephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\FirePHPHandler',
            'monolog.handler.chromephp.class' => 'Symfony\\Bridge\\Monolog\\Handler\\ChromePhpHandler',
            'monolog.handler.debug.class' => 'Symfony\\Bridge\\Monolog\\Handler\\DebugHandler',
            'monolog.handler.swift_mailer.class' => 'Symfony\\Bridge\\Monolog\\Handler\\SwiftMailerHandler',
            'monolog.handler.native_mailer.class' => 'Monolog\\Handler\\NativeMailerHandler',
            'monolog.handler.socket.class' => 'Monolog\\Handler\\SocketHandler',
            'monolog.handler.pushover.class' => 'Monolog\\Handler\\PushoverHandler',
            'monolog.handler.raven.class' => 'Monolog\\Handler\\RavenHandler',
            'monolog.handler.newrelic.class' => 'Monolog\\Handler\\NewRelicHandler',
            'monolog.handler.hipchat.class' => 'Monolog\\Handler\\HipChatHandler',
            'monolog.handler.slack.class' => 'Monolog\\Handler\\SlackHandler',
            'monolog.handler.cube.class' => 'Monolog\\Handler\\CubeHandler',
            'monolog.handler.amqp.class' => 'Monolog\\Handler\\AmqpHandler',
            'monolog.handler.error_log.class' => 'Monolog\\Handler\\ErrorLogHandler',
            'monolog.handler.loggly.class' => 'Monolog\\Handler\\LogglyHandler',
            'monolog.handler.logentries.class' => 'Monolog\\Handler\\LogEntriesHandler',
            'monolog.handler.whatfailuregroup.class' => 'Monolog\\Handler\\WhatFailureGroupHandler',
            'monolog.activation_strategy.not_found.class' => 'Symfony\\Bundle\\MonologBundle\\NotFoundActivationStrategy',
            'monolog.handler.fingers_crossed.class' => 'Monolog\\Handler\\FingersCrossedHandler',
            'monolog.handler.fingers_crossed.error_level_activation_strategy.class' => 'Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy',
            'monolog.handler.filter.class' => 'Monolog\\Handler\\FilterHandler',
            'monolog.handler.mongo.class' => 'Monolog\\Handler\\MongoDBHandler',
            'monolog.mongo.client.class' => 'MongoClient',
            'monolog.handler.elasticsearch.class' => 'Monolog\\Handler\\ElasticSearchHandler',
            'monolog.elastica.client.class' => 'Elastica\\Client',
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.console' => NULL,
                'monolog.handler.main' => NULL,
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.delivery.enabled' => false,
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => '127.0.0.1',
            'swiftmailer.mailer.default.transport.smtp.username' => NULL,
            'swiftmailer.mailer.default.transport.smtp.password' => NULL,
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => false,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' => 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'AdminCoreBundle',
                1 => 'StoreCoreBundle',
                2 => 'StoreTemplateBundle',
                3 => 'AdminGeoBundle',
                4 => 'AdminStoreBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => true,
            'assetic.use_controller' => false,
            'assetic.enable_profiler' => false,
            'assetic.read_from' => ($this->targetDirs[2].'/../web'),
            'assetic.write_to' => ($this->targetDirs[2].'/../web'),
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => '/usr/bin/java',
            'assetic.node.bin' => '/usr/bin/node',
            'assetic.ruby.bin' => '/usr/bin/ruby',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.reactjsx.bin' => '/usr/bin/jsx',
            'assetic.filter.cssrewrite.class' => 'Assetic\\Filter\\CssRewriteFilter',
            'assetic.twig_extension.functions' => array(

            ),
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(

            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Mmoreram\\SimpleDoctrineMapping\\Mapping\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\ORM\\Mapping\\DefaultEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine_migrations.dir_name' => ($this->targetDirs[2].'/DoctrineMigrations'),
            'doctrine_migrations.namespace' => 'Application\\Migrations',
            'doctrine_migrations.table_name' => 'migration_versions',
            'doctrine_migrations.name' => 'Application Migrations',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'templating.helper.gravatar.class' => 'Ornicar\\GravatarBundle\\Templating\\Helper\\GravatarHelper',
            'twig.extension.gravatar.class' => 'Ornicar\\GravatarBundle\\Twig\\GravatarExtension',
            'gravatar.api.class' => 'Ornicar\\GravatarBundle\\GravatarApi',
            'hwi_oauth.authentication.listener.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\Firewall\\OAuthListener',
            'hwi_oauth.authentication.provider.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\Authentication\\Provider\\OAuthProvider',
            'hwi_oauth.authentication.entry_point.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\EntryPoint\\OAuthEntryPoint',
            'hwi_oauth.user.provider.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\OAuthUserProvider',
            'hwi_oauth.user.provider.entity.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\EntityUserProvider',
            'hwi_oauth.user.provider.fosub_bridge.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Core\\User\\FOSUBUserProvider',
            'hwi_oauth.registration.form.handler.fosub_bridge.class' => 'HWI\\Bundle\\OAuthBundle\\Form\\FOSUBRegistrationFormHandler',
            'hwi_oauth.resource_owner.oauth1.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth1ResourceOwner',
            'hwi_oauth.resource_owner.oauth2.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GenericOAuth2ResourceOwner',
            'hwi_oauth.resource_owner.amazon.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AmazonResourceOwner',
            'hwi_oauth.resource_owner.auth0.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\Auth0ResourceOwner',
            'hwi_oauth.resource_owner.azure.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\AzureResourceOwner',
            'hwi_oauth.resource_owner.bitbucket.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitbucketResourceOwner',
            'hwi_oauth.resource_owner.bitly.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BitlyResourceOwner',
            'hwi_oauth.resource_owner.box.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BoxResourceOwner',
            'hwi_oauth.resource_owner.bufferapp.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\BufferAppResourceOwner',
            'hwi_oauth.resource_owner.dailymotion.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DailymotionResourceOwner',
            'hwi_oauth.resource_owner.deviantart.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeviantartResourceOwner',
            'hwi_oauth.resource_owner.deezer.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DeezerResourceOwner',
            'hwi_oauth.resource_owner.discogs.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DiscogsResourceOwner',
            'hwi_oauth.resource_owner.disqus.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DisqusResourceOwner',
            'hwi_oauth.resource_owner.dropbox.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\DropboxResourceOwner',
            'hwi_oauth.resource_owner.eve_online.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EveOnlineResourceOwner',
            'hwi_oauth.resource_owner.eventbrite.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\EventbriteResourceOwner',
            'hwi_oauth.resource_owner.facebook.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FacebookResourceOwner',
            'hwi_oauth.resource_owner.fiware.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FiwareResourceOwner',
            'hwi_oauth.resource_owner.flickr.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FlickrResourceOwner',
            'hwi_oauth.resource_owner.foursquare.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\FoursquareResourceOwner',
            'hwi_oauth.resource_owner.github.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GitHubResourceOwner',
            'hwi_oauth.resource_owner.google.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\GoogleResourceOwner',
            'hwi_oauth.resource_owner.youtube.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YoutubeResourceOwner',
            'hwi_oauth.resource_owner.hubic.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\HubicResourceOwner',
            'hwi_oauth.resource_owner.instagram.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\InstagramResourceOwner',
            'hwi_oauth.resource_owner.jira.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\JiraResourceOwner',
            'hwi_oauth.resource_owner.linkedin.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\LinkedinResourceOwner',
            'hwi_oauth.resource_owner.mailru.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\MailRuResourceOwner',
            'hwi_oauth.resource_owner.paypal.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\PaypalResourceOwner',
            'hwi_oauth.resource_owner.qq.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\QQResourceOwner',
            'hwi_oauth.resource_owner.reddit.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RedditResourceOwner',
            'hwi_oauth.resource_owner.runkeeper.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\RunKeeperResourceOwner',
            'hwi_oauth.resource_owner.salesforce.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SalesforceResourceOwner',
            'hwi_oauth.resource_owner.sensio_connect.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SensioConnectResourceOwner',
            'hwi_oauth.resource_owner.sina_weibo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SinaWeiboResourceOwner',
            'hwi_oauth.resource_owner.slack.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SlackResourceOwner',
            'hwi_oauth.resource_owner.spotify.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SpotifyResourceOwner',
            'hwi_oauth.resource_owner.soundcloud.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\SoundcloudResourceOwner',
            'hwi_oauth.resource_owner.stack_exchange.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StackExchangeResourceOwner',
            'hwi_oauth.resource_owner.stereomood.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StereomoodResourceOwner',
            'hwi_oauth.resource_owner.strava.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\StravaResourceOwner',
            'hwi_oauth.resource_owner.toshl.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ToshlResourceOwner',
            'hwi_oauth.resource_owner.trakt.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TraktResourceOwner',
            'hwi_oauth.resource_owner.trello.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TrelloResourceOwner',
            'hwi_oauth.resource_owner.twitch.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitchResourceOwner',
            'hwi_oauth.resource_owner.twitter.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\TwitterResourceOwner',
            'hwi_oauth.resource_owner.vkontakte.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\VkontakteResourceOwner',
            'hwi_oauth.resource_owner.wechat.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WechatResourceOwner',
            'hwi_oauth.resource_owner.windows_live.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WindowsLiveResourceOwner',
            'hwi_oauth.resource_owner.wordpress.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\WordpressResourceOwner',
            'hwi_oauth.resource_owner.xing.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\XingResourceOwner',
            'hwi_oauth.resource_owner.yahoo.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YahooResourceOwner',
            'hwi_oauth.resource_owner.yandex.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\YandexResourceOwner',
            'hwi_oauth.resource_owner.odnoklassniki.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\OdnoklassnikiResourceOwner',
            'hwi_oauth.resource_owner.37signals.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\ResourceOwner\\ThirtySevenSignalsResourceOwner',
            'hwi_oauth.resource_ownermap.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\Http\\ResourceOwnerMap',
            'hwi_oauth.security.oauth_utils.class' => 'HWI\\Bundle\\OAuthBundle\\Security\\OAuthUtils',
            'hwi_oauth.storage.session.class' => 'HWI\\Bundle\\OAuthBundle\\OAuth\\RequestDataStorage\\SessionStorage',
            'hwi_oauth.templating.helper.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Templating\\Helper\\OAuthHelper',
            'hwi_oauth.twig.extension.oauth.class' => 'HWI\\Bundle\\OAuthBundle\\Twig\\Extension\\OAuthExtension',
            'hwi_oauth.http_client.class' => 'Buzz\\Client\\Curl',
            'hwi_oauth.firewall_names' => array(
                0 => 'store_area',
            ),
            'hwi_oauth.target_path_parameter' => NULL,
            'hwi_oauth.use_referer' => false,
            'hwi_oauth.failed_auth_path' => 'hwi_oauth_connect',
            'hwi_oauth.resource_owners' => array(
                'github' => 'github',
                'paypal' => 'paypal',
            ),
            'hwi_oauth.connect' => false,
            'hwi_oauth.templating.engine' => 'twig',
            'snc_redis.client.class' => 'Predis\\Client',
            'snc_redis.client_options.class' => 'Predis\\Configuration\\Options',
            'snc_redis.connection_parameters.class' => 'Predis\\Connection\\Parameters',
            'snc_redis.connection_factory.class' => 'Snc\\RedisBundle\\Client\\Predis\\Connection\\ConnectionFactory',
            'snc_redis.connection_wrapper.class' => 'Snc\\RedisBundle\\Client\\Predis\\Connection\\ConnectionWrapper',
            'snc_redis.phpredis_client.class' => 'Redis',
            'snc_redis.phpredis_connection_wrapper.class' => 'Snc\\RedisBundle\\Client\\Phpredis\\Client',
            'snc_redis.logger.class' => 'Snc\\RedisBundle\\Logger\\RedisLogger',
            'snc_redis.data_collector.class' => 'Snc\\RedisBundle\\DataCollector\\RedisDataCollector',
            'snc_redis.doctrine_cache.class' => 'Snc\\RedisBundle\\Doctrine\\Cache\\RedisCache',
            'snc_redis.monolog_handler.class' => 'Snc\\RedisBundle\\Monolog\\Handler\\RedisHandler',
            'snc_redis.swiftmailer_spool.class' => 'Snc\\RedisBundle\\SwiftMailer\\RedisSpool',
            'jms_i18n_routing.router.class' => 'JMS\\I18nRoutingBundle\\Router\\I18nRouter',
            'jms_i18n_routing.locale_resolver.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultLocaleResolver',
            'jms_i18n_routing.loader.class' => 'JMS\\I18nRoutingBundle\\Router\\I18nLoader',
            'jms_i18n_routing.route_exclusion_strategy.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultRouteExclusionStrategy',
            'jms_i18n_routing.pattern_generation_strategy.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultPatternGenerationStrategy',
            'jms_i18n_routing.locale_choosing_listener.class' => 'JMS\\I18nRoutingBundle\\EventListener\\LocaleChoosingListener',
            'jms_i18n_routing.cookie_setting_listener.class' => 'JMS\\I18nRoutingBundle\\EventListener\\CookieSettingListener',
            'jms_i18n_routing.route_translation_extractor.class' => 'JMS\\I18nRoutingBundle\\Translation\\RouteTranslationExtractor',
            'jms_i18n_routing.default_locale' => 'en',
            'jms_i18n_routing.locales' => array(
                0 => 'en',
            ),
            'jms_i18n_routing.catalogue' => 'routes',
            'jms_i18n_routing.strategy' => 'prefix_except_default',
            'jms_i18n_routing.redirect_to_host' => true,
            'jms_i18n_routing.cookie.name' => 'hl',
            'mmoreram.controllerextra.resolver_priority' => -8,
            'mmoreram.controllerextra.request' => 'current',
            'mmoreram.controllerextra.factory_default_method' => 'create',
            'mmoreram.controllerextra.factory_default_static' => false,
            'mmoreram.controllerextra.form_active' => true,
            'mmoreram.controllerextra.form_default_name' => 'form',
            'mmoreram.controllerextra.flush_active' => true,
            'mmoreram.controllerextra.flush_default_manager' => 'default',
            'mmoreram.controllerextra.entity_active' => true,
            'mmoreram.controllerextra.entity_default_name' => 'entity',
            'mmoreram.controllerextra.entity_default_persist' => true,
            'mmoreram.controllerextra.entity_fallback_mapping' => false,
            'mmoreram.controllerextra.json_response_active' => true,
            'mmoreram.controllerextra.json_response_default_status' => 200,
            'mmoreram.controllerextra.json_response_default_error_status' => 500,
            'mmoreram.controllerextra.json_response_default_headers' => array(

            ),
            'mmoreram.controllerextra.log_active' => true,
            'mmoreram.controllerextra.log_default_level' => 'info',
            'mmoreram.controllerextra.log_default_execute' => 'pre',
            'mmoreram.controllerextra.paginator_active' => true,
            'mmoreram.controllerextra.paginator_default_name' => 'paginator',
            'mmoreram.controllerextra.paginator_default_page' => 1,
            'mmoreram.controllerextra.paginator_default_limit_per_page' => 10,
            'mmoreram.controllerextra.object_manager_active' => true,
            'mmoreram.controllerextra.object_manager_default_name' => 'objectManager',
            'mmoreram.controllerextra.get_active' => true,
            'mmoreram.controllerextra.post_active' => true,
            'mmoreram.controllerextra.event_listeners.resolver_event_listener.class' => 'Mmoreram\\ControllerExtraBundle\\EventListener\\ResolverEventListener',
            'mmoreram.controllerextra.provider.entity_provider.class' => 'Mmoreram\\ControllerExtraBundle\\Provider\\EntityProvider',
            'mmoreram.controllerextra.provider.request_parameter_provider.class' => 'Mmoreram\\ControllerExtraBundle\\Provider\\RequestParameterProvider',
            'mmoreram.controllerextra.resolver.form_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\FormAnnotationResolver',
            'mmoreram.controllerextra.resolver.flush_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\FlushAnnotationResolver',
            'mmoreram.controllerextra.resolver.entity_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\EntityAnnotationResolver',
            'mmoreram.controllerextra.resolver.log_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\LogAnnotationResolver',
            'mmoreram.controllerextra.resolver.json_resolver_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\JsonResponseAnnotationResolver',
            'mmoreram.controllerextra.resolver.paginator_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\PaginatorAnnotationResolver',
            'mmoreram.controllerextra.collector.paginator_evaluator_collector.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorEvaluatorCollector',
            'mmoreram.controllerextra.evaluator.paginator_innerjoins_evaluator.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorInnerJoinsEvaluator',
            'mmoreram.controllerextra.evaluator.paginator_leftjoins_evaluator.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorLeftJoinsEvaluator',
            'mmoreram.controllerextra.evaluator.paginator_wheres_evaluator.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorWheresEvaluator',
            'mmoreram.controllerextra.evaluator.paginator_orderby_evaluator.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorOrderByEvaluator',
            'mmoreram.controllerextra.evaluator.paginator_notnulls_evaluator.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\Paginator\\PaginatorNotNullsEvaluator',
            'mmoreram.controllerextra.resolver.object_manager_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\ObjectManagerAnnotationResolver',
            'mmoreram.controllerextra.resolver.get_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\GetAnnotationResolver',
            'mmoreram.controllerextra.resolver.post_annotation_resolver.class' => 'Mmoreram\\ControllerExtraBundle\\Resolver\\PostAnnotationResolver',
            'http_headers.response' => array(
                'X-Elcodi' => array(
                    'values' => array(
                        0 => 'This E-commerce is built using Elcodi and Symfony',
                    ),
                ),
            ),
            'http_headers.listener.class' => 'Mmoreram\\HttpHeadersBundle\\EventListener\\Headers',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.infer_types_from_doctrine_metadata' => true,
            'fos_rest.serializer.exclusion_strategy.version' => '',
            'fos_rest.serializer.exclusion_strategy.groups' => array(

            ),
            'fos_rest.view_handler.jsonp.callback_param' => '',
            'fos_rest.view.exception_wrapper_handler' => 'FOS\\RestBundle\\View\\ExceptionWrapperHandler',
            'fos_rest.view_handler.default.class' => 'FOS\\RestBundle\\View\\ViewHandler',
            'fos_rest.view_handler.jsonp.class' => 'FOS\\RestBundle\\View\\JsonpHandler',
            'fos_rest.serializer.exception_wrapper_serialize_handler.class' => 'FOS\\RestBundle\\Serializer\\ExceptionWrapperSerializeHandler',
            'fos_rest.routing.loader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteLoader',
            'fos_rest.routing.loader.yaml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestYamlCollectionLoader',
            'fos_rest.routing.loader.xml_collection.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestXmlCollectionLoader',
            'fos_rest.routing.loader.processor.class' => 'FOS\\RestBundle\\Routing\\Loader\\RestRouteProcessor',
            'fos_rest.routing.loader.reader.controller.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestControllerReader',
            'fos_rest.routing.loader.reader.action.class' => 'FOS\\RestBundle\\Routing\\Loader\\Reader\\RestActionReader',
            'fos_rest.format_negotiator.class' => 'FOS\\RestBundle\\Negotiation\\FormatNegotiator',
            'fos_rest.inflector.class' => 'FOS\\RestBundle\\Inflector\\DoctrineInflector',
            'fos_rest.request_matcher.class' => 'Symfony\\Component\\HttpFoundation\\RequestMatcher',
            'fos_rest.violation_formatter.class' => 'FOS\\RestBundle\\Util\\ViolationFormatter',
            'fos_rest.request.param_fetcher.class' => 'FOS\\RestBundle\\Request\\ParamFetcher',
            'fos_rest.request.param_fetcher.reader.class' => 'FOS\\RestBundle\\Request\\ParamReader',
            'fos_rest.cache_dir' => (__DIR__.'/fos_rest'),
            'fos_rest.routing.loader.default_format' => NULL,
            'fos_rest.routing.loader.include_format' => true,
            'fos_rest.serializer.serialize_null' => false,
            'fos_rest.exception.codes' => array(

            ),
            'fos_rest.exception.messages' => array(

            ),
            'fos_rest.converter.request_body.validation_errors_argument' => 'validationErrors',
            'fos_rest.mime_types' => array(

            ),
            'fos_rest.formats' => array(
                'json' => false,
                'xml' => false,
                'html' => true,
            ),
            'fos_rest.force_redirects' => array(
                'html' => 302,
            ),
            'fos_rest.failed_validation' => 400,
            'fos_rest.empty_content' => 204,
            'fos_rest.serialize_null' => false,
            'fos_rest.default_engine' => 'twig',
            'fos_rest.normalizer.camel_keys.class' => 'FOS\\RestBundle\\Normalizer\\CamelKeysNormalizer',
            'fos_rest.decoder.json.class' => 'FOS\\RestBundle\\Decoder\\JsonDecoder',
            'fos_rest.decoder.jsontoform.class' => 'FOS\\RestBundle\\Decoder\\JsonToFormDecoder',
            'fos_rest.decoder.xml.class' => 'FOS\\RestBundle\\Decoder\\XmlDecoder',
            'fos_rest.decoder_provider.class' => 'FOS\\RestBundle\\Decoder\\ContainerDecoderProvider',
            'fos_rest.body_listener.class' => 'FOS\\RestBundle\\EventListener\\BodyListener',
            'fos_rest.throw_exception_on_unsupported_content_type' => false,
            'fos_rest.body_default_format' => NULL,
            'fos_rest.decoders' => array(
                'json' => 'fos_rest.decoder.json',
                'xml' => 'fos_rest.decoder.xml',
            ),
            'web_profiler.controller.profiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ProfilerController',
            'web_profiler.controller.router.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\RouterController',
            'web_profiler.controller.exception.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Controller\\ExceptionController',
            'twig.extension.webprofiler.class' => 'Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.class' => 'Symfony\\Bundle\\WebProfilerBundle\\EventListener\\WebDebugToolbarListener',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'sensio_distribution.webconfigurator.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Configurator',
            'sensio_distribution.webconfigurator.doctrine_step.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Step\\DoctrineStep',
            'sensio_distribution.webconfigurator.secret_step.class' => 'Sensio\\Bundle\\DistributionBundle\\Configurator\\Step\\SecretStep',
            'sensio_distribution.security_checker.class' => 'SensioLabs\\Security\\SecurityChecker',
            'sensio_distribution.security_checker.command.class' => 'SensioLabs\\Security\\Command\\SecurityCheckerCommand',
            'data_collector.templates' => array(
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ),
                'snc_redis.data_collector' => array(
                    0 => 'redis',
                    1 => 'SncRedisBundle:Collector:redis',
                ),
            ),
            'console.command.ids' => array(
                0 => 'elcodi.command.populate_currency_rates',
                1 => 'elcodi.command.location_populate',
                2 => 'elcodi.command.location_load',
                3 => 'elcodi.command.location_drop',
                4 => 'elcodi.command.plugins_load',
                5 => 'elcodi.command.plugins_list',
                6 => 'elcodi.command.plugin_enable',
                7 => 'elcodi.command.plugin_disable',
                8 => 'elcodi.command.metrics_load',
                9 => 'elcodi.command.sitemap_dump',
                10 => 'elcodi.command.sitemap_profile',
                11 => 'elcodi.command.elcodi_install',
                12 => 'store.fixtures_booster.command.load_fixtures',
                13 => 'sensio_distribution.security_checker.command',
                14 => 'visithor.command.go',
            ),
        );
    }
}

class ElcodiComponentCoreServicesObjectDirector_00000000047381cc0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44345155593293318 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443451e9976091979 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44344cde122322036 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'find', array('id' => $id), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'findAll', array(), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'create', array(), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'save', array('data' => $data), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'remove', array('data' => $data), $this->initializer57d4e443451e9976091979);

        return $this->valueHolder57d4e44345155593293318->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443451e9976091979 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__get', array('name' => $name), $this->initializer57d4e443451e9976091979);

        if (isset(self::$publicProperties57d4e44344cde122322036[$name])) {
            return $this->valueHolder57d4e44345155593293318->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44345155593293318;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44345155593293318;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443451e9976091979);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44345155593293318;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44345155593293318;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__isset', array('name' => $name), $this->initializer57d4e443451e9976091979);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44345155593293318;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44345155593293318;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__unset', array('name' => $name), $this->initializer57d4e443451e9976091979);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44345155593293318;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44345155593293318;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__clone', array(), $this->initializer57d4e443451e9976091979);

        $this->valueHolder57d4e44345155593293318 = clone $this->valueHolder57d4e44345155593293318;
    }

    public function __sleep()
    {
        $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, '__sleep', array(), $this->initializer57d4e443451e9976091979);

        return array('valueHolder57d4e44345155593293318');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443451e9976091979 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443451e9976091979;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443451e9976091979 && $this->initializer57d4e443451e9976091979->__invoke($this->valueHolder57d4e44345155593293318, $this, 'initializeProxy', array(), $this->initializer57d4e443451e9976091979);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44345155593293318;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44345155593293318;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047381c90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44349a6f989049951 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44349a7c273079617 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44349a51505186390 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'find', array('id' => $id), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'findAll', array(), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'create', array(), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'save', array('data' => $data), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'remove', array('data' => $data), $this->initializer57d4e44349a7c273079617);

        return $this->valueHolder57d4e44349a6f989049951->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44349a7c273079617 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__get', array('name' => $name), $this->initializer57d4e44349a7c273079617);

        if (isset(self::$publicProperties57d4e44349a51505186390[$name])) {
            return $this->valueHolder57d4e44349a6f989049951->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44349a6f989049951;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44349a6f989049951;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44349a7c273079617);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44349a6f989049951;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44349a6f989049951;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__isset', array('name' => $name), $this->initializer57d4e44349a7c273079617);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44349a6f989049951;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44349a6f989049951;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__unset', array('name' => $name), $this->initializer57d4e44349a7c273079617);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44349a6f989049951;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44349a6f989049951;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__clone', array(), $this->initializer57d4e44349a7c273079617);

        $this->valueHolder57d4e44349a6f989049951 = clone $this->valueHolder57d4e44349a6f989049951;
    }

    public function __sleep()
    {
        $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, '__sleep', array(), $this->initializer57d4e44349a7c273079617);

        return array('valueHolder57d4e44349a6f989049951');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44349a7c273079617 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44349a7c273079617;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44349a7c273079617 && $this->initializer57d4e44349a7c273079617->__invoke($this->valueHolder57d4e44349a6f989049951, $this, 'initializeProxy', array(), $this->initializer57d4e44349a7c273079617);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44349a6f989049951;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44349a6f989049951;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047381c50000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4434b70e544393481 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4434b71c324869908 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4434b6ec107337902 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'find', array('id' => $id), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'findAll', array(), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'create', array(), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'save', array('data' => $data), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'remove', array('data' => $data), $this->initializer57d4e4434b71c324869908);

        return $this->valueHolder57d4e4434b70e544393481->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4434b71c324869908 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__get', array('name' => $name), $this->initializer57d4e4434b71c324869908);

        if (isset(self::$publicProperties57d4e4434b6ec107337902[$name])) {
            return $this->valueHolder57d4e4434b70e544393481->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434b70e544393481;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434b70e544393481;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4434b71c324869908);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434b70e544393481;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434b70e544393481;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__isset', array('name' => $name), $this->initializer57d4e4434b71c324869908);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434b70e544393481;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434b70e544393481;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__unset', array('name' => $name), $this->initializer57d4e4434b71c324869908);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434b70e544393481;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434b70e544393481;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__clone', array(), $this->initializer57d4e4434b71c324869908);

        $this->valueHolder57d4e4434b70e544393481 = clone $this->valueHolder57d4e4434b70e544393481;
    }

    public function __sleep()
    {
        $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, '__sleep', array(), $this->initializer57d4e4434b71c324869908);

        return array('valueHolder57d4e4434b70e544393481');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4434b71c324869908 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4434b71c324869908;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4434b71c324869908 && $this->initializer57d4e4434b71c324869908->__invoke($this->valueHolder57d4e4434b70e544393481, $this, 'initializeProxy', array(), $this->initializer57d4e4434b71c324869908);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4434b70e544393481;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4434b70e544393481;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047381c10000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4434d0f4471531449 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4434d101661455662 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4434d0d5753135131 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'find', array('id' => $id), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'findAll', array(), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'create', array(), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'save', array('data' => $data), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'remove', array('data' => $data), $this->initializer57d4e4434d101661455662);

        return $this->valueHolder57d4e4434d0f4471531449->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4434d101661455662 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__get', array('name' => $name), $this->initializer57d4e4434d101661455662);

        if (isset(self::$publicProperties57d4e4434d0d5753135131[$name])) {
            return $this->valueHolder57d4e4434d0f4471531449->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434d0f4471531449;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434d0f4471531449;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4434d101661455662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434d0f4471531449;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434d0f4471531449;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__isset', array('name' => $name), $this->initializer57d4e4434d101661455662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434d0f4471531449;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434d0f4471531449;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__unset', array('name' => $name), $this->initializer57d4e4434d101661455662);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4434d0f4471531449;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4434d0f4471531449;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__clone', array(), $this->initializer57d4e4434d101661455662);

        $this->valueHolder57d4e4434d0f4471531449 = clone $this->valueHolder57d4e4434d0f4471531449;
    }

    public function __sleep()
    {
        $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, '__sleep', array(), $this->initializer57d4e4434d101661455662);

        return array('valueHolder57d4e4434d0f4471531449');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4434d101661455662 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4434d101661455662;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4434d101661455662 && $this->initializer57d4e4434d101661455662->__invoke($this->valueHolder57d4e4434d0f4471531449, $this, 'initializeProxy', array(), $this->initializer57d4e4434d101661455662);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4434d0f4471531449;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4434d0f4471531449;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047381180000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44351ccd120393666 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44351cda196301622 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44351cae912153382 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'find', array('id' => $id), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'findAll', array(), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'create', array(), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'save', array('data' => $data), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'remove', array('data' => $data), $this->initializer57d4e44351cda196301622);

        return $this->valueHolder57d4e44351ccd120393666->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44351cda196301622 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__get', array('name' => $name), $this->initializer57d4e44351cda196301622);

        if (isset(self::$publicProperties57d4e44351cae912153382[$name])) {
            return $this->valueHolder57d4e44351ccd120393666->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44351ccd120393666;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44351ccd120393666;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44351cda196301622);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44351ccd120393666;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44351ccd120393666;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__isset', array('name' => $name), $this->initializer57d4e44351cda196301622);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44351ccd120393666;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44351ccd120393666;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__unset', array('name' => $name), $this->initializer57d4e44351cda196301622);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44351ccd120393666;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44351ccd120393666;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__clone', array(), $this->initializer57d4e44351cda196301622);

        $this->valueHolder57d4e44351ccd120393666 = clone $this->valueHolder57d4e44351ccd120393666;
    }

    public function __sleep()
    {
        $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, '__sleep', array(), $this->initializer57d4e44351cda196301622);

        return array('valueHolder57d4e44351ccd120393666');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44351cda196301622 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44351cda196301622;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44351cda196301622 && $this->initializer57d4e44351cda196301622->__invoke($this->valueHolder57d4e44351ccd120393666, $this, 'initializeProxy', array(), $this->initializer57d4e44351cda196301622);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44351ccd120393666;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44351ccd120393666;
    }


}

class ElcodiComponentRuleServicesRuleManager_000000000473817e0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Rule\Services\RuleManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443536a2899839889 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443536b2178120809 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44353677273635290 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function evaluate(\Elcodi\Component\Rule\Entity\Interfaces\RuleInterface $rule, array $context = array())
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, 'evaluate', array('rule' => $rule, 'context' => $context), $this->initializer57d4e443536b2178120809);

        return $this->valueHolder57d4e443536a2899839889->evaluate($rule, $context);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443536b2178120809 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__get', array('name' => $name), $this->initializer57d4e443536b2178120809);

        if (isset(self::$publicProperties57d4e44353677273635290[$name])) {
            return $this->valueHolder57d4e443536a2899839889->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443536a2899839889;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443536a2899839889;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443536b2178120809);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443536a2899839889;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443536a2899839889;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__isset', array('name' => $name), $this->initializer57d4e443536b2178120809);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443536a2899839889;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443536a2899839889;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__unset', array('name' => $name), $this->initializer57d4e443536b2178120809);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443536a2899839889;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443536a2899839889;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__clone', array(), $this->initializer57d4e443536b2178120809);

        $this->valueHolder57d4e443536a2899839889 = clone $this->valueHolder57d4e443536a2899839889;
    }

    public function __sleep()
    {
        $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, '__sleep', array(), $this->initializer57d4e443536b2178120809);

        return array('valueHolder57d4e443536a2899839889');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443536b2178120809 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443536b2178120809;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443536b2178120809 && $this->initializer57d4e443536b2178120809->__invoke($this->valueHolder57d4e443536a2899839889, $this, 'initializeProxy', array(), $this->initializer57d4e443536b2178120809);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443536a2899839889;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443536a2899839889;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473814c0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44353ce9484556390 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44353cf4052336743 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44353cd2898834623 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'find', array('id' => $id), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'findAll', array(), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'create', array(), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'save', array('data' => $data), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'remove', array('data' => $data), $this->initializer57d4e44353cf4052336743);

        return $this->valueHolder57d4e44353ce9484556390->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44353cf4052336743 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__get', array('name' => $name), $this->initializer57d4e44353cf4052336743);

        if (isset(self::$publicProperties57d4e44353cd2898834623[$name])) {
            return $this->valueHolder57d4e44353ce9484556390->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44353ce9484556390;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44353ce9484556390;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44353cf4052336743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44353ce9484556390;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44353ce9484556390;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__isset', array('name' => $name), $this->initializer57d4e44353cf4052336743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44353ce9484556390;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44353ce9484556390;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__unset', array('name' => $name), $this->initializer57d4e44353cf4052336743);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44353ce9484556390;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44353ce9484556390;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__clone', array(), $this->initializer57d4e44353cf4052336743);

        $this->valueHolder57d4e44353ce9484556390 = clone $this->valueHolder57d4e44353ce9484556390;
    }

    public function __sleep()
    {
        $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, '__sleep', array(), $this->initializer57d4e44353cf4052336743);

        return array('valueHolder57d4e44353ce9484556390');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44353cf4052336743 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44353cf4052336743;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44353cf4052336743 && $this->initializer57d4e44353cf4052336743->__invoke($this->valueHolder57d4e44353ce9484556390, $this, 'initializeProxy', array(), $this->initializer57d4e44353cf4052336743);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44353ce9484556390;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44353ce9484556390;
    }


}

class ElcodiComponentCurrencyPopulatorCurrencyExchangeRatesPopulator_00000000047380fb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Currency\Populator\CurrencyExchangeRatesPopulator implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44355757037040653 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44355763028142027 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4435573d984895987 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function populate()
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, 'populate', array(), $this->initializer57d4e44355763028142027);

        return $this->valueHolder57d4e44355757037040653->populate();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44355763028142027 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__get', array('name' => $name), $this->initializer57d4e44355763028142027);

        if (isset(self::$publicProperties57d4e4435573d984895987[$name])) {
            return $this->valueHolder57d4e44355757037040653->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355757037040653;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355757037040653;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44355763028142027);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355757037040653;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355757037040653;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__isset', array('name' => $name), $this->initializer57d4e44355763028142027);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355757037040653;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355757037040653;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__unset', array('name' => $name), $this->initializer57d4e44355763028142027);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355757037040653;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355757037040653;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__clone', array(), $this->initializer57d4e44355763028142027);

        $this->valueHolder57d4e44355757037040653 = clone $this->valueHolder57d4e44355757037040653;
    }

    public function __sleep()
    {
        $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, '__sleep', array(), $this->initializer57d4e44355763028142027);

        return array('valueHolder57d4e44355757037040653');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44355763028142027 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44355763028142027;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44355763028142027 && $this->initializer57d4e44355763028142027->__invoke($this->valueHolder57d4e44355757037040653, $this, 'initializeProxy', array(), $this->initializer57d4e44355763028142027);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44355757037040653;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44355757037040653;
    }


}

class ElcodiComponentCurrencyServicesExchangeRateCalculator_00000000047380f70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Currency\Services\ExchangeRateCalculator implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44355f6c886290197 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44355f76311058265 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44355f55807333402 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function calculateExchangeRate(\Elcodi\Component\Currency\Entity\Interfaces\CurrencyInterface $currencyFrom, \Elcodi\Component\Currency\Entity\Interfaces\CurrencyInterface $currencyTo)
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, 'calculateExchangeRate', array('currencyFrom' => $currencyFrom, 'currencyTo' => $currencyTo), $this->initializer57d4e44355f76311058265);

        return $this->valueHolder57d4e44355f6c886290197->calculateExchangeRate($currencyFrom, $currencyTo);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44355f76311058265 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__get', array('name' => $name), $this->initializer57d4e44355f76311058265);

        if (isset(self::$publicProperties57d4e44355f55807333402[$name])) {
            return $this->valueHolder57d4e44355f6c886290197->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355f6c886290197;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355f6c886290197;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44355f76311058265);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355f6c886290197;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355f6c886290197;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__isset', array('name' => $name), $this->initializer57d4e44355f76311058265);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355f6c886290197;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355f6c886290197;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__unset', array('name' => $name), $this->initializer57d4e44355f76311058265);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44355f6c886290197;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44355f6c886290197;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__clone', array(), $this->initializer57d4e44355f76311058265);

        $this->valueHolder57d4e44355f6c886290197 = clone $this->valueHolder57d4e44355f6c886290197;
    }

    public function __sleep()
    {
        $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, '__sleep', array(), $this->initializer57d4e44355f76311058265);

        return array('valueHolder57d4e44355f6c886290197');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44355f76311058265 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44355f76311058265;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44355f76311058265 && $this->initializer57d4e44355f76311058265->__invoke($this->valueHolder57d4e44355f6c886290197, $this, 'initializeProxy', array(), $this->initializer57d4e44355f76311058265);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44355f6c886290197;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44355f6c886290197;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047380d00000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44356613325990436 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44356627489238110 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e443565f0295136264 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'find', array('id' => $id), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'findAll', array(), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'create', array(), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'save', array('data' => $data), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'remove', array('data' => $data), $this->initializer57d4e44356627489238110);

        return $this->valueHolder57d4e44356613325990436->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44356627489238110 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__get', array('name' => $name), $this->initializer57d4e44356627489238110);

        if (isset(self::$publicProperties57d4e443565f0295136264[$name])) {
            return $this->valueHolder57d4e44356613325990436->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44356613325990436;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44356613325990436;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44356627489238110);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44356613325990436;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44356613325990436;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__isset', array('name' => $name), $this->initializer57d4e44356627489238110);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44356613325990436;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44356613325990436;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__unset', array('name' => $name), $this->initializer57d4e44356627489238110);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44356613325990436;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44356613325990436;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__clone', array(), $this->initializer57d4e44356627489238110);

        $this->valueHolder57d4e44356613325990436 = clone $this->valueHolder57d4e44356613325990436;
    }

    public function __sleep()
    {
        $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, '__sleep', array(), $this->initializer57d4e44356627489238110);

        return array('valueHolder57d4e44356613325990436');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44356627489238110 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44356627489238110;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44356627489238110 && $this->initializer57d4e44356627489238110->__invoke($this->valueHolder57d4e44356613325990436, $this, 'initializeProxy', array(), $this->initializer57d4e44356627489238110);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44356613325990436;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44356613325990436;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473802d0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44357f64096647730 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44357f6f919751232 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44357f4b082420022 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'find', array('id' => $id), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'findAll', array(), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'create', array(), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'save', array('data' => $data), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'remove', array('data' => $data), $this->initializer57d4e44357f6f919751232);

        return $this->valueHolder57d4e44357f64096647730->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44357f6f919751232 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__get', array('name' => $name), $this->initializer57d4e44357f6f919751232);

        if (isset(self::$publicProperties57d4e44357f4b082420022[$name])) {
            return $this->valueHolder57d4e44357f64096647730->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44357f64096647730;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44357f64096647730;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44357f6f919751232);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44357f64096647730;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44357f64096647730;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__isset', array('name' => $name), $this->initializer57d4e44357f6f919751232);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44357f64096647730;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44357f64096647730;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__unset', array('name' => $name), $this->initializer57d4e44357f6f919751232);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44357f64096647730;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44357f64096647730;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__clone', array(), $this->initializer57d4e44357f6f919751232);

        $this->valueHolder57d4e44357f64096647730 = clone $this->valueHolder57d4e44357f64096647730;
    }

    public function __sleep()
    {
        $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, '__sleep', array(), $this->initializer57d4e44357f6f919751232);

        return array('valueHolder57d4e44357f64096647730');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44357f6f919751232 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44357f6f919751232;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44357f6f919751232 && $this->initializer57d4e44357f6f919751232->__invoke($this->valueHolder57d4e44357f64096647730, $this, 'initializeProxy', array(), $this->initializer57d4e44357f6f919751232);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44357f64096647730;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44357f64096647730;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047380160000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44359894616623891 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4435989e624813652 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4435987d205373017 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'find', array('id' => $id), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'findAll', array(), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'create', array(), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'save', array('data' => $data), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'remove', array('data' => $data), $this->initializer57d4e4435989e624813652);

        return $this->valueHolder57d4e44359894616623891->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4435989e624813652 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__get', array('name' => $name), $this->initializer57d4e4435989e624813652);

        if (isset(self::$publicProperties57d4e4435987d205373017[$name])) {
            return $this->valueHolder57d4e44359894616623891->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44359894616623891;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44359894616623891;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4435989e624813652);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44359894616623891;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44359894616623891;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__isset', array('name' => $name), $this->initializer57d4e4435989e624813652);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44359894616623891;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44359894616623891;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__unset', array('name' => $name), $this->initializer57d4e4435989e624813652);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44359894616623891;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44359894616623891;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__clone', array(), $this->initializer57d4e4435989e624813652);

        $this->valueHolder57d4e44359894616623891 = clone $this->valueHolder57d4e44359894616623891;
    }

    public function __sleep()
    {
        $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, '__sleep', array(), $this->initializer57d4e4435989e624813652);

        return array('valueHolder57d4e44359894616623891');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4435989e624813652 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4435989e624813652;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4435989e624813652 && $this->initializer57d4e4435989e624813652->__invoke($this->valueHolder57d4e44359894616623891, $this, 'initializeProxy', array(), $this->initializer57d4e4435989e624813652);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44359894616623891;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44359894616623891;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047387b90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4435b2de948291634 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4435b2ed532263627 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4435b2bf543265177 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'find', array('id' => $id), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'findAll', array(), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'create', array(), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'save', array('data' => $data), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'remove', array('data' => $data), $this->initializer57d4e4435b2ed532263627);

        return $this->valueHolder57d4e4435b2de948291634->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4435b2ed532263627 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__get', array('name' => $name), $this->initializer57d4e4435b2ed532263627);

        if (isset(self::$publicProperties57d4e4435b2bf543265177[$name])) {
            return $this->valueHolder57d4e4435b2de948291634->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435b2de948291634;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435b2de948291634;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4435b2ed532263627);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435b2de948291634;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435b2de948291634;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__isset', array('name' => $name), $this->initializer57d4e4435b2ed532263627);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435b2de948291634;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435b2de948291634;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__unset', array('name' => $name), $this->initializer57d4e4435b2ed532263627);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435b2de948291634;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435b2de948291634;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__clone', array(), $this->initializer57d4e4435b2ed532263627);

        $this->valueHolder57d4e4435b2de948291634 = clone $this->valueHolder57d4e4435b2de948291634;
    }

    public function __sleep()
    {
        $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, '__sleep', array(), $this->initializer57d4e4435b2ed532263627);

        return array('valueHolder57d4e4435b2de948291634');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4435b2ed532263627 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4435b2ed532263627;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4435b2ed532263627 && $this->initializer57d4e4435b2ed532263627->__invoke($this->valueHolder57d4e4435b2de948291634, $this, 'initializeProxy', array(), $this->initializer57d4e4435b2ed532263627);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4435b2de948291634;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4435b2de948291634;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047386c60000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4435cbbf567768032 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4435cbc9601381294 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4435cba7419897972 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'find', array('id' => $id), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'findAll', array(), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'create', array(), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'save', array('data' => $data), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'remove', array('data' => $data), $this->initializer57d4e4435cbc9601381294);

        return $this->valueHolder57d4e4435cbbf567768032->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4435cbc9601381294 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__get', array('name' => $name), $this->initializer57d4e4435cbc9601381294);

        if (isset(self::$publicProperties57d4e4435cba7419897972[$name])) {
            return $this->valueHolder57d4e4435cbbf567768032->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435cbbf567768032;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435cbbf567768032;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4435cbc9601381294);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435cbbf567768032;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435cbbf567768032;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__isset', array('name' => $name), $this->initializer57d4e4435cbc9601381294);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435cbbf567768032;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435cbbf567768032;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__unset', array('name' => $name), $this->initializer57d4e4435cbc9601381294);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435cbbf567768032;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435cbbf567768032;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__clone', array(), $this->initializer57d4e4435cbc9601381294);

        $this->valueHolder57d4e4435cbbf567768032 = clone $this->valueHolder57d4e4435cbbf567768032;
    }

    public function __sleep()
    {
        $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, '__sleep', array(), $this->initializer57d4e4435cbc9601381294);

        return array('valueHolder57d4e4435cbbf567768032');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4435cbc9601381294 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4435cbc9601381294;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4435cbc9601381294 && $this->initializer57d4e4435cbc9601381294->__invoke($this->valueHolder57d4e4435cbbf567768032, $this, 'initializeProxy', array(), $this->initializer57d4e4435cbc9601381294);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4435cbbf567768032;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4435cbbf567768032;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047386c30000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4435e621161295653 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4435e62f285644529 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4435e5f5161588371 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'find', array('id' => $id), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'findAll', array(), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'create', array(), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'save', array('data' => $data), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'remove', array('data' => $data), $this->initializer57d4e4435e62f285644529);

        return $this->valueHolder57d4e4435e621161295653->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4435e62f285644529 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__get', array('name' => $name), $this->initializer57d4e4435e62f285644529);

        if (isset(self::$publicProperties57d4e4435e5f5161588371[$name])) {
            return $this->valueHolder57d4e4435e621161295653->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435e621161295653;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435e621161295653;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4435e62f285644529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435e621161295653;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435e621161295653;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__isset', array('name' => $name), $this->initializer57d4e4435e62f285644529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435e621161295653;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435e621161295653;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__unset', array('name' => $name), $this->initializer57d4e4435e62f285644529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4435e621161295653;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4435e621161295653;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__clone', array(), $this->initializer57d4e4435e62f285644529);

        $this->valueHolder57d4e4435e621161295653 = clone $this->valueHolder57d4e4435e621161295653;
    }

    public function __sleep()
    {
        $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, '__sleep', array(), $this->initializer57d4e4435e62f285644529);

        return array('valueHolder57d4e4435e621161295653');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4435e62f285644529 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4435e62f285644529;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4435e62f285644529 && $this->initializer57d4e4435e62f285644529->__invoke($this->valueHolder57d4e4435e621161295653, $this, 'initializeProxy', array(), $this->initializer57d4e4435e62f285644529);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4435e621161295653;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4435e621161295653;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047384900000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4436024c001208993 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44360266271234441 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44360214182350517 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'find', array('id' => $id), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'findAll', array(), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'create', array(), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'save', array('data' => $data), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'remove', array('data' => $data), $this->initializer57d4e44360266271234441);

        return $this->valueHolder57d4e4436024c001208993->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44360266271234441 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__get', array('name' => $name), $this->initializer57d4e44360266271234441);

        if (isset(self::$publicProperties57d4e44360214182350517[$name])) {
            return $this->valueHolder57d4e4436024c001208993->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436024c001208993;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436024c001208993;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44360266271234441);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436024c001208993;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436024c001208993;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__isset', array('name' => $name), $this->initializer57d4e44360266271234441);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436024c001208993;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436024c001208993;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__unset', array('name' => $name), $this->initializer57d4e44360266271234441);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436024c001208993;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436024c001208993;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__clone', array(), $this->initializer57d4e44360266271234441);

        $this->valueHolder57d4e4436024c001208993 = clone $this->valueHolder57d4e4436024c001208993;
    }

    public function __sleep()
    {
        $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, '__sleep', array(), $this->initializer57d4e44360266271234441);

        return array('valueHolder57d4e4436024c001208993');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44360266271234441 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44360266271234441;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44360266271234441 && $this->initializer57d4e44360266271234441->__invoke($this->valueHolder57d4e4436024c001208993, $this, 'initializeProxy', array(), $this->initializer57d4e44360266271234441);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4436024c001208993;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4436024c001208993;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047384ed0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44361d86990591752 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44361d91408228880 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44361d6b559130841 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'find', array('id' => $id), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'findAll', array(), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'create', array(), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'save', array('data' => $data), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'remove', array('data' => $data), $this->initializer57d4e44361d91408228880);

        return $this->valueHolder57d4e44361d86990591752->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44361d91408228880 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__get', array('name' => $name), $this->initializer57d4e44361d91408228880);

        if (isset(self::$publicProperties57d4e44361d6b559130841[$name])) {
            return $this->valueHolder57d4e44361d86990591752->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44361d86990591752;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44361d86990591752;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44361d91408228880);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44361d86990591752;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44361d86990591752;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__isset', array('name' => $name), $this->initializer57d4e44361d91408228880);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44361d86990591752;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44361d86990591752;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__unset', array('name' => $name), $this->initializer57d4e44361d91408228880);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44361d86990591752;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44361d86990591752;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__clone', array(), $this->initializer57d4e44361d91408228880);

        $this->valueHolder57d4e44361d86990591752 = clone $this->valueHolder57d4e44361d86990591752;
    }

    public function __sleep()
    {
        $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, '__sleep', array(), $this->initializer57d4e44361d91408228880);

        return array('valueHolder57d4e44361d86990591752');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44361d91408228880 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44361d91408228880;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44361d91408228880 && $this->initializer57d4e44361d91408228880->__invoke($this->valueHolder57d4e44361d86990591752, $this, 'initializeProxy', array(), $this->initializer57d4e44361d91408228880);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44361d86990591752;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44361d86990591752;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047384cf0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443637a2478559614 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443637ac053570118 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44363789409452133 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'find', array('id' => $id), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'findAll', array(), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'create', array(), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'save', array('data' => $data), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'remove', array('data' => $data), $this->initializer57d4e443637ac053570118);

        return $this->valueHolder57d4e443637a2478559614->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443637ac053570118 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__get', array('name' => $name), $this->initializer57d4e443637ac053570118);

        if (isset(self::$publicProperties57d4e44363789409452133[$name])) {
            return $this->valueHolder57d4e443637a2478559614->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443637a2478559614;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443637a2478559614;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443637ac053570118);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443637a2478559614;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443637a2478559614;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__isset', array('name' => $name), $this->initializer57d4e443637ac053570118);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443637a2478559614;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443637a2478559614;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__unset', array('name' => $name), $this->initializer57d4e443637ac053570118);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443637a2478559614;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443637a2478559614;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__clone', array(), $this->initializer57d4e443637ac053570118);

        $this->valueHolder57d4e443637a2478559614 = clone $this->valueHolder57d4e443637a2478559614;
    }

    public function __sleep()
    {
        $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, '__sleep', array(), $this->initializer57d4e443637ac053570118);

        return array('valueHolder57d4e443637a2478559614');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443637ac053570118 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443637ac053570118;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443637ac053570118 && $this->initializer57d4e443637ac053570118->__invoke($this->valueHolder57d4e443637a2478559614, $this, 'initializeProxy', array(), $this->initializer57d4e443637ac053570118);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443637a2478559614;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443637a2478559614;
    }


}

class ElcodiComponentStoreWrapperStoreWrapper_00000000047384c70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Store\Wrapper\StoreWrapper implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4436548f239399483 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443654c0358213248 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4436541b748300243 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function get()
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, 'get', array(), $this->initializer57d4e443654c0358213248);

        return $this->valueHolder57d4e4436548f239399483->get();
    }

    /**
     * {@inheritDoc}
     */
    public function clean()
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, 'clean', array(), $this->initializer57d4e443654c0358213248);

        return $this->valueHolder57d4e4436548f239399483->clean();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443654c0358213248 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__get', array('name' => $name), $this->initializer57d4e443654c0358213248);

        if (isset(self::$publicProperties57d4e4436541b748300243[$name])) {
            return $this->valueHolder57d4e4436548f239399483->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436548f239399483;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436548f239399483;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443654c0358213248);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436548f239399483;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436548f239399483;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__isset', array('name' => $name), $this->initializer57d4e443654c0358213248);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436548f239399483;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436548f239399483;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__unset', array('name' => $name), $this->initializer57d4e443654c0358213248);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436548f239399483;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436548f239399483;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__clone', array(), $this->initializer57d4e443654c0358213248);

        $this->valueHolder57d4e4436548f239399483 = clone $this->valueHolder57d4e4436548f239399483;
    }

    public function __sleep()
    {
        $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, '__sleep', array(), $this->initializer57d4e443654c0358213248);

        return array('valueHolder57d4e4436548f239399483');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443654c0358213248 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443654c0358213248;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443654c0358213248 && $this->initializer57d4e443654c0358213248->__invoke($this->valueHolder57d4e4436548f239399483, $this, 'initializeProxy', array(), $this->initializer57d4e443654c0358213248);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4436548f239399483;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4436548f239399483;
    }


}

class ElcodiComponentGeoEntityAddress_00000000047384de0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Geo\Entity\Address implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443660a7620040642 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443660b3673533291 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4436608b290668398 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setAddress', array('address' => $address), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getAddress', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddressMore($addressMore)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setAddressMore', array('addressMore' => $addressMore), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setAddressMore($addressMore);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddressMore()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getAddressMore', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getAddressMore();
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setComments', array('comments' => $comments), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getComments', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function setMobile($mobile)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setMobile', array('mobile' => $mobile), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setMobile($mobile);
    }

    /**
     * {@inheritDoc}
     */
    public function getMobile()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getMobile', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getMobile();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setName', array('name' => $name), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getName', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setPhone', array('phone' => $phone), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setPhone($phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getPhone', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecipientName($recipientName)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setRecipientName', array('recipientName' => $recipientName), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setRecipientName($recipientName);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecipientName()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getRecipientName', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getRecipientName();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecipientSurname($recipientSurname)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setRecipientSurname', array('recipientSurname' => $recipientSurname), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setRecipientSurname($recipientSurname);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecipientSurname()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getRecipientSurname', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getRecipientSurname();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity($city)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setCity', array('city' => $city), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getCity', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostalcode($postalCode)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setPostalcode', array('postalCode' => $postalCode), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setPostalcode($postalCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostalcode()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getPostalcode', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getPostalcode();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getId', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setId', array('id' => $id), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setCreatedAt', array('createdAt' => $createdAt), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getCreatedAt', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setUpdatedAt', array('updatedAt' => $updatedAt), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'getUpdatedAt', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'setEnabled', array('enabled' => $enabled), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'isEnabled', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function loadUpdateAt()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'loadUpdateAt', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->loadUpdateAt();
    }

    /**
     * {@inheritDoc}
     */
    public function enable()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'enable', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->enable();
    }

    /**
     * {@inheritDoc}
     */
    public function disable()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'disable', array(), $this->initializer57d4e443660b3673533291);

        return $this->valueHolder57d4e443660a7620040642->disable();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443660b3673533291 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__get', array('name' => $name), $this->initializer57d4e443660b3673533291);

        if (isset(self::$publicProperties57d4e4436608b290668398[$name])) {
            return $this->valueHolder57d4e443660a7620040642->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443660a7620040642;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443660a7620040642;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443660b3673533291);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443660a7620040642;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443660a7620040642;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__isset', array('name' => $name), $this->initializer57d4e443660b3673533291);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443660a7620040642;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443660a7620040642;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__unset', array('name' => $name), $this->initializer57d4e443660b3673533291);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443660a7620040642;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443660a7620040642;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__clone', array(), $this->initializer57d4e443660b3673533291);

        $this->valueHolder57d4e443660a7620040642 = clone $this->valueHolder57d4e443660a7620040642;
    }

    public function __sleep()
    {
        $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, '__sleep', array(), $this->initializer57d4e443660b3673533291);

        return array('valueHolder57d4e443660a7620040642');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443660b3673533291 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443660b3673533291;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443660b3673533291 && $this->initializer57d4e443660b3673533291->__invoke($this->valueHolder57d4e443660a7620040642, $this, 'initializeProxy', array(), $this->initializer57d4e443660b3673533291);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443660a7620040642;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443660a7620040642;
    }


}

class ElcodiComponentPluginEntityPlugin_00000000047384da0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Plugin\Entity\Plugin implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4436affc034323500 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4436b009227797645 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4436afe0108907254 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getNamespace()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getNamespace', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getNamespace();
    }

    /**
     * {@inheritDoc}
     */
    public function getBundleName()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getBundleName', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getBundleName();
    }

    /**
     * {@inheritDoc}
     */
    public function getBundleNamespaceRoot()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getBundleNamespaceRoot', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getBundleNamespaceRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getHash', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getType', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getCategory', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getConfiguration', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfigurationValue($configurationName)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getConfigurationValue', array('configurationName' => $configurationName), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getConfigurationValue($configurationName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFields()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getFields', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getFields();
    }

    /**
     * {@inheritDoc}
     */
    public function hasFields()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'hasFields', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->hasFields();
    }

    /**
     * {@inheritDoc}
     */
    public function getField($fieldName)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getField', array('fieldName' => $fieldName), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getField($fieldName);
    }

    /**
     * {@inheritDoc}
     */
    public function hasField($fieldName)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'hasField', array('fieldName' => $fieldName), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->hasField($fieldName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldValues()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getFieldValues', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getFieldValues();
    }

    /**
     * {@inheritDoc}
     */
    public function getFieldValue($fieldName)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'getFieldValue', array('fieldName' => $fieldName), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->getFieldValue($fieldName);
    }

    /**
     * {@inheritDoc}
     */
    public function setFieldValues(array $fieldValues)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'setFieldValues', array('fieldValues' => $fieldValues), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->setFieldValues($fieldValues);
    }

    /**
     * {@inheritDoc}
     */
    public function isUsable(array $requiredFields = array())
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'isUsable', array('requiredFields' => $requiredFields), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->isUsable($requiredFields);
    }

    /**
     * {@inheritDoc}
     */
    public function guessIsUsable()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'guessIsUsable', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->guessIsUsable();
    }

    /**
     * {@inheritDoc}
     */
    public function merge(\Elcodi\Component\Plugin\Entity\Plugin $newPlugin)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'merge', array('newPlugin' => $newPlugin), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->merge($newPlugin);
    }

    /**
     * {@inheritDoc}
     */
    public function exists()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'exists', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->exists();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'setEnabled', array('enabled' => $enabled), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'isEnabled', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function enable()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'enable', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->enable();
    }

    /**
     * {@inheritDoc}
     */
    public function disable()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'disable', array(), $this->initializer57d4e4436b009227797645);

        return $this->valueHolder57d4e4436affc034323500->disable();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4436b009227797645 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__get', array('name' => $name), $this->initializer57d4e4436b009227797645);

        if (isset(self::$publicProperties57d4e4436afe0108907254[$name])) {
            return $this->valueHolder57d4e4436affc034323500->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436affc034323500;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436affc034323500;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4436b009227797645);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436affc034323500;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436affc034323500;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__isset', array('name' => $name), $this->initializer57d4e4436b009227797645);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436affc034323500;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436affc034323500;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__unset', array('name' => $name), $this->initializer57d4e4436b009227797645);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436affc034323500;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436affc034323500;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__clone', array(), $this->initializer57d4e4436b009227797645);

        $this->valueHolder57d4e4436affc034323500 = clone $this->valueHolder57d4e4436affc034323500;
    }

    public function __sleep()
    {
        $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, '__sleep', array(), $this->initializer57d4e4436b009227797645);

        return array('valueHolder57d4e4436affc034323500');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4436b009227797645 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4436b009227797645;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4436b009227797645 && $this->initializer57d4e4436b009227797645->__invoke($this->valueHolder57d4e4436affc034323500, $this, 'initializeProxy', array(), $this->initializer57d4e4436b009227797645);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4436affc034323500;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4436affc034323500;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473844e0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4436fad4649390107 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4436fae6653854154 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4436faaa402841413 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'find', array('id' => $id), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'findAll', array(), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'create', array(), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'save', array('data' => $data), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'remove', array('data' => $data), $this->initializer57d4e4436fae6653854154);

        return $this->valueHolder57d4e4436fad4649390107->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4436fae6653854154 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__get', array('name' => $name), $this->initializer57d4e4436fae6653854154);

        if (isset(self::$publicProperties57d4e4436faaa402841413[$name])) {
            return $this->valueHolder57d4e4436fad4649390107->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436fad4649390107;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436fad4649390107;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4436fae6653854154);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436fad4649390107;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436fad4649390107;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__isset', array('name' => $name), $this->initializer57d4e4436fae6653854154);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436fad4649390107;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436fad4649390107;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__unset', array('name' => $name), $this->initializer57d4e4436fae6653854154);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4436fad4649390107;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4436fad4649390107;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__clone', array(), $this->initializer57d4e4436fae6653854154);

        $this->valueHolder57d4e4436fad4649390107 = clone $this->valueHolder57d4e4436fad4649390107;
    }

    public function __sleep()
    {
        $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, '__sleep', array(), $this->initializer57d4e4436fae6653854154);

        return array('valueHolder57d4e4436fad4649390107');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4436fae6653854154 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4436fae6653854154;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4436fae6653854154 && $this->initializer57d4e4436fae6653854154->__invoke($this->valueHolder57d4e4436fad4649390107, $this, 'initializeProxy', array(), $this->initializer57d4e4436fae6653854154);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4436fad4649390107;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4436fad4649390107;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473844b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44371985556638439 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44371993683037214 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44371964032690809 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'find', array('id' => $id), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'findAll', array(), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'create', array(), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'save', array('data' => $data), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'remove', array('data' => $data), $this->initializer57d4e44371993683037214);

        return $this->valueHolder57d4e44371985556638439->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44371993683037214 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__get', array('name' => $name), $this->initializer57d4e44371993683037214);

        if (isset(self::$publicProperties57d4e44371964032690809[$name])) {
            return $this->valueHolder57d4e44371985556638439->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44371985556638439;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44371985556638439;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44371993683037214);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44371985556638439;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44371985556638439;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__isset', array('name' => $name), $this->initializer57d4e44371993683037214);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44371985556638439;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44371985556638439;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__unset', array('name' => $name), $this->initializer57d4e44371993683037214);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44371985556638439;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44371985556638439;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__clone', array(), $this->initializer57d4e44371993683037214);

        $this->valueHolder57d4e44371985556638439 = clone $this->valueHolder57d4e44371985556638439;
    }

    public function __sleep()
    {
        $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, '__sleep', array(), $this->initializer57d4e44371993683037214);

        return array('valueHolder57d4e44371985556638439');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44371993683037214 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44371993683037214;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44371993683037214 && $this->initializer57d4e44371993683037214->__invoke($this->valueHolder57d4e44371985556638439, $this, 'initializeProxy', array(), $this->initializer57d4e44371993683037214);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44371985556638439;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44371985556638439;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739bdb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443733fc228191782 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4437340a913545524 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e443733dc878326682 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'find', array('id' => $id), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'findAll', array(), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'create', array(), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'save', array('data' => $data), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'remove', array('data' => $data), $this->initializer57d4e4437340a913545524);

        return $this->valueHolder57d4e443733fc228191782->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4437340a913545524 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__get', array('name' => $name), $this->initializer57d4e4437340a913545524);

        if (isset(self::$publicProperties57d4e443733dc878326682[$name])) {
            return $this->valueHolder57d4e443733fc228191782->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443733fc228191782;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443733fc228191782;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4437340a913545524);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443733fc228191782;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443733fc228191782;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__isset', array('name' => $name), $this->initializer57d4e4437340a913545524);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443733fc228191782;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443733fc228191782;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__unset', array('name' => $name), $this->initializer57d4e4437340a913545524);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443733fc228191782;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443733fc228191782;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__clone', array(), $this->initializer57d4e4437340a913545524);

        $this->valueHolder57d4e443733fc228191782 = clone $this->valueHolder57d4e443733fc228191782;
    }

    public function __sleep()
    {
        $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, '__sleep', array(), $this->initializer57d4e4437340a913545524);

        return array('valueHolder57d4e443733fc228191782');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4437340a913545524 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4437340a913545524;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4437340a913545524 && $this->initializer57d4e4437340a913545524->__invoke($this->valueHolder57d4e443733fc228191782, $this, 'initializeProxy', array(), $this->initializer57d4e4437340a913545524);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443733fc228191782;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443733fc228191782;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739bd70000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44375538292472572 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44375544715143513 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4437551e880509703 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'find', array('id' => $id), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'findAll', array(), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'create', array(), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'save', array('data' => $data), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'remove', array('data' => $data), $this->initializer57d4e44375544715143513);

        return $this->valueHolder57d4e44375538292472572->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44375544715143513 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__get', array('name' => $name), $this->initializer57d4e44375544715143513);

        if (isset(self::$publicProperties57d4e4437551e880509703[$name])) {
            return $this->valueHolder57d4e44375538292472572->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44375538292472572;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44375538292472572;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44375544715143513);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44375538292472572;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44375538292472572;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__isset', array('name' => $name), $this->initializer57d4e44375544715143513);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44375538292472572;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44375538292472572;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__unset', array('name' => $name), $this->initializer57d4e44375544715143513);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44375538292472572;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44375538292472572;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__clone', array(), $this->initializer57d4e44375544715143513);

        $this->valueHolder57d4e44375538292472572 = clone $this->valueHolder57d4e44375538292472572;
    }

    public function __sleep()
    {
        $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, '__sleep', array(), $this->initializer57d4e44375544715143513);

        return array('valueHolder57d4e44375538292472572');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44375544715143513 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44375544715143513;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44375544715143513 && $this->initializer57d4e44375544715143513->__invoke($this->valueHolder57d4e44375538292472572, $this, 'initializeProxy', array(), $this->initializer57d4e44375544715143513);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44375538292472572;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44375538292472572;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739bd30000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44377274407318993 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4437728d910495894 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44377254323494698 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'find', array('id' => $id), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'findAll', array(), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'create', array(), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'save', array('data' => $data), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'remove', array('data' => $data), $this->initializer57d4e4437728d910495894);

        return $this->valueHolder57d4e44377274407318993->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4437728d910495894 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__get', array('name' => $name), $this->initializer57d4e4437728d910495894);

        if (isset(self::$publicProperties57d4e44377254323494698[$name])) {
            return $this->valueHolder57d4e44377274407318993->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44377274407318993;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44377274407318993;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4437728d910495894);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44377274407318993;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44377274407318993;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__isset', array('name' => $name), $this->initializer57d4e4437728d910495894);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44377274407318993;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44377274407318993;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__unset', array('name' => $name), $this->initializer57d4e4437728d910495894);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44377274407318993;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44377274407318993;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__clone', array(), $this->initializer57d4e4437728d910495894);

        $this->valueHolder57d4e44377274407318993 = clone $this->valueHolder57d4e44377274407318993;
    }

    public function __sleep()
    {
        $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, '__sleep', array(), $this->initializer57d4e4437728d910495894);

        return array('valueHolder57d4e44377274407318993');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4437728d910495894 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4437728d910495894;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4437728d910495894 && $this->initializer57d4e4437728d910495894->__invoke($this->valueHolder57d4e44377274407318993, $this, 'initializeProxy', array(), $this->initializer57d4e4437728d910495894);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44377274407318993;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44377274407318993;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739b2f0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44378ca6836325416 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44378cb1053544879 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44378c8f252544183 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'find', array('id' => $id), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'findAll', array(), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'create', array(), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'save', array('data' => $data), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'remove', array('data' => $data), $this->initializer57d4e44378cb1053544879);

        return $this->valueHolder57d4e44378ca6836325416->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44378cb1053544879 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__get', array('name' => $name), $this->initializer57d4e44378cb1053544879);

        if (isset(self::$publicProperties57d4e44378c8f252544183[$name])) {
            return $this->valueHolder57d4e44378ca6836325416->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44378ca6836325416;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44378ca6836325416;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44378cb1053544879);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44378ca6836325416;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44378ca6836325416;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__isset', array('name' => $name), $this->initializer57d4e44378cb1053544879);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44378ca6836325416;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44378ca6836325416;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__unset', array('name' => $name), $this->initializer57d4e44378cb1053544879);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44378ca6836325416;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44378ca6836325416;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__clone', array(), $this->initializer57d4e44378cb1053544879);

        $this->valueHolder57d4e44378ca6836325416 = clone $this->valueHolder57d4e44378ca6836325416;
    }

    public function __sleep()
    {
        $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, '__sleep', array(), $this->initializer57d4e44378cb1053544879);

        return array('valueHolder57d4e44378ca6836325416');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44378cb1053544879 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44378cb1053544879;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44378cb1053544879 && $this->initializer57d4e44378cb1053544879->__invoke($this->valueHolder57d4e44378ca6836325416, $this, 'initializeProxy', array(), $this->initializer57d4e44378cb1053544879);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44378ca6836325416;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44378ca6836325416;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739b2b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4437a53b741846707 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4437a545452034729 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4437a525506011600 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'find', array('id' => $id), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'findAll', array(), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'create', array(), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'save', array('data' => $data), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'remove', array('data' => $data), $this->initializer57d4e4437a545452034729);

        return $this->valueHolder57d4e4437a53b741846707->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4437a545452034729 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__get', array('name' => $name), $this->initializer57d4e4437a545452034729);

        if (isset(self::$publicProperties57d4e4437a525506011600[$name])) {
            return $this->valueHolder57d4e4437a53b741846707->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437a53b741846707;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437a53b741846707;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4437a545452034729);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437a53b741846707;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437a53b741846707;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__isset', array('name' => $name), $this->initializer57d4e4437a545452034729);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437a53b741846707;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437a53b741846707;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__unset', array('name' => $name), $this->initializer57d4e4437a545452034729);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437a53b741846707;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437a53b741846707;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__clone', array(), $this->initializer57d4e4437a545452034729);

        $this->valueHolder57d4e4437a53b741846707 = clone $this->valueHolder57d4e4437a53b741846707;
    }

    public function __sleep()
    {
        $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, '__sleep', array(), $this->initializer57d4e4437a545452034729);

        return array('valueHolder57d4e4437a53b741846707');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4437a545452034729 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4437a545452034729;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4437a545452034729 && $this->initializer57d4e4437a545452034729->__invoke($this->valueHolder57d4e4437a53b741846707, $this, 'initializeProxy', array(), $this->initializer57d4e4437a545452034729);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4437a53b741846707;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4437a53b741846707;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739b610000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4437c5d1946027083 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4437c5de068735655 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4437c5b0774571568 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'find', array('id' => $id), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'findAll', array(), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'create', array(), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'save', array('data' => $data), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'remove', array('data' => $data), $this->initializer57d4e4437c5de068735655);

        return $this->valueHolder57d4e4437c5d1946027083->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4437c5de068735655 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__get', array('name' => $name), $this->initializer57d4e4437c5de068735655);

        if (isset(self::$publicProperties57d4e4437c5b0774571568[$name])) {
            return $this->valueHolder57d4e4437c5d1946027083->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437c5d1946027083;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437c5d1946027083;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4437c5de068735655);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437c5d1946027083;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437c5d1946027083;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__isset', array('name' => $name), $this->initializer57d4e4437c5de068735655);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437c5d1946027083;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437c5d1946027083;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__unset', array('name' => $name), $this->initializer57d4e4437c5de068735655);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437c5d1946027083;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437c5d1946027083;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__clone', array(), $this->initializer57d4e4437c5de068735655);

        $this->valueHolder57d4e4437c5d1946027083 = clone $this->valueHolder57d4e4437c5d1946027083;
    }

    public function __sleep()
    {
        $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, '__sleep', array(), $this->initializer57d4e4437c5de068735655);

        return array('valueHolder57d4e4437c5d1946027083');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4437c5de068735655 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4437c5de068735655;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4437c5de068735655 && $this->initializer57d4e4437c5de068735655->__invoke($this->valueHolder57d4e4437c5d1946027083, $this, 'initializeProxy', array(), $this->initializer57d4e4437c5de068735655);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4437c5d1946027083;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4437c5d1946027083;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739a6b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4437e0ec940801975 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4437e0f8276977004 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4437e0d0048307916 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'find', array('id' => $id), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'findAll', array(), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'create', array(), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'save', array('data' => $data), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'remove', array('data' => $data), $this->initializer57d4e4437e0f8276977004);

        return $this->valueHolder57d4e4437e0ec940801975->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4437e0f8276977004 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__get', array('name' => $name), $this->initializer57d4e4437e0f8276977004);

        if (isset(self::$publicProperties57d4e4437e0d0048307916[$name])) {
            return $this->valueHolder57d4e4437e0ec940801975->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437e0ec940801975;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437e0ec940801975;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4437e0f8276977004);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437e0ec940801975;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437e0ec940801975;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__isset', array('name' => $name), $this->initializer57d4e4437e0f8276977004);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437e0ec940801975;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437e0ec940801975;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__unset', array('name' => $name), $this->initializer57d4e4437e0f8276977004);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4437e0ec940801975;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4437e0ec940801975;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__clone', array(), $this->initializer57d4e4437e0f8276977004);

        $this->valueHolder57d4e4437e0ec940801975 = clone $this->valueHolder57d4e4437e0ec940801975;
    }

    public function __sleep()
    {
        $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, '__sleep', array(), $this->initializer57d4e4437e0f8276977004);

        return array('valueHolder57d4e4437e0ec940801975');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4437e0f8276977004 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4437e0f8276977004;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4437e0f8276977004 && $this->initializer57d4e4437e0f8276977004->__invoke($this->valueHolder57d4e4437e0ec940801975, $this, 'initializeProxy', array(), $this->initializer57d4e4437e0f8276977004);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4437e0ec940801975;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4437e0ec940801975;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739a4b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443800dc199851108 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443800eb565640272 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e443800b6511466983 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'find', array('id' => $id), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'findAll', array(), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'create', array(), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'save', array('data' => $data), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'remove', array('data' => $data), $this->initializer57d4e443800eb565640272);

        return $this->valueHolder57d4e443800dc199851108->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443800eb565640272 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__get', array('name' => $name), $this->initializer57d4e443800eb565640272);

        if (isset(self::$publicProperties57d4e443800b6511466983[$name])) {
            return $this->valueHolder57d4e443800dc199851108->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443800dc199851108;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443800dc199851108;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443800eb565640272);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443800dc199851108;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443800dc199851108;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__isset', array('name' => $name), $this->initializer57d4e443800eb565640272);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443800dc199851108;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443800dc199851108;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__unset', array('name' => $name), $this->initializer57d4e443800eb565640272);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443800dc199851108;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443800dc199851108;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__clone', array(), $this->initializer57d4e443800eb565640272);

        $this->valueHolder57d4e443800dc199851108 = clone $this->valueHolder57d4e443800dc199851108;
    }

    public function __sleep()
    {
        $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, '__sleep', array(), $this->initializer57d4e443800eb565640272);

        return array('valueHolder57d4e443800dc199851108');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443800eb565640272 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443800eb565640272;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443800eb565640272 && $this->initializer57d4e443800eb565640272->__invoke($this->valueHolder57d4e443800dc199851108, $this, 'initializeProxy', array(), $this->initializer57d4e443800eb565640272);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443800dc199851108;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443800dc199851108;
    }


}

class ElcodiComponentEntityTranslatorServicesEntityTranslationProvider_00000000047399850000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\EntityTranslator\Services\EntityTranslationProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44381aad518119903 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44381ab8344178488 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44381a95463484630 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function getTranslation($entityType, $entityId, $entityField, $locale)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, 'getTranslation', array('entityType' => $entityType, 'entityId' => $entityId, 'entityField' => $entityField, 'locale' => $locale), $this->initializer57d4e44381ab8344178488);

        return $this->valueHolder57d4e44381aad518119903->getTranslation($entityType, $entityId, $entityField, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslation($entityType, $entityId, $entityField, $translationValue, $locale)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, 'setTranslation', array('entityType' => $entityType, 'entityId' => $entityId, 'entityField' => $entityField, 'translationValue' => $translationValue, 'locale' => $locale), $this->initializer57d4e44381ab8344178488);

        return $this->valueHolder57d4e44381aad518119903->setTranslation($entityType, $entityId, $entityField, $translationValue, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function flushTranslations()
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, 'flushTranslations', array(), $this->initializer57d4e44381ab8344178488);

        return $this->valueHolder57d4e44381aad518119903->flushTranslations();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44381ab8344178488 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__get', array('name' => $name), $this->initializer57d4e44381ab8344178488);

        if (isset(self::$publicProperties57d4e44381a95463484630[$name])) {
            return $this->valueHolder57d4e44381aad518119903->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44381aad518119903;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44381aad518119903;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44381ab8344178488);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44381aad518119903;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44381aad518119903;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__isset', array('name' => $name), $this->initializer57d4e44381ab8344178488);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44381aad518119903;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44381aad518119903;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__unset', array('name' => $name), $this->initializer57d4e44381ab8344178488);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44381aad518119903;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44381aad518119903;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__clone', array(), $this->initializer57d4e44381ab8344178488);

        $this->valueHolder57d4e44381aad518119903 = clone $this->valueHolder57d4e44381aad518119903;
    }

    public function __sleep()
    {
        $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, '__sleep', array(), $this->initializer57d4e44381ab8344178488);

        return array('valueHolder57d4e44381aad518119903');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44381ab8344178488 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44381ab8344178488;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44381ab8344178488 && $this->initializer57d4e44381ab8344178488->__invoke($this->valueHolder57d4e44381aad518119903, $this, 'initializeProxy', array(), $this->initializer57d4e44381ab8344178488);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44381aad518119903;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44381aad518119903;
    }


}

class ElcodiComponentEntityTranslatorEventListenerEntityTranslatorEntityEventListener_00000000047399ed0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\EntityTranslator\EventListener\EntityTranslatorEntityEventListener implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44382bc5864489844 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44382bd1511502950 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44382bac986707602 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function postLoad(\Doctrine\ORM\Event\LifecycleEventArgs $args)
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, 'postLoad', array('args' => $args), $this->initializer57d4e44382bd1511502950);

        return $this->valueHolder57d4e44382bc5864489844->postLoad($args);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44382bd1511502950 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__get', array('name' => $name), $this->initializer57d4e44382bd1511502950);

        if (isset(self::$publicProperties57d4e44382bac986707602[$name])) {
            return $this->valueHolder57d4e44382bc5864489844->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44382bc5864489844;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44382bc5864489844;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44382bd1511502950);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44382bc5864489844;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44382bc5864489844;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__isset', array('name' => $name), $this->initializer57d4e44382bd1511502950);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44382bc5864489844;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44382bc5864489844;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__unset', array('name' => $name), $this->initializer57d4e44382bd1511502950);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44382bc5864489844;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44382bc5864489844;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__clone', array(), $this->initializer57d4e44382bd1511502950);

        $this->valueHolder57d4e44382bc5864489844 = clone $this->valueHolder57d4e44382bc5864489844;
    }

    public function __sleep()
    {
        $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, '__sleep', array(), $this->initializer57d4e44382bd1511502950);

        return array('valueHolder57d4e44382bc5864489844');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44382bd1511502950 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44382bd1511502950;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44382bd1511502950 && $this->initializer57d4e44382bd1511502950->__invoke($this->valueHolder57d4e44382bc5864489844, $this, 'initializeProxy', array(), $this->initializer57d4e44382bd1511502950);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44382bc5864489844;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44382bc5864489844;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047399e90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4438328c390528352 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44383295815932256 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44383277782821336 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'find', array('id' => $id), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'findAll', array(), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'create', array(), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'save', array('data' => $data), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'remove', array('data' => $data), $this->initializer57d4e44383295815932256);

        return $this->valueHolder57d4e4438328c390528352->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44383295815932256 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__get', array('name' => $name), $this->initializer57d4e44383295815932256);

        if (isset(self::$publicProperties57d4e44383277782821336[$name])) {
            return $this->valueHolder57d4e4438328c390528352->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438328c390528352;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438328c390528352;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44383295815932256);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438328c390528352;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438328c390528352;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__isset', array('name' => $name), $this->initializer57d4e44383295815932256);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438328c390528352;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438328c390528352;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__unset', array('name' => $name), $this->initializer57d4e44383295815932256);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438328c390528352;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438328c390528352;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__clone', array(), $this->initializer57d4e44383295815932256);

        $this->valueHolder57d4e4438328c390528352 = clone $this->valueHolder57d4e4438328c390528352;
    }

    public function __sleep()
    {
        $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, '__sleep', array(), $this->initializer57d4e44383295815932256);

        return array('valueHolder57d4e4438328c390528352');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44383295815932256 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44383295815932256;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44383295815932256 && $this->initializer57d4e44383295815932256->__invoke($this->valueHolder57d4e4438328c390528352, $this, 'initializeProxy', array(), $this->initializer57d4e44383295815932256);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4438328c390528352;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4438328c390528352;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047399250000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44384e9f168823279 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44384ead821157544 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44384e7c045990198 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'find', array('id' => $id), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'findAll', array(), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'create', array(), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'save', array('data' => $data), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'remove', array('data' => $data), $this->initializer57d4e44384ead821157544);

        return $this->valueHolder57d4e44384e9f168823279->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44384ead821157544 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__get', array('name' => $name), $this->initializer57d4e44384ead821157544);

        if (isset(self::$publicProperties57d4e44384e7c045990198[$name])) {
            return $this->valueHolder57d4e44384e9f168823279->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44384e9f168823279;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44384e9f168823279;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44384ead821157544);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44384e9f168823279;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44384e9f168823279;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__isset', array('name' => $name), $this->initializer57d4e44384ead821157544);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44384e9f168823279;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44384e9f168823279;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__unset', array('name' => $name), $this->initializer57d4e44384ead821157544);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44384e9f168823279;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44384e9f168823279;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__clone', array(), $this->initializer57d4e44384ead821157544);

        $this->valueHolder57d4e44384e9f168823279 = clone $this->valueHolder57d4e44384e9f168823279;
    }

    public function __sleep()
    {
        $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, '__sleep', array(), $this->initializer57d4e44384ead821157544);

        return array('valueHolder57d4e44384e9f168823279');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44384ead821157544 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44384ead821157544;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44384ead821157544 && $this->initializer57d4e44384ead821157544->__invoke($this->valueHolder57d4e44384e9f168823279, $this, 'initializeProxy', array(), $this->initializer57d4e44384ead821157544);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44384e9f168823279;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44384e9f168823279;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047399220000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44386aca551873721 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44386ad7391486275 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44386aaa210876156 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'find', array('id' => $id), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'findAll', array(), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'create', array(), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'save', array('data' => $data), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'remove', array('data' => $data), $this->initializer57d4e44386ad7391486275);

        return $this->valueHolder57d4e44386aca551873721->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44386ad7391486275 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__get', array('name' => $name), $this->initializer57d4e44386ad7391486275);

        if (isset(self::$publicProperties57d4e44386aaa210876156[$name])) {
            return $this->valueHolder57d4e44386aca551873721->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44386aca551873721;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44386aca551873721;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44386ad7391486275);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44386aca551873721;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44386aca551873721;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__isset', array('name' => $name), $this->initializer57d4e44386ad7391486275);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44386aca551873721;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44386aca551873721;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__unset', array('name' => $name), $this->initializer57d4e44386ad7391486275);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44386aca551873721;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44386aca551873721;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__clone', array(), $this->initializer57d4e44386ad7391486275);

        $this->valueHolder57d4e44386aca551873721 = clone $this->valueHolder57d4e44386aca551873721;
    }

    public function __sleep()
    {
        $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, '__sleep', array(), $this->initializer57d4e44386ad7391486275);

        return array('valueHolder57d4e44386aca551873721');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44386ad7391486275 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44386ad7391486275;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44386ad7391486275 && $this->initializer57d4e44386ad7391486275->__invoke($this->valueHolder57d4e44386aca551873721, $this, 'initializeProxy', array(), $this->initializer57d4e44386ad7391486275);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44386aca551873721;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44386aca551873721;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047392820000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44388972367435262 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4438897f943434194 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44388952964460939 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'find', array('id' => $id), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'findAll', array(), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'create', array(), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'save', array('data' => $data), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'remove', array('data' => $data), $this->initializer57d4e4438897f943434194);

        return $this->valueHolder57d4e44388972367435262->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4438897f943434194 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__get', array('name' => $name), $this->initializer57d4e4438897f943434194);

        if (isset(self::$publicProperties57d4e44388952964460939[$name])) {
            return $this->valueHolder57d4e44388972367435262->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44388972367435262;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44388972367435262;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4438897f943434194);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44388972367435262;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44388972367435262;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__isset', array('name' => $name), $this->initializer57d4e4438897f943434194);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44388972367435262;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44388972367435262;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__unset', array('name' => $name), $this->initializer57d4e4438897f943434194);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44388972367435262;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44388972367435262;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__clone', array(), $this->initializer57d4e4438897f943434194);

        $this->valueHolder57d4e44388972367435262 = clone $this->valueHolder57d4e44388972367435262;
    }

    public function __sleep()
    {
        $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, '__sleep', array(), $this->initializer57d4e4438897f943434194);

        return array('valueHolder57d4e44388972367435262');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4438897f943434194 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4438897f943434194;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4438897f943434194 && $this->initializer57d4e4438897f943434194->__invoke($this->valueHolder57d4e44388972367435262, $this, 'initializeProxy', array(), $this->initializer57d4e4438897f943434194);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44388972367435262;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44388972367435262;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473929f0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4438a3a3838162418 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4438a3ae564376607 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4438a38b020314754 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'find', array('id' => $id), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'findAll', array(), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'create', array(), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'save', array('data' => $data), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'remove', array('data' => $data), $this->initializer57d4e4438a3ae564376607);

        return $this->valueHolder57d4e4438a3a3838162418->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4438a3ae564376607 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__get', array('name' => $name), $this->initializer57d4e4438a3ae564376607);

        if (isset(self::$publicProperties57d4e4438a38b020314754[$name])) {
            return $this->valueHolder57d4e4438a3a3838162418->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438a3a3838162418;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438a3a3838162418;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4438a3ae564376607);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438a3a3838162418;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438a3a3838162418;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__isset', array('name' => $name), $this->initializer57d4e4438a3ae564376607);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438a3a3838162418;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438a3a3838162418;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__unset', array('name' => $name), $this->initializer57d4e4438a3ae564376607);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438a3a3838162418;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438a3a3838162418;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__clone', array(), $this->initializer57d4e4438a3ae564376607);

        $this->valueHolder57d4e4438a3a3838162418 = clone $this->valueHolder57d4e4438a3a3838162418;
    }

    public function __sleep()
    {
        $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, '__sleep', array(), $this->initializer57d4e4438a3ae564376607);

        return array('valueHolder57d4e4438a3a3838162418');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4438a3ae564376607 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4438a3ae564376607;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4438a3ae564376607 && $this->initializer57d4e4438a3ae564376607->__invoke($this->valueHolder57d4e4438a3a3838162418, $this, 'initializeProxy', array(), $this->initializer57d4e4438a3ae564376607);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4438a3a3838162418;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4438a3a3838162418;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047392dc0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4438bff8942482563 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4438c005134158253 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4438bfdb098382832 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'find', array('id' => $id), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'findAll', array(), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'create', array(), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'save', array('data' => $data), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'remove', array('data' => $data), $this->initializer57d4e4438c005134158253);

        return $this->valueHolder57d4e4438bff8942482563->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4438c005134158253 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__get', array('name' => $name), $this->initializer57d4e4438c005134158253);

        if (isset(self::$publicProperties57d4e4438bfdb098382832[$name])) {
            return $this->valueHolder57d4e4438bff8942482563->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438bff8942482563;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438bff8942482563;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4438c005134158253);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438bff8942482563;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438bff8942482563;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__isset', array('name' => $name), $this->initializer57d4e4438c005134158253);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438bff8942482563;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438bff8942482563;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__unset', array('name' => $name), $this->initializer57d4e4438c005134158253);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438bff8942482563;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438bff8942482563;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__clone', array(), $this->initializer57d4e4438c005134158253);

        $this->valueHolder57d4e4438bff8942482563 = clone $this->valueHolder57d4e4438bff8942482563;
    }

    public function __sleep()
    {
        $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, '__sleep', array(), $this->initializer57d4e4438c005134158253);

        return array('valueHolder57d4e4438bff8942482563');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4438c005134158253 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4438c005134158253;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4438c005134158253 && $this->initializer57d4e4438c005134158253->__invoke($this->valueHolder57d4e4438bff8942482563, $this, 'initializeProxy', array(), $this->initializer57d4e4438c005134158253);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4438bff8942482563;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4438bff8942482563;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047392d90000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4438e3ca937814594 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4438e3d8229882316 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4438e3ab881048521 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'find', array('id' => $id), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'findAll', array(), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'create', array(), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'save', array('data' => $data), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'remove', array('data' => $data), $this->initializer57d4e4438e3d8229882316);

        return $this->valueHolder57d4e4438e3ca937814594->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4438e3d8229882316 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__get', array('name' => $name), $this->initializer57d4e4438e3d8229882316);

        if (isset(self::$publicProperties57d4e4438e3ab881048521[$name])) {
            return $this->valueHolder57d4e4438e3ca937814594->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438e3ca937814594;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438e3ca937814594;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4438e3d8229882316);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438e3ca937814594;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438e3ca937814594;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__isset', array('name' => $name), $this->initializer57d4e4438e3d8229882316);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438e3ca937814594;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438e3ca937814594;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__unset', array('name' => $name), $this->initializer57d4e4438e3d8229882316);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438e3ca937814594;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438e3ca937814594;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__clone', array(), $this->initializer57d4e4438e3d8229882316);

        $this->valueHolder57d4e4438e3ca937814594 = clone $this->valueHolder57d4e4438e3ca937814594;
    }

    public function __sleep()
    {
        $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, '__sleep', array(), $this->initializer57d4e4438e3d8229882316);

        return array('valueHolder57d4e4438e3ca937814594');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4438e3d8229882316 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4438e3d8229882316;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4438e3d8229882316 && $this->initializer57d4e4438e3d8229882316->__invoke($this->valueHolder57d4e4438e3ca937814594, $this, 'initializeProxy', array(), $this->initializer57d4e4438e3d8229882316);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4438e3ca937814594;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4438e3ca937814594;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473920c0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4438fee7819559732 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4438fef5687680313 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4438fec7603392987 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'find', array('id' => $id), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'findAll', array(), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'create', array(), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'save', array('data' => $data), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'remove', array('data' => $data), $this->initializer57d4e4438fef5687680313);

        return $this->valueHolder57d4e4438fee7819559732->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4438fef5687680313 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__get', array('name' => $name), $this->initializer57d4e4438fef5687680313);

        if (isset(self::$publicProperties57d4e4438fec7603392987[$name])) {
            return $this->valueHolder57d4e4438fee7819559732->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438fee7819559732;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438fee7819559732;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4438fef5687680313);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438fee7819559732;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438fee7819559732;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__isset', array('name' => $name), $this->initializer57d4e4438fef5687680313);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438fee7819559732;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438fee7819559732;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__unset', array('name' => $name), $this->initializer57d4e4438fef5687680313);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4438fee7819559732;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4438fee7819559732;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__clone', array(), $this->initializer57d4e4438fef5687680313);

        $this->valueHolder57d4e4438fee7819559732 = clone $this->valueHolder57d4e4438fee7819559732;
    }

    public function __sleep()
    {
        $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, '__sleep', array(), $this->initializer57d4e4438fef5687680313);

        return array('valueHolder57d4e4438fee7819559732');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4438fef5687680313 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4438fef5687680313;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4438fef5687680313 && $this->initializer57d4e4438fef5687680313->__invoke($this->valueHolder57d4e4438fee7819559732, $this, 'initializeProxy', array(), $this->initializer57d4e4438fef5687680313);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4438fee7819559732;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4438fee7819559732;
    }


}

class ElcodiComponentCoreServicesObjectDirector_000000000473927b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44391855568401778 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4439185f476755925 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4439183d412819557 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'find', array('id' => $id), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'findAll', array(), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'create', array(), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'save', array('data' => $data), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'remove', array('data' => $data), $this->initializer57d4e4439185f476755925);

        return $this->valueHolder57d4e44391855568401778->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4439185f476755925 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__get', array('name' => $name), $this->initializer57d4e4439185f476755925);

        if (isset(self::$publicProperties57d4e4439183d412819557[$name])) {
            return $this->valueHolder57d4e44391855568401778->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44391855568401778;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44391855568401778;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4439185f476755925);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44391855568401778;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44391855568401778;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__isset', array('name' => $name), $this->initializer57d4e4439185f476755925);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44391855568401778;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44391855568401778;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__unset', array('name' => $name), $this->initializer57d4e4439185f476755925);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44391855568401778;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44391855568401778;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__clone', array(), $this->initializer57d4e4439185f476755925);

        $this->valueHolder57d4e44391855568401778 = clone $this->valueHolder57d4e44391855568401778;
    }

    public function __sleep()
    {
        $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, '__sleep', array(), $this->initializer57d4e4439185f476755925);

        return array('valueHolder57d4e44391855568401778');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4439185f476755925 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4439185f476755925;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4439185f476755925 && $this->initializer57d4e4439185f476755925->__invoke($this->valueHolder57d4e44391855568401778, $this, 'initializeProxy', array(), $this->initializer57d4e4439185f476755925);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44391855568401778;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44391855568401778;
    }


}

class ElcodiComponentMetricCoreServicesMetricLoader_00000000047392570000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Metric\Core\Services\MetricLoader implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44393fb4056297595 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44393fc5069946318 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44393f8c704651386 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function loadEntriesFromLastDays($days)
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, 'loadEntriesFromLastDays', array('days' => $days), $this->initializer57d4e44393fc5069946318);

        return $this->valueHolder57d4e44393fb4056297595->loadEntriesFromLastDays($days);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44393fc5069946318 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__get', array('name' => $name), $this->initializer57d4e44393fc5069946318);

        if (isset(self::$publicProperties57d4e44393f8c704651386[$name])) {
            return $this->valueHolder57d4e44393fb4056297595->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44393fb4056297595;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44393fb4056297595;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44393fc5069946318);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44393fb4056297595;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44393fb4056297595;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__isset', array('name' => $name), $this->initializer57d4e44393fc5069946318);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44393fb4056297595;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44393fb4056297595;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__unset', array('name' => $name), $this->initializer57d4e44393fc5069946318);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44393fb4056297595;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44393fb4056297595;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__clone', array(), $this->initializer57d4e44393fc5069946318);

        $this->valueHolder57d4e44393fb4056297595 = clone $this->valueHolder57d4e44393fb4056297595;
    }

    public function __sleep()
    {
        $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, '__sleep', array(), $this->initializer57d4e44393fc5069946318);

        return array('valueHolder57d4e44393fb4056297595');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44393fc5069946318 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44393fc5069946318;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44393fc5069946318 && $this->initializer57d4e44393fc5069946318->__invoke($this->valueHolder57d4e44393fb4056297595, $this, 'initializeProxy', array(), $this->initializer57d4e44393fc5069946318);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44393fb4056297595;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44393fb4056297595;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047391fb0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44394602622190098 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4439460e890372529 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e443945ea491924460 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'find', array('id' => $id), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'findAll', array(), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'create', array(), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'save', array('data' => $data), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'remove', array('data' => $data), $this->initializer57d4e4439460e890372529);

        return $this->valueHolder57d4e44394602622190098->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4439460e890372529 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__get', array('name' => $name), $this->initializer57d4e4439460e890372529);

        if (isset(self::$publicProperties57d4e443945ea491924460[$name])) {
            return $this->valueHolder57d4e44394602622190098->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44394602622190098;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44394602622190098;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4439460e890372529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44394602622190098;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44394602622190098;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__isset', array('name' => $name), $this->initializer57d4e4439460e890372529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44394602622190098;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44394602622190098;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__unset', array('name' => $name), $this->initializer57d4e4439460e890372529);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44394602622190098;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44394602622190098;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__clone', array(), $this->initializer57d4e4439460e890372529);

        $this->valueHolder57d4e44394602622190098 = clone $this->valueHolder57d4e44394602622190098;
    }

    public function __sleep()
    {
        $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, '__sleep', array(), $this->initializer57d4e4439460e890372529);

        return array('valueHolder57d4e44394602622190098');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4439460e890372529 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4439460e890372529;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4439460e890372529 && $this->initializer57d4e4439460e890372529->__invoke($this->valueHolder57d4e44394602622190098, $this, 'initializeProxy', array(), $this->initializer57d4e4439460e890372529);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44394602622190098;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44394602622190098;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047391f80000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e443960c8308227922 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e443960d3846608851 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e443960af909419272 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'find', array('id' => $id), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'findAll', array(), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'create', array(), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'save', array('data' => $data), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'remove', array('data' => $data), $this->initializer57d4e443960d3846608851);

        return $this->valueHolder57d4e443960c8308227922->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e443960d3846608851 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__get', array('name' => $name), $this->initializer57d4e443960d3846608851);

        if (isset(self::$publicProperties57d4e443960af909419272[$name])) {
            return $this->valueHolder57d4e443960c8308227922->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443960c8308227922;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443960c8308227922;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e443960d3846608851);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443960c8308227922;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e443960c8308227922;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__isset', array('name' => $name), $this->initializer57d4e443960d3846608851);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443960c8308227922;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443960c8308227922;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__unset', array('name' => $name), $this->initializer57d4e443960d3846608851);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e443960c8308227922;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e443960c8308227922;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__clone', array(), $this->initializer57d4e443960d3846608851);

        $this->valueHolder57d4e443960c8308227922 = clone $this->valueHolder57d4e443960c8308227922;
    }

    public function __sleep()
    {
        $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, '__sleep', array(), $this->initializer57d4e443960d3846608851);

        return array('valueHolder57d4e443960c8308227922');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e443960d3846608851 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e443960d3846608851;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e443960d3846608851 && $this->initializer57d4e443960d3846608851->__invoke($this->valueHolder57d4e443960c8308227922, $this, 'initializeProxy', array(), $this->initializer57d4e443960d3846608851);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e443960c8308227922;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e443960c8308227922;
    }


}

class ElcodiComponentCoreServicesObjectDirector_00000000047393f50000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44398082150988159 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44398091901608690 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44398060492141089 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'find', array('id' => $id), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'findAll', array(), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'create', array(), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'save', array('data' => $data), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'remove', array('data' => $data), $this->initializer57d4e44398091901608690);

        return $this->valueHolder57d4e44398082150988159->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44398091901608690 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__get', array('name' => $name), $this->initializer57d4e44398091901608690);

        if (isset(self::$publicProperties57d4e44398060492141089[$name])) {
            return $this->valueHolder57d4e44398082150988159->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44398082150988159;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44398082150988159;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44398091901608690);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44398082150988159;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44398082150988159;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__isset', array('name' => $name), $this->initializer57d4e44398091901608690);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44398082150988159;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44398082150988159;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__unset', array('name' => $name), $this->initializer57d4e44398091901608690);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44398082150988159;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44398082150988159;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__clone', array(), $this->initializer57d4e44398091901608690);

        $this->valueHolder57d4e44398082150988159 = clone $this->valueHolder57d4e44398082150988159;
    }

    public function __sleep()
    {
        $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, '__sleep', array(), $this->initializer57d4e44398091901608690);

        return array('valueHolder57d4e44398082150988159');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44398091901608690 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44398091901608690;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44398091901608690 && $this->initializer57d4e44398091901608690->__invoke($this->valueHolder57d4e44398082150988159, $this, 'initializeProxy', array(), $this->initializer57d4e44398091901608690);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44398082150988159;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44398082150988159;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739d1b0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e44399d84092213979 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e44399d90323074644 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e44399d68864314108 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'find', array('id' => $id), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'findAll', array(), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'create', array(), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'save', array('data' => $data), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'remove', array('data' => $data), $this->initializer57d4e44399d90323074644);

        return $this->valueHolder57d4e44399d84092213979->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e44399d90323074644 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__get', array('name' => $name), $this->initializer57d4e44399d90323074644);

        if (isset(self::$publicProperties57d4e44399d68864314108[$name])) {
            return $this->valueHolder57d4e44399d84092213979->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44399d84092213979;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44399d84092213979;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e44399d90323074644);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44399d84092213979;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e44399d84092213979;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__isset', array('name' => $name), $this->initializer57d4e44399d90323074644);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44399d84092213979;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44399d84092213979;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__unset', array('name' => $name), $this->initializer57d4e44399d90323074644);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e44399d84092213979;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e44399d84092213979;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__clone', array(), $this->initializer57d4e44399d90323074644);

        $this->valueHolder57d4e44399d84092213979 = clone $this->valueHolder57d4e44399d84092213979;
    }

    public function __sleep()
    {
        $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, '__sleep', array(), $this->initializer57d4e44399d90323074644);

        return array('valueHolder57d4e44399d84092213979');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e44399d90323074644 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e44399d90323074644;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e44399d90323074644 && $this->initializer57d4e44399d90323074644->__invoke($this->valueHolder57d4e44399d84092213979, $this, 'initializeProxy', array(), $this->initializer57d4e44399d90323074644);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e44399d84092213979;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e44399d84092213979;
    }


}

class ElcodiComponentCoreServicesObjectDirector_0000000004739df60000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Elcodi\Component\Core\Services\ObjectDirector implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4439b812381754834 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4439b81c963385093 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4439b7fa966714458 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function find($id)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'find', array('id' => $id), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->find($id);
    }

    /**
     * {@inheritDoc}
     */
    public function findAll()
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'findAll', array(), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->findAll();
    }

    /**
     * {@inheritDoc}
     */
    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * {@inheritDoc}
     */
    public function findOneBy(array $criteria)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'findOneBy', array('criteria' => $criteria), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->findOneBy($criteria);
    }

    /**
     * {@inheritDoc}
     */
    public function create()
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'create', array(), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->create();
    }

    /**
     * {@inheritDoc}
     */
    public function save($data)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'save', array('data' => $data), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->save($data);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($data)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'remove', array('data' => $data), $this->initializer57d4e4439b81c963385093);

        return $this->valueHolder57d4e4439b812381754834->remove($data);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4439b81c963385093 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__get', array('name' => $name), $this->initializer57d4e4439b81c963385093);

        if (isset(self::$publicProperties57d4e4439b7fa966714458[$name])) {
            return $this->valueHolder57d4e4439b812381754834->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439b812381754834;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439b812381754834;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4439b81c963385093);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439b812381754834;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439b812381754834;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__isset', array('name' => $name), $this->initializer57d4e4439b81c963385093);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439b812381754834;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439b812381754834;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__unset', array('name' => $name), $this->initializer57d4e4439b81c963385093);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439b812381754834;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439b812381754834;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__clone', array(), $this->initializer57d4e4439b81c963385093);

        $this->valueHolder57d4e4439b812381754834 = clone $this->valueHolder57d4e4439b812381754834;
    }

    public function __sleep()
    {
        $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, '__sleep', array(), $this->initializer57d4e4439b81c963385093);

        return array('valueHolder57d4e4439b812381754834');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4439b81c963385093 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4439b81c963385093;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4439b81c963385093 && $this->initializer57d4e4439b81c963385093->__invoke($this->valueHolder57d4e4439b812381754834, $this, 'initializeProxy', array(), $this->initializer57d4e4439b81c963385093);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4439b812381754834;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4439b812381754834;
    }


}

class VisithorExecutorExecutor_0000000004738bb20000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \Visithor\Executor\Executor implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4439d2af196700101 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4439d2ba768168267 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4439d296782379697 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function build()
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, 'build', array(), $this->initializer57d4e4439d2ba768168267);

        return $this->valueHolder57d4e4439d2af196700101->build();
    }

    /**
     * {@inheritDoc}
     */
    public function execute(\Visithor\Model\UrlChain $urlChain, \Visithor\Renderer\Interfaces\RendererInterface $renderer, \Symfony\Component\Console\Output\OutputInterface $output)
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, 'execute', array('urlChain' => $urlChain, 'renderer' => $renderer, 'output' => $output), $this->initializer57d4e4439d2ba768168267);

        return $this->valueHolder57d4e4439d2af196700101->execute($urlChain, $renderer, $output);
    }

    /**
     * {@inheritDoc}
     */
    public function destroy()
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, 'destroy', array(), $this->initializer57d4e4439d2ba768168267);

        return $this->valueHolder57d4e4439d2af196700101->destroy();
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4439d2ba768168267 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__get', array('name' => $name), $this->initializer57d4e4439d2ba768168267);

        if (isset(self::$publicProperties57d4e4439d296782379697[$name])) {
            return $this->valueHolder57d4e4439d2af196700101->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439d2af196700101;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439d2af196700101;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4439d2ba768168267);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439d2af196700101;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439d2af196700101;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__isset', array('name' => $name), $this->initializer57d4e4439d2ba768168267);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439d2af196700101;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439d2af196700101;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__unset', array('name' => $name), $this->initializer57d4e4439d2ba768168267);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439d2af196700101;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439d2af196700101;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__clone', array(), $this->initializer57d4e4439d2ba768168267);

        $this->valueHolder57d4e4439d2af196700101 = clone $this->valueHolder57d4e4439d2af196700101;
    }

    public function __sleep()
    {
        $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, '__sleep', array(), $this->initializer57d4e4439d2ba768168267);

        return array('valueHolder57d4e4439d2af196700101');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4439d2ba768168267 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4439d2ba768168267;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4439d2ba768168267 && $this->initializer57d4e4439d2ba768168267->__invoke($this->valueHolder57d4e4439d2af196700101, $this, 'initializeProxy', array(), $this->initializer57d4e4439d2ba768168267);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4439d2af196700101;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4439d2af196700101;
    }


}

class FOSRestBundleSerializerJMSSerializerAdapter_00000000047398ca0000000100bce36bc43f11a6b0c311ba6cf0702f6ce6abbb extends \FOS\RestBundle\Serializer\JMSSerializerAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder57d4e4439dfe7327534346 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer57d4e4439dff2133315407 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties57d4e4439dfd1905907767 = array(
        
    );

    /**
     * {@inheritDoc}
     */
    public function serialize($data, $format, $context = null)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, 'serialize', array('data' => $data, 'format' => $format, 'context' => $context), $this->initializer57d4e4439dff2133315407);

        return $this->valueHolder57d4e4439dfe7327534346->serialize($data, $format, $context);
    }

    /**
     * {@inheritDoc}
     */
    public function deserialize($data, $type, $format, $context = null)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, 'deserialize', array('data' => $data, 'type' => $type, 'format' => $format, 'context' => $context), $this->initializer57d4e4439dff2133315407);

        return $this->valueHolder57d4e4439dfe7327534346->deserialize($data, $type, $format, $context);
    }

    /**
     * @override constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public function __construct($initializer)
    {
        $this->initializer57d4e4439dff2133315407 = $initializer;
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__get', array('name' => $name), $this->initializer57d4e4439dff2133315407);

        if (isset(self::$publicProperties57d4e4439dfd1905907767[$name])) {
            return $this->valueHolder57d4e4439dfe7327534346->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439dfe7327534346;

            $backtrace = debug_backtrace(false);
            trigger_error('Undefined property: ' . get_parent_class($this) . '::$' . $name . ' in ' . $backtrace[0]['file'] . ' on line ' . $backtrace[0]['line'], \E_USER_NOTICE);
            return $targetObject->$name;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439dfe7327534346;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer57d4e4439dff2133315407);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439dfe7327534346;

            return $targetObject->$name = $value;;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439dfe7327534346;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__isset', array('name' => $name), $this->initializer57d4e4439dff2133315407);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439dfe7327534346;

            return isset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439dfe7327534346;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__unset', array('name' => $name), $this->initializer57d4e4439dff2133315407);

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder57d4e4439dfe7327534346;

            unset($targetObject->$name);;
            return;
        }

        $targetObject = $this->valueHolder57d4e4439dfe7327534346;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
            $backtrace = debug_backtrace(true);
            $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \stdClass();
            $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__clone', array(), $this->initializer57d4e4439dff2133315407);

        $this->valueHolder57d4e4439dfe7327534346 = clone $this->valueHolder57d4e4439dfe7327534346;
    }

    public function __sleep()
    {
        $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, '__sleep', array(), $this->initializer57d4e4439dff2133315407);

        return array('valueHolder57d4e4439dfe7327534346');
    }

    public function __wakeup()
    {
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer57d4e4439dff2133315407 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer57d4e4439dff2133315407;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy()
    {
        return $this->initializer57d4e4439dff2133315407 && $this->initializer57d4e4439dff2133315407->__invoke($this->valueHolder57d4e4439dfe7327534346, $this, 'initializeProxy', array(), $this->initializer57d4e4439dff2133315407);
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized()
    {
        return null !== $this->valueHolder57d4e4439dfe7327534346;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder57d4e4439dfe7327534346;
    }


}
